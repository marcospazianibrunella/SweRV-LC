
cmark.exe:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <_start>:
       0:	595552b7          	lui	t0,0x59555
       4:	5552829b          	addiw	t0,t0,1365
       8:	7c029073          	csrw	0x7c0,t0
       c:	00018117          	auipc	sp,0x18
      10:	65410113          	addi	sp,sp,1620 # 18660 <STACK>
      14:	313070ef          	jal	ra,7b26 <main>

0000000000000018 <_finish>:
      18:	70580297          	auipc	t0,0x70580
      1c:	fe828293          	addi	t0,t0,-24 # 70580000 <tohost>
      20:	0ff00313          	li	t1,255
      24:	00628023          	sb	t1,0(t0)
      28:	4305                	li	t1,1
      2a:	0062a023          	sw	t1,0(t0)
      2e:	fe0005e3          	beqz	zero,18 <_finish>
      32:	0001                	nop
      34:	0001                	nop
      36:	0001                	nop
      38:	0001                	nop
      3a:	0001                	nop
      3c:	0001                	nop
      3e:	0001                	nop
      40:	0001                	nop
      42:	0001                	nop
      44:	0001                	nop

0000000000000046 <whisperPrintfImpl>:
int
whisperPrintfImpl(const char* format, va_list ap)
{
  int count = 0;  // Printed character count

  for (const char* fp = format; *fp; fp++)
      46:	00054683          	lbu	a3,0(a0)
      4a:	120689e3          	beqz	a3,97c <whisperPrintfImpl+0x936>
{
      4e:	7159                	addi	sp,sp,-112
      50:	f4a2                	sd	s0,104(sp)
      52:	00810393          	addi	t2,sp,8
      56:	6441                	lui	s0,0x10
      58:	4285                	li	t0,1
      5a:	f0a6                	sd	s1,96(sp)
      5c:	ecca                	sd	s2,88(sp)
      5e:	e8ce                	sd	s3,80(sp)
      60:	e4d2                	sd	s4,72(sp)
      62:	e0d6                	sd	s5,64(sp)
      64:	862a                	mv	a2,a0
      66:	fc5a                	sd	s6,56(sp)
      68:	f85e                	sd	s7,48(sp)
      6a:	f462                	sd	s8,40(sp)
      6c:	f066                	sd	s9,32(sp)
  int count = 0;  // Printed character count
      6e:	4501                	li	a0,0
    {
      char pad = ' ';
      int width = 0;  // Field width

      if (*fp != '%')
      70:	02500e93          	li	t4,37
  tohost = c;
      74:	70580837          	lui	a6,0x70580
        {
          whisperPutc('%');
          continue;
        }

      while (*fp == '0')
      78:	03000313          	li	t1,48
        {
          pad = '0';
          fp++;  // Pad zero not yet implented.
        }

      if (*fp == '-')
      7c:	02d00993          	li	s3,45
        {
          fp++;  // Pad right not yet implemented.
        }

      if (*fp == '*')
      80:	02a00913          	li	s2,42
      84:	02000493          	li	s1,32
      88:	00040413          	mv	s0,s0
  tohost = c;
      8c:	4a29                	li	s4,10
      8e:	407282bb          	subw	t0,t0,t2
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
      92:	4fa5                	li	t6,9
      char c = '0' + (value % 10);
      94:	4f29                	li	t5,10
  tohost = c;
      96:	02d00a93          	li	s5,45
      if (*fp == 0)
      9a:	00164883          	lbu	a7,1(a2)
      ++fp;  // Skip %
      9e:	00160793          	addi	a5,a2,1
      if (*fp != '%')
      a2:	03d68463          	beq	a3,t4,ca <whisperPrintfImpl+0x84>
  tohost = c;
      a6:	00d80023          	sb	a3,0(a6) # 70580000 <tohost>
          ++count;
      aa:	2505                	addiw	a0,a0,1
          continue;
      ac:	863e                	mv	a2,a5
      if (*fp == 0)
      ae:	86c6                	mv	a3,a7
  for (const char* fp = format; *fp; fp++)
      b0:	f6ed                	bnez	a3,9a <whisperPrintfImpl+0x54>
*/
        }
    }

  return count;
}
      b2:	7426                	ld	s0,104(sp)
      b4:	7486                	ld	s1,96(sp)
      b6:	6966                	ld	s2,88(sp)
      b8:	69c6                	ld	s3,80(sp)
      ba:	6a26                	ld	s4,72(sp)
      bc:	6a86                	ld	s5,64(sp)
      be:	7b62                	ld	s6,56(sp)
      c0:	7bc2                	ld	s7,48(sp)
      c2:	7c22                	ld	s8,40(sp)
      c4:	7c82                	ld	s9,32(sp)
      c6:	6165                	addi	sp,sp,112
      c8:	8082                	ret
      if (*fp == 0)
      ca:	fe0884e3          	beqz	a7,b2 <whisperPrintfImpl+0x6c>
          fp++;  // Pad zero not yet implented.
      ce:	00260e13          	addi	t3,a2,2
      if (*fp == '%')
      d2:	0dd88463          	beq	a7,t4,19a <whisperPrintfImpl+0x154>
      while (*fp == '0')
      d6:	08689de3          	bne	a7,t1,970 <whisperPrintfImpl+0x92a>
      da:	0017c703          	lbu	a4,1(a5)
      de:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
      e0:	0785                	addi	a5,a5,1
      e2:	86be                	mv	a3,a5
      while (*fp == '0')
      e4:	06671263          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
      e8:	0017c703          	lbu	a4,1(a5)
      ec:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
      ee:	0785                	addi	a5,a5,1
      while (*fp == '0')
      f0:	04671c63          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
      f4:	0026c703          	lbu	a4,2(a3)
      f8:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
      fa:	00268793          	addi	a5,a3,2
      while (*fp == '0')
      fe:	04671563          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
     102:	0036c703          	lbu	a4,3(a3)
     106:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
     108:	00368793          	addi	a5,a3,3
      while (*fp == '0')
     10c:	02671e63          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
     110:	0046c703          	lbu	a4,4(a3)
     114:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
     116:	00468793          	addi	a5,a3,4
      while (*fp == '0')
     11a:	02671763          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
     11e:	0056c703          	lbu	a4,5(a3)
     122:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
     124:	00568793          	addi	a5,a3,5
      while (*fp == '0')
     128:	02671063          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
     12c:	0066c703          	lbu	a4,6(a3)
     130:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
     132:	00668793          	addi	a5,a3,6
      while (*fp == '0')
     136:	00671963          	bne	a4,t1,148 <whisperPrintfImpl+0x102>
     13a:	0076c703          	lbu	a4,7(a3)
     13e:	863e                	mv	a2,a5
          fp++;  // Pad zero not yet implented.
     140:	00768793          	addi	a5,a3,7
      while (*fp == '0')
     144:	f8670be3          	beq	a4,t1,da <whisperPrintfImpl+0x94>
          fp++;  // Pad right not yet implemented.
     148:	0609                	addi	a2,a2,2
          while (*fp >= '0' && *fp <= '9')
     14a:	0017c683          	lbu	a3,1(a5)
      if (*fp == '-')
     14e:	03370863          	beq	a4,s3,17e <whisperPrintfImpl+0x138>
      if (*fp == '*')
     152:	03270d63          	beq	a4,s2,18c <whisperPrintfImpl+0x146>
      else if (*fp >= '0' && *fp <= '9')
     156:	fd070b1b          	addiw	s6,a4,-48
     15a:	0ffb7b93          	andi	s7,s6,255
      int width = 0;  // Field width
     15e:	4e01                	li	t3,0
      else if (*fp >= '0' && *fp <= '9')
     160:	057ff563          	bgeu	t6,s7,1aa <whisperPrintfImpl+0x164>
      switch (*fp)
     164:	fa87079b          	addiw	a5,a4,-88
     168:	0ff7f713          	andi	a4,a5,255
     16c:	f4e4e2e3          	bltu	s1,a4,b0 <whisperPrintfImpl+0x6a>
     170:	00271b93          	slli	s7,a4,0x2
     174:	008b8c33          	add	s8,s7,s0
     178:	000c2c83          	lw	s9,0(s8)
     17c:	8c82                	jr	s9
          while (*fp >= '0' && *fp <= '9')
     17e:	8736                	mv	a4,a3
     180:	0027c683          	lbu	a3,2(a5)
          fp++;  // Pad right not yet implemented.
     184:	87b2                	mv	a5,a2
          while (*fp >= '0' && *fp <= '9')
     186:	0605                	addi	a2,a2,1
      if (*fp == '*')
     188:	fd2717e3          	bne	a4,s2,156 <whisperPrintfImpl+0x110>
          int outWidth = va_arg(ap, int);
     18c:	8736                	mv	a4,a3
     18e:	05a1                	addi	a1,a1,8
          fp++;  // Width not yet implemented.
     190:	0027c683          	lbu	a3,2(a5)
  for (const char* fp = format; *fp; fp++)
     194:	0605                	addi	a2,a2,1
      int width = 0;  // Field width
     196:	4e01                	li	t3,0
     198:	b7f1                	j	164 <whisperPrintfImpl+0x11e>
  tohost = c;
     19a:	00d80023          	sb	a3,0(a6)
  for (const char* fp = format; *fp; fp++)
     19e:	00264683          	lbu	a3,2(a2)
          continue;
     1a2:	8672                	mv	a2,t3
  for (const char* fp = format; *fp; fp++)
     1a4:	ee069be3          	bnez	a3,9a <whisperPrintfImpl+0x54>
     1a8:	b729                	j	b2 <whisperPrintfImpl+0x6c>
     1aa:	0017c683          	lbu	a3,1(a5)
            width = width * 10 + (*fp++ - '0');
     1ae:	002e1c1b          	slliw	s8,t3,0x2
          while (*fp >= '0' && *fp <= '9')
     1b2:	fd06871b          	addiw	a4,a3,-48
            width = width * 10 + (*fp++ - '0');
     1b6:	01cc0cbb          	addw	s9,s8,t3
     1ba:	001c9e1b          	slliw	t3,s9,0x1
          while (*fp >= '0' && *fp <= '9')
     1be:	0ff77c13          	andi	s8,a4,255
     1c2:	863e                	mv	a2,a5
     1c4:	8736                	mv	a4,a3
            width = width * 10 + (*fp++ - '0');
     1c6:	00178b93          	addi	s7,a5,1
  for (const char* fp = format; *fp; fp++)
     1ca:	0027c683          	lbu	a3,2(a5)
            width = width * 10 + (*fp++ - '0');
     1ce:	01cb0e3b          	addw	t3,s6,t3
          while (*fp >= '0' && *fp <= '9')
     1d2:	098fe663          	bltu	t6,s8,25e <whisperPrintfImpl+0x218>
            width = width * 10 + (*fp++ - '0');
     1d6:	002e1b1b          	slliw	s6,t3,0x2
     1da:	01cb063b          	addw	a2,s6,t3
          while (*fp >= '0' && *fp <= '9')
     1de:	fd068c9b          	addiw	s9,a3,-48
     1e2:	fd070c1b          	addiw	s8,a4,-48
            width = width * 10 + (*fp++ - '0');
     1e6:	00161e1b          	slliw	t3,a2,0x1
          while (*fp >= '0' && *fp <= '9')
     1ea:	0ffcfb13          	andi	s6,s9,255
     1ee:	8736                	mv	a4,a3
     1f0:	865e                	mv	a2,s7
  for (const char* fp = format; *fp; fp++)
     1f2:	0037c683          	lbu	a3,3(a5)
            width = width * 10 + (*fp++ - '0');
     1f6:	00278b93          	addi	s7,a5,2
     1fa:	01cc0e3b          	addw	t3,s8,t3
          while (*fp >= '0' && *fp <= '9')
     1fe:	076fe063          	bltu	t6,s6,25e <whisperPrintfImpl+0x218>
            width = width * 10 + (*fp++ - '0');
     202:	002e161b          	slliw	a2,t3,0x2
     206:	01c60cbb          	addw	s9,a2,t3
          while (*fp >= '0' && *fp <= '9')
     20a:	fd068b1b          	addiw	s6,a3,-48
     20e:	fd070c1b          	addiw	s8,a4,-48
            width = width * 10 + (*fp++ - '0');
     212:	001c9e1b          	slliw	t3,s9,0x1
          while (*fp >= '0' && *fp <= '9')
     216:	0ffb7c93          	andi	s9,s6,255
     21a:	8736                	mv	a4,a3
     21c:	865e                	mv	a2,s7
  for (const char* fp = format; *fp; fp++)
     21e:	0047c683          	lbu	a3,4(a5)
            width = width * 10 + (*fp++ - '0');
     222:	00378b93          	addi	s7,a5,3
     226:	01cc0e3b          	addw	t3,s8,t3
          while (*fp >= '0' && *fp <= '9')
     22a:	039fea63          	bltu	t6,s9,25e <whisperPrintfImpl+0x218>
            width = width * 10 + (*fp++ - '0');
     22e:	002e161b          	slliw	a2,t3,0x2
     232:	01c60e3b          	addw	t3,a2,t3
          while (*fp >= '0' && *fp <= '9')
     236:	fd068b1b          	addiw	s6,a3,-48
     23a:	fd070c1b          	addiw	s8,a4,-48
            width = width * 10 + (*fp++ - '0');
     23e:	001e1c9b          	slliw	s9,t3,0x1
     242:	0791                	addi	a5,a5,4
          while (*fp >= '0' && *fp <= '9')
     244:	0ffb7b13          	andi	s6,s6,255
     248:	8736                	mv	a4,a3
     24a:	865e                	mv	a2,s7
  for (const char* fp = format; *fp; fp++)
     24c:	0017c683          	lbu	a3,1(a5)
            width = width * 10 + (*fp++ - '0');
     250:	019c0e3b          	addw	t3,s8,s9
          while (*fp >= '0' && *fp <= '9')
     254:	016fe563          	bltu	t6,s6,25e <whisperPrintfImpl+0x218>
     258:	fd070b1b          	addiw	s6,a4,-48
     25c:	bf89                	j	1ae <whisperPrintfImpl+0x168>
  for (const char* fp = format; *fp; fp++)
     25e:	0609                	addi	a2,a2,2
     260:	b711                	j	164 <whisperPrintfImpl+0x11e>
  unsigned uu = value;
     262:	0005ab03          	lw	s6,0(a1)
     266:	871e                	mv	a4,t2
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
     268:	05a1                	addi	a1,a1,8
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
     26a:	00fb7c13          	andi	s8,s6,15
     26e:	057c0893          	addi	a7,s8,87
     272:	018fc463          	blt	t6,s8,27a <whisperPrintfImpl+0x234>
     276:	030c0893          	addi	a7,s8,48
          buffer[charCount++] = c;
     27a:	01170023          	sb	a7,0(a4)
          uu >>= 4;
     27e:	004b5b1b          	srliw	s6,s6,0x4
     282:	00e28e3b          	addw	t3,t0,a4
      while (uu);
     286:	0705                	addi	a4,a4,1
     288:	fe0b11e3          	bnez	s6,26a <whisperPrintfImpl+0x224>
  char* p = buffer + charCount - 1;
     28c:	fffe0c9b          	addiw	s9,t3,-1
     290:	020c9793          	slli	a5,s9,0x20
     294:	0207dc13          	srli	s8,a5,0x20
     298:	fffc4b93          	not	s7,s8
     29c:	fffe0893          	addi	a7,t3,-1
     2a0:	41700b33          	neg	s6,s7
     2a4:	011387b3          	add	a5,t2,a7
  for (unsigned i = 0; i < charCount; ++i)
     2a8:	007b7713          	andi	a4,s6,7
     2ac:	01778cb3          	add	s9,a5,s7
     2b0:	cb25                	beqz	a4,320 <whisperPrintfImpl+0x2da>
     2b2:	4c05                	li	s8,1
     2b4:	05870f63          	beq	a4,s8,312 <whisperPrintfImpl+0x2cc>
     2b8:	4b89                	li	s7,2
     2ba:	05770763          	beq	a4,s7,308 <whisperPrintfImpl+0x2c2>
     2be:	488d                	li	a7,3
     2c0:	03170f63          	beq	a4,a7,2fe <whisperPrintfImpl+0x2b8>
     2c4:	4b11                	li	s6,4
     2c6:	03670763          	beq	a4,s6,2f4 <whisperPrintfImpl+0x2ae>
     2ca:	4c15                	li	s8,5
     2cc:	01870f63          	beq	a4,s8,2ea <whisperPrintfImpl+0x2a4>
     2d0:	4b99                	li	s7,6
     2d2:	01770763          	beq	a4,s7,2e0 <whisperPrintfImpl+0x29a>
    whisperPutc(*p--);
     2d6:	0007c703          	lbu	a4,0(a5)
     2da:	17fd                	addi	a5,a5,-1
  tohost = c;
     2dc:	00e80023          	sb	a4,0(a6)
    whisperPutc(*p--);
     2e0:	0007c883          	lbu	a7,0(a5)
     2e4:	17fd                	addi	a5,a5,-1
  tohost = c;
     2e6:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     2ea:	0007cb03          	lbu	s6,0(a5)
     2ee:	17fd                	addi	a5,a5,-1
  tohost = c;
     2f0:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     2f4:	0007cc03          	lbu	s8,0(a5)
     2f8:	17fd                	addi	a5,a5,-1
  tohost = c;
     2fa:	01880023          	sb	s8,0(a6)
    whisperPutc(*p--);
     2fe:	0007cb83          	lbu	s7,0(a5)
     302:	17fd                	addi	a5,a5,-1
  tohost = c;
     304:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     308:	0007c703          	lbu	a4,0(a5)
     30c:	17fd                	addi	a5,a5,-1
  tohost = c;
     30e:	00e80023          	sb	a4,0(a6)
    whisperPutc(*p--);
     312:	0007c883          	lbu	a7,0(a5)
     316:	17fd                	addi	a5,a5,-1
  tohost = c;
     318:	01180023          	sb	a7,0(a6)
  for (unsigned i = 0; i < charCount; ++i)
     31c:	05978563          	beq	a5,s9,366 <whisperPrintfImpl+0x320>
    whisperPutc(*p--);
     320:	0007cb03          	lbu	s6,0(a5)
     324:	fff7cc03          	lbu	s8,-1(a5)
     328:	ffe7c703          	lbu	a4,-2(a5)
  tohost = c;
     32c:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     330:	ffd7c883          	lbu	a7,-3(a5)
  tohost = c;
     334:	01880023          	sb	s8,0(a6)
    whisperPutc(*p--);
     338:	ffc7cb83          	lbu	s7,-4(a5)
  tohost = c;
     33c:	00e80023          	sb	a4,0(a6)
    whisperPutc(*p--);
     340:	ffb7cc03          	lbu	s8,-5(a5)
  tohost = c;
     344:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     348:	ffa7cb03          	lbu	s6,-6(a5)
  tohost = c;
     34c:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     350:	ff97c703          	lbu	a4,-7(a5)
  tohost = c;
     354:	01880023          	sb	s8,0(a6)
     358:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     35c:	17e1                	addi	a5,a5,-8
  tohost = c;
     35e:	00e80023          	sb	a4,0(a6)
  for (unsigned i = 0; i < charCount; ++i)
     362:	fb979fe3          	bne	a5,s9,320 <whisperPrintfImpl+0x2da>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
     366:	01c5053b          	addw	a0,a0,t3
  for (const char* fp = format; *fp; fp++)
     36a:	d20698e3          	bnez	a3,9a <whisperPrintfImpl+0x54>
     36e:	b391                	j	b2 <whisperPrintfImpl+0x6c>
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
     370:	0005ab83          	lw	s7,0(a1)
     374:	8b1e                	mv	s6,t2
     376:	05a1                	addi	a1,a1,8
  int charCount = 0;
     378:	4781                	li	a5,0
      char c = '0' + (value % 10);
     37a:	03ebfc3b          	remuw	s8,s7,t5
     37e:	873e                	mv	a4,a5
      buffer[charCount++] = c;
     380:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     382:	030c0c9b          	addiw	s9,s8,48
      buffer[charCount++] = c;
     386:	019b0023          	sb	s9,0(s6)
      value = value / 10;
     38a:	03ebdc3b          	divuw	s8,s7,t5
  while (value);
     38e:	057ff763          	bgeu	t6,s7,3dc <whisperPrintfImpl+0x396>
      value = value / 10;
     392:	873e                	mv	a4,a5
      buffer[charCount++] = c;
     394:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     396:	03ec7bbb          	remuw	s7,s8,t5
     39a:	030b8c9b          	addiw	s9,s7,48
      buffer[charCount++] = c;
     39e:	019b00a3          	sb	s9,1(s6)
      value = value / 10;
     3a2:	03ec5bbb          	divuw	s7,s8,t5
  while (value);
     3a6:	038ffb63          	bgeu	t6,s8,3dc <whisperPrintfImpl+0x396>
      value = value / 10;
     3aa:	873e                	mv	a4,a5
      buffer[charCount++] = c;
     3ac:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     3ae:	03ebfc3b          	remuw	s8,s7,t5
     3b2:	030c0c9b          	addiw	s9,s8,48
      buffer[charCount++] = c;
     3b6:	019b0123          	sb	s9,2(s6)
      value = value / 10;
     3ba:	03ebdc3b          	divuw	s8,s7,t5
  while (value);
     3be:	017fff63          	bgeu	t6,s7,3dc <whisperPrintfImpl+0x396>
     3c2:	0b11                	addi	s6,s6,4
     3c4:	873e                	mv	a4,a5
      buffer[charCount++] = c;
     3c6:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     3c8:	03ec7bbb          	remuw	s7,s8,t5
     3cc:	030b8c9b          	addiw	s9,s7,48
      buffer[charCount++] = c;
     3d0:	ff9b0fa3          	sb	s9,-1(s6)
      value = value / 10;
     3d4:	03ec5bbb          	divuw	s7,s8,t5
  while (value);
     3d8:	fb8fe1e3          	bltu	t6,s8,37a <whisperPrintfImpl+0x334>
  for (int i = charCount; i < width; ++i)
     3dc:	8b3e                	mv	s6,a5
     3de:	09c7d563          	bge	a5,t3,468 <whisperPrintfImpl+0x422>
     3e2:	40fe0c33          	sub	s8,t3,a5
     3e6:	007c7c93          	andi	s9,s8,7
     3ea:	040c8c63          	beqz	s9,442 <whisperPrintfImpl+0x3fc>
     3ee:	4b85                	li	s7,1
     3f0:	057c8463          	beq	s9,s7,438 <whisperPrintfImpl+0x3f2>
     3f4:	4c09                	li	s8,2
     3f6:	038c8e63          	beq	s9,s8,432 <whisperPrintfImpl+0x3ec>
     3fa:	4b8d                	li	s7,3
     3fc:	037c8863          	beq	s9,s7,42c <whisperPrintfImpl+0x3e6>
     400:	4c11                	li	s8,4
     402:	038c8263          	beq	s9,s8,426 <whisperPrintfImpl+0x3e0>
     406:	4b95                	li	s7,5
     408:	017c8c63          	beq	s9,s7,420 <whisperPrintfImpl+0x3da>
     40c:	4c19                	li	s8,6
     40e:	018c8663          	beq	s9,s8,41a <whisperPrintfImpl+0x3d4>
  tohost = c;
     412:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     416:	00178b1b          	addiw	s6,a5,1
  tohost = c;
     41a:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     41e:	2b05                	addiw	s6,s6,1
  tohost = c;
     420:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     424:	2b05                	addiw	s6,s6,1
  tohost = c;
     426:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     42a:	2b05                	addiw	s6,s6,1
  tohost = c;
     42c:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     430:	2b05                	addiw	s6,s6,1
  tohost = c;
     432:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     436:	2b05                	addiw	s6,s6,1
  tohost = c;
     438:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     43c:	2b05                	addiw	s6,s6,1
     43e:	036e0563          	beq	t3,s6,468 <whisperPrintfImpl+0x422>
  tohost = c;
     442:	01180023          	sb	a7,0(a6)
     446:	01180023          	sb	a7,0(a6)
     44a:	01180023          	sb	a7,0(a6)
     44e:	01180023          	sb	a7,0(a6)
     452:	01180023          	sb	a7,0(a6)
     456:	01180023          	sb	a7,0(a6)
     45a:	01180023          	sb	a7,0(a6)
     45e:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     462:	2b21                	addiw	s6,s6,8
     464:	fd6e1fe3          	bne	t3,s6,442 <whisperPrintfImpl+0x3fc>
  char* p = buffer + charCount - 1;
     468:	fff74e13          	not	t3,a4
     46c:	41c008b3          	neg	a7,t3
     470:	fff78713          	addi	a4,a5,-1
     474:	971e                	add	a4,a4,t2
  for (int i = 0; i < charCount; ++i)
     476:	0078fc93          	andi	s9,a7,7
     47a:	01c70c33          	add	s8,a4,t3
     47e:	060c8963          	beqz	s9,4f0 <whisperPrintfImpl+0x4aa>
     482:	4b85                	li	s7,1
     484:	057c8f63          	beq	s9,s7,4e2 <whisperPrintfImpl+0x49c>
     488:	4b09                	li	s6,2
     48a:	056c8763          	beq	s9,s6,4d8 <whisperPrintfImpl+0x492>
     48e:	4e0d                	li	t3,3
     490:	03cc8f63          	beq	s9,t3,4ce <whisperPrintfImpl+0x488>
     494:	4891                	li	a7,4
     496:	031c8763          	beq	s9,a7,4c4 <whisperPrintfImpl+0x47e>
     49a:	4b95                	li	s7,5
     49c:	017c8f63          	beq	s9,s7,4ba <whisperPrintfImpl+0x474>
     4a0:	4b19                	li	s6,6
     4a2:	016c8763          	beq	s9,s6,4b0 <whisperPrintfImpl+0x46a>
    whisperPutc(*p--);
     4a6:	00074c83          	lbu	s9,0(a4)
     4aa:	177d                	addi	a4,a4,-1
  tohost = c;
     4ac:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     4b0:	00074e03          	lbu	t3,0(a4)
     4b4:	177d                	addi	a4,a4,-1
  tohost = c;
     4b6:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     4ba:	00074883          	lbu	a7,0(a4)
     4be:	177d                	addi	a4,a4,-1
  tohost = c;
     4c0:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     4c4:	00074b83          	lbu	s7,0(a4)
     4c8:	177d                	addi	a4,a4,-1
  tohost = c;
     4ca:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     4ce:	00074b03          	lbu	s6,0(a4)
     4d2:	177d                	addi	a4,a4,-1
  tohost = c;
     4d4:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     4d8:	00074c83          	lbu	s9,0(a4)
     4dc:	177d                	addi	a4,a4,-1
  tohost = c;
     4de:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     4e2:	00074e03          	lbu	t3,0(a4)
     4e6:	177d                	addi	a4,a4,-1
  tohost = c;
     4e8:	01c80023          	sb	t3,0(a6)
  for (int i = 0; i < charCount; ++i)
     4ec:	05870563          	beq	a4,s8,536 <whisperPrintfImpl+0x4f0>
    whisperPutc(*p--);
     4f0:	00074b03          	lbu	s6,0(a4)
     4f4:	fff74b83          	lbu	s7,-1(a4)
     4f8:	ffe74883          	lbu	a7,-2(a4)
  tohost = c;
     4fc:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     500:	ffd74c83          	lbu	s9,-3(a4)
  tohost = c;
     504:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     508:	ffc74e03          	lbu	t3,-4(a4)
  tohost = c;
     50c:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     510:	ffb74b83          	lbu	s7,-5(a4)
  tohost = c;
     514:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     518:	ffa74b03          	lbu	s6,-6(a4)
  tohost = c;
     51c:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     520:	ff974883          	lbu	a7,-7(a4)
  tohost = c;
     524:	01780023          	sb	s7,0(a6)
     528:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     52c:	1761                	addi	a4,a4,-8
  tohost = c;
     52e:	01180023          	sb	a7,0(a6)
  for (int i = 0; i < charCount; ++i)
     532:	fb871fe3          	bne	a4,s8,4f0 <whisperPrintfImpl+0x4aa>
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
     536:	9d3d                	addw	a0,a0,a5
  for (const char* fp = format; *fp; fp++)
     538:	b60691e3          	bnez	a3,9a <whisperPrintfImpl+0x54>
     53c:	be9d                	j	b2 <whisperPrintfImpl+0x6c>
          count += whisperPuts(va_arg(ap, char*));
     53e:	619c                	ld	a5,0(a1)
     540:	05a1                	addi	a1,a1,8
  while (*s)
     542:	0007cc03          	lbu	s8,0(a5)
     546:	060c0263          	beqz	s8,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     54a:	01880023          	sb	s8,0(a6)
  while (*s)
     54e:	0017cc03          	lbu	s8,1(a5)
     552:	040c0c63          	beqz	s8,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     556:	01880023          	sb	s8,0(a6)
  while (*s)
     55a:	0027c703          	lbu	a4,2(a5)
     55e:	c731                	beqz	a4,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     560:	00e80023          	sb	a4,0(a6)
  while (*s)
     564:	0037cc83          	lbu	s9,3(a5)
     568:	040c8163          	beqz	s9,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     56c:	01980023          	sb	s9,0(a6)
  while (*s)
     570:	0047ce03          	lbu	t3,4(a5)
     574:	020e0b63          	beqz	t3,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     578:	01c80023          	sb	t3,0(a6)
  while (*s)
     57c:	0057cb83          	lbu	s7,5(a5)
     580:	020b8563          	beqz	s7,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     584:	01780023          	sb	s7,0(a6)
  while (*s)
     588:	0067cb03          	lbu	s6,6(a5)
     58c:	000b0f63          	beqz	s6,5aa <whisperPrintfImpl+0x564>
  tohost = c;
     590:	01680023          	sb	s6,0(a6)
  while (*s)
     594:	0077c883          	lbu	a7,7(a5)
     598:	00088963          	beqz	a7,5aa <whisperPrintfImpl+0x564>
    whisperPutc(*s++);
     59c:	07a1                	addi	a5,a5,8
  tohost = c;
     59e:	01180023          	sb	a7,0(a6)
  while (*s)
     5a2:	0007cc03          	lbu	s8,0(a5)
     5a6:	fa0c12e3          	bnez	s8,54a <whisperPrintfImpl+0x504>
  tohost = c;
     5aa:	01480023          	sb	s4,0(a6)
          count += whisperPuts(va_arg(ap, char*));
     5ae:	2505                	addiw	a0,a0,1
  for (const char* fp = format; *fp; fp++)
     5b0:	ae0695e3          	bnez	a3,9a <whisperPrintfImpl+0x54>
     5b4:	bcfd                	j	b2 <whisperPrintfImpl+0x6c>
  unsigned uu = value;
     5b6:	0005ab03          	lw	s6,0(a1)
     5ba:	889e                	mv	a7,t2
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
     5bc:	05a1                	addi	a1,a1,8
          char c = '0' + (uu & 7);
     5be:	007b7713          	andi	a4,s6,7
     5c2:	03070c9b          	addiw	s9,a4,48
          buffer[charCount++] = c;
     5c6:	01988023          	sb	s9,0(a7)
          uu >>= 3;
     5ca:	003b5b9b          	srliw	s7,s6,0x3
     5ce:	0112873b          	addw	a4,t0,a7
      while (uu);
     5d2:	00188e13          	addi	t3,a7,1
     5d6:	0c0b8263          	beqz	s7,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     5da:	007bfb13          	andi	s6,s7,7
     5de:	030b079b          	addiw	a5,s6,48
          buffer[charCount++] = c;
     5e2:	00f880a3          	sb	a5,1(a7)
          uu >>= 3;
     5e6:	003bdc13          	srli	s8,s7,0x3
     5ea:	01c2873b          	addw	a4,t0,t3
      while (uu);
     5ee:	00288c93          	addi	s9,a7,2
     5f2:	0a0c0463          	beqz	s8,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     5f6:	007c7713          	andi	a4,s8,7
     5fa:	03070b9b          	addiw	s7,a4,48
          buffer[charCount++] = c;
     5fe:	01788123          	sb	s7,2(a7)
          uu >>= 3;
     602:	003c5b13          	srli	s6,s8,0x3
     606:	0192873b          	addw	a4,t0,s9
      while (uu);
     60a:	00388e13          	addi	t3,a7,3
     60e:	080b0663          	beqz	s6,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     612:	007b7793          	andi	a5,s6,7
     616:	03078c1b          	addiw	s8,a5,48
          buffer[charCount++] = c;
     61a:	018881a3          	sb	s8,3(a7)
          uu >>= 3;
     61e:	003b5c93          	srli	s9,s6,0x3
     622:	01c2873b          	addw	a4,t0,t3
      while (uu);
     626:	00488b93          	addi	s7,a7,4
     62a:	060c8863          	beqz	s9,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     62e:	007cf713          	andi	a4,s9,7
     632:	03070b1b          	addiw	s6,a4,48
          buffer[charCount++] = c;
     636:	01688223          	sb	s6,4(a7)
          uu >>= 3;
     63a:	003cd793          	srli	a5,s9,0x3
     63e:	0172873b          	addw	a4,t0,s7
      while (uu);
     642:	00588e13          	addi	t3,a7,5
     646:	cbb1                	beqz	a5,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     648:	0077fc13          	andi	s8,a5,7
     64c:	030c0c9b          	addiw	s9,s8,48
          buffer[charCount++] = c;
     650:	019882a3          	sb	s9,5(a7)
          uu >>= 3;
     654:	0037db93          	srli	s7,a5,0x3
     658:	01c2873b          	addw	a4,t0,t3
      while (uu);
     65c:	00688b13          	addi	s6,a7,6
     660:	020b8d63          	beqz	s7,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     664:	007bf713          	andi	a4,s7,7
     668:	0307079b          	addiw	a5,a4,48
          buffer[charCount++] = c;
     66c:	00f88323          	sb	a5,6(a7)
          uu >>= 3;
     670:	003bdc13          	srli	s8,s7,0x3
     674:	0162873b          	addw	a4,t0,s6
      while (uu);
     678:	00788e13          	addi	t3,a7,7
     67c:	000c0f63          	beqz	s8,69a <whisperPrintfImpl+0x654>
          char c = '0' + (uu & 7);
     680:	007c7c93          	andi	s9,s8,7
     684:	030c8b9b          	addiw	s7,s9,48
          buffer[charCount++] = c;
     688:	017883a3          	sb	s7,7(a7)
          uu >>= 3;
     68c:	003c5b13          	srli	s6,s8,0x3
     690:	01c2873b          	addw	a4,t0,t3
      while (uu);
     694:	08a1                	addi	a7,a7,8
     696:	f20b14e3          	bnez	s6,5be <whisperPrintfImpl+0x578>
  char* p = buffer + charCount - 1;
     69a:	fff7079b          	addiw	a5,a4,-1
     69e:	02079c13          	slli	s8,a5,0x20
     6a2:	020c5e13          	srli	t3,s8,0x20
     6a6:	fffe4c93          	not	s9,t3
     6aa:	fff70b93          	addi	s7,a4,-1
     6ae:	41900b33          	neg	s6,s9
     6b2:	017387b3          	add	a5,t2,s7
  for (unsigned i = 0; i < charCount; ++i)
     6b6:	007b7893          	andi	a7,s6,7
     6ba:	01978c33          	add	s8,a5,s9
     6be:	06088963          	beqz	a7,730 <whisperPrintfImpl+0x6ea>
     6c2:	4e05                	li	t3,1
     6c4:	05c88f63          	beq	a7,t3,722 <whisperPrintfImpl+0x6dc>
     6c8:	4c89                	li	s9,2
     6ca:	05988763          	beq	a7,s9,718 <whisperPrintfImpl+0x6d2>
     6ce:	4b8d                	li	s7,3
     6d0:	03788f63          	beq	a7,s7,70e <whisperPrintfImpl+0x6c8>
     6d4:	4b11                	li	s6,4
     6d6:	03688763          	beq	a7,s6,704 <whisperPrintfImpl+0x6be>
     6da:	4e15                	li	t3,5
     6dc:	01c88f63          	beq	a7,t3,6fa <whisperPrintfImpl+0x6b4>
     6e0:	4c99                	li	s9,6
     6e2:	01988763          	beq	a7,s9,6f0 <whisperPrintfImpl+0x6aa>
    whisperPutc(*p--);
     6e6:	0007c883          	lbu	a7,0(a5)
     6ea:	17fd                	addi	a5,a5,-1
  tohost = c;
     6ec:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     6f0:	0007cb83          	lbu	s7,0(a5)
     6f4:	17fd                	addi	a5,a5,-1
  tohost = c;
     6f6:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     6fa:	0007cb03          	lbu	s6,0(a5)
     6fe:	17fd                	addi	a5,a5,-1
  tohost = c;
     700:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     704:	0007ce03          	lbu	t3,0(a5)
     708:	17fd                	addi	a5,a5,-1
  tohost = c;
     70a:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     70e:	0007cc83          	lbu	s9,0(a5)
     712:	17fd                	addi	a5,a5,-1
  tohost = c;
     714:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     718:	0007c883          	lbu	a7,0(a5)
     71c:	17fd                	addi	a5,a5,-1
  tohost = c;
     71e:	01180023          	sb	a7,0(a6)
    whisperPutc(*p--);
     722:	0007cb83          	lbu	s7,0(a5)
     726:	17fd                	addi	a5,a5,-1
  tohost = c;
     728:	01780023          	sb	s7,0(a6)
  for (unsigned i = 0; i < charCount; ++i)
     72c:	04fc0563          	beq	s8,a5,776 <whisperPrintfImpl+0x730>
    whisperPutc(*p--);
     730:	0007cb03          	lbu	s6,0(a5)
     734:	fff7ce03          	lbu	t3,-1(a5)
     738:	ffe7cc83          	lbu	s9,-2(a5)
  tohost = c;
     73c:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     740:	ffd7cb03          	lbu	s6,-3(a5)
  tohost = c;
     744:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     748:	ffc7cb83          	lbu	s7,-4(a5)
  tohost = c;
     74c:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     750:	ffb7c883          	lbu	a7,-5(a5)
  tohost = c;
     754:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     758:	ffa7ce03          	lbu	t3,-6(a5)
  tohost = c;
     75c:	01780023          	sb	s7,0(a6)
    whisperPutc(*p--);
     760:	ff97cc83          	lbu	s9,-7(a5)
  tohost = c;
     764:	01180023          	sb	a7,0(a6)
     768:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     76c:	17e1                	addi	a5,a5,-8
  tohost = c;
     76e:	01980023          	sb	s9,0(a6)
  for (unsigned i = 0; i < charCount; ++i)
     772:	fafc1fe3          	bne	s8,a5,730 <whisperPrintfImpl+0x6ea>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
     776:	9d39                	addw	a0,a0,a4
  for (const char* fp = format; *fp; fp++)
     778:	920691e3          	bnez	a3,9a <whisperPrintfImpl+0x54>
     77c:	ba1d                	j	b2 <whisperPrintfImpl+0x6c>
          count += whisperPrintDecimal(va_arg(ap, int), width, pad);
     77e:	0005ac03          	lw	s8,0(a1)
     782:	05a1                	addi	a1,a1,8
  if (neg)
     784:	8762                	mv	a4,s8
     786:	000c5763          	bgez	s8,794 <whisperPrintfImpl+0x74e>
      value = -value;
     78a:	4180073b          	negw	a4,s8
  tohost = c;
     78e:	01580023          	sb	s5,0(a6)
      width--;
     792:	3e7d                	addiw	t3,t3,-1
     794:	8c9e                	mv	s9,t2
     796:	4781                	li	a5,0
      value = value / 10;
     798:	03e74b3b          	divw	s6,a4,t5
     79c:	8bbe                	mv	s7,a5
      buffer[charCount++] = c;
     79e:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     7a0:	03e7673b          	remw	a4,a4,t5
     7a4:	0307071b          	addiw	a4,a4,48
      buffer[charCount++] = c;
     7a8:	00ec8023          	sb	a4,0(s9)
  while (value);
     7ac:	040b0563          	beqz	s6,7f6 <whisperPrintfImpl+0x7b0>
      value = value / 10;
     7b0:	03eb473b          	divw	a4,s6,t5
      buffer[charCount++] = c;
     7b4:	8bbe                	mv	s7,a5
     7b6:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     7b8:	03eb6b3b          	remw	s6,s6,t5
     7bc:	030b0b1b          	addiw	s6,s6,48
      buffer[charCount++] = c;
     7c0:	016c80a3          	sb	s6,1(s9)
  while (value);
     7c4:	cb0d                	beqz	a4,7f6 <whisperPrintfImpl+0x7b0>
      value = value / 10;
     7c6:	03e74b3b          	divw	s6,a4,t5
      buffer[charCount++] = c;
     7ca:	8bbe                	mv	s7,a5
     7cc:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     7ce:	03e7673b          	remw	a4,a4,t5
     7d2:	0307071b          	addiw	a4,a4,48
      buffer[charCount++] = c;
     7d6:	00ec8123          	sb	a4,2(s9)
  while (value);
     7da:	000b0e63          	beqz	s6,7f6 <whisperPrintfImpl+0x7b0>
      value = value / 10;
     7de:	03eb473b          	divw	a4,s6,t5
  while (value);
     7e2:	0c91                	addi	s9,s9,4
     7e4:	8bbe                	mv	s7,a5
      buffer[charCount++] = c;
     7e6:	2785                	addiw	a5,a5,1
      char c = '0' + (value % 10);
     7e8:	03eb6b3b          	remw	s6,s6,t5
     7ec:	030b0b1b          	addiw	s6,s6,48
      buffer[charCount++] = c;
     7f0:	ff6c8fa3          	sb	s6,-1(s9)
  while (value);
     7f4:	f355                	bnez	a4,798 <whisperPrintfImpl+0x752>
  for (int i = charCount; i < width; ++i)
     7f6:	873e                	mv	a4,a5
     7f8:	09c7d563          	bge	a5,t3,882 <whisperPrintfImpl+0x83c>
     7fc:	40fe0cb3          	sub	s9,t3,a5
     800:	007cfb13          	andi	s6,s9,7
     804:	040b0c63          	beqz	s6,85c <whisperPrintfImpl+0x816>
     808:	4c85                	li	s9,1
     80a:	059b0463          	beq	s6,s9,852 <whisperPrintfImpl+0x80c>
     80e:	4c89                	li	s9,2
     810:	039b0e63          	beq	s6,s9,84c <whisperPrintfImpl+0x806>
     814:	4c8d                	li	s9,3
     816:	039b0863          	beq	s6,s9,846 <whisperPrintfImpl+0x800>
     81a:	4c91                	li	s9,4
     81c:	039b0263          	beq	s6,s9,840 <whisperPrintfImpl+0x7fa>
     820:	4c95                	li	s9,5
     822:	019b0c63          	beq	s6,s9,83a <whisperPrintfImpl+0x7f4>
     826:	4c99                	li	s9,6
     828:	019b0663          	beq	s6,s9,834 <whisperPrintfImpl+0x7ee>
  tohost = c;
     82c:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     830:	0017871b          	addiw	a4,a5,1
  tohost = c;
     834:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     838:	2705                	addiw	a4,a4,1
  tohost = c;
     83a:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     83e:	2705                	addiw	a4,a4,1
  tohost = c;
     840:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     844:	2705                	addiw	a4,a4,1
  tohost = c;
     846:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     84a:	2705                	addiw	a4,a4,1
  tohost = c;
     84c:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     850:	2705                	addiw	a4,a4,1
  tohost = c;
     852:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     856:	2705                	addiw	a4,a4,1
     858:	03c70563          	beq	a4,t3,882 <whisperPrintfImpl+0x83c>
  tohost = c;
     85c:	01180023          	sb	a7,0(a6)
     860:	01180023          	sb	a7,0(a6)
     864:	01180023          	sb	a7,0(a6)
     868:	01180023          	sb	a7,0(a6)
     86c:	01180023          	sb	a7,0(a6)
     870:	01180023          	sb	a7,0(a6)
     874:	01180023          	sb	a7,0(a6)
     878:	01180023          	sb	a7,0(a6)
  for (int i = charCount; i < width; ++i)
     87c:	2721                	addiw	a4,a4,8
     87e:	fdc71fe3          	bne	a4,t3,85c <whisperPrintfImpl+0x816>
  char* p = buffer + charCount - 1;
     882:	fffbc893          	not	a7,s7
     886:	41100e33          	neg	t3,a7
     88a:	fff78b13          	addi	s6,a5,-1
     88e:	01638733          	add	a4,t2,s6
  for (int i = 0; i < charCount; ++i)
     892:	007e7c93          	andi	s9,t3,7
     896:	98ba                	add	a7,a7,a4
     898:	060c8963          	beqz	s9,90a <whisperPrintfImpl+0x8c4>
     89c:	4b05                	li	s6,1
     89e:	056c8f63          	beq	s9,s6,8fc <whisperPrintfImpl+0x8b6>
     8a2:	4e09                	li	t3,2
     8a4:	05cc8763          	beq	s9,t3,8f2 <whisperPrintfImpl+0x8ac>
     8a8:	4b0d                	li	s6,3
     8aa:	036c8f63          	beq	s9,s6,8e8 <whisperPrintfImpl+0x8a2>
     8ae:	4e11                	li	t3,4
     8b0:	03cc8763          	beq	s9,t3,8de <whisperPrintfImpl+0x898>
     8b4:	4b15                	li	s6,5
     8b6:	016c8f63          	beq	s9,s6,8d4 <whisperPrintfImpl+0x88e>
     8ba:	4e19                	li	t3,6
     8bc:	01cc8763          	beq	s9,t3,8ca <whisperPrintfImpl+0x884>
    whisperPutc(*p--);
     8c0:	00074c83          	lbu	s9,0(a4)
     8c4:	177d                	addi	a4,a4,-1
  tohost = c;
     8c6:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     8ca:	00074b03          	lbu	s6,0(a4)
     8ce:	177d                	addi	a4,a4,-1
  tohost = c;
     8d0:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     8d4:	00074e03          	lbu	t3,0(a4)
     8d8:	177d                	addi	a4,a4,-1
  tohost = c;
     8da:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     8de:	00074c83          	lbu	s9,0(a4)
     8e2:	177d                	addi	a4,a4,-1
  tohost = c;
     8e4:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     8e8:	00074b03          	lbu	s6,0(a4)
     8ec:	177d                	addi	a4,a4,-1
  tohost = c;
     8ee:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     8f2:	00074e03          	lbu	t3,0(a4)
     8f6:	177d                	addi	a4,a4,-1
  tohost = c;
     8f8:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     8fc:	00074c83          	lbu	s9,0(a4)
     900:	177d                	addi	a4,a4,-1
  tohost = c;
     902:	01980023          	sb	s9,0(a6)
  for (int i = 0; i < charCount; ++i)
     906:	05170563          	beq	a4,a7,950 <whisperPrintfImpl+0x90a>
    whisperPutc(*p--);
     90a:	00074b03          	lbu	s6,0(a4)
     90e:	fff74c83          	lbu	s9,-1(a4)
     912:	ffe74e03          	lbu	t3,-2(a4)
  tohost = c;
     916:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     91a:	ffd74b03          	lbu	s6,-3(a4)
  tohost = c;
     91e:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     922:	ffc74c83          	lbu	s9,-4(a4)
  tohost = c;
     926:	01c80023          	sb	t3,0(a6)
    whisperPutc(*p--);
     92a:	ffb74e03          	lbu	t3,-5(a4)
  tohost = c;
     92e:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     932:	ffa74b03          	lbu	s6,-6(a4)
  tohost = c;
     936:	01980023          	sb	s9,0(a6)
    whisperPutc(*p--);
     93a:	ff974c83          	lbu	s9,-7(a4)
  tohost = c;
     93e:	01c80023          	sb	t3,0(a6)
     942:	01680023          	sb	s6,0(a6)
    whisperPutc(*p--);
     946:	1761                	addi	a4,a4,-8
  tohost = c;
     948:	01980023          	sb	s9,0(a6)
  for (int i = 0; i < charCount; ++i)
     94c:	fb171fe3          	bne	a4,a7,90a <whisperPrintfImpl+0x8c4>
  if (neg)
     950:	be0c53e3          	bgez	s8,536 <whisperPrintfImpl+0x4f0>
    charCount++;
     954:	002b879b          	addiw	a5,s7,2
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
     958:	9d3d                	addw	a0,a0,a5
          break;
     95a:	bef9                	j	538 <whisperPrintfImpl+0x4f2>
          whisperPutc(va_arg(ap, int));
     95c:	0005c783          	lbu	a5,0(a1)
          ++count;
     960:	2505                	addiw	a0,a0,1
          whisperPutc(va_arg(ap, int));
     962:	05a1                	addi	a1,a1,8
  tohost = c;
     964:	00f80023          	sb	a5,0(a6)
  for (const char* fp = format; *fp; fp++)
     968:	f2069963          	bnez	a3,9a <whisperPrintfImpl+0x54>
     96c:	f46ff06f          	j	b2 <whisperPrintfImpl+0x6c>
      while (*fp == '0')
     970:	8746                	mv	a4,a7
     972:	8672                	mv	a2,t3
      char pad = ' ';
     974:	02000893          	li	a7,32
     978:	fd2ff06f          	j	14a <whisperPrintfImpl+0x104>
  int count = 0;  // Printed character count
     97c:	4501                	li	a0,0
}
     97e:	8082                	ret

0000000000000980 <whisperPrintf>:


int
whisperPrintf(const char* format, ...)
{
     980:	711d                	addi	sp,sp,-96
  va_list ap;

  va_start(ap, format);
     982:	02810313          	addi	t1,sp,40
{
     986:	f42e                	sd	a1,40(sp)
  int code = whisperPrintfImpl(format, ap);
     988:	859a                	mv	a1,t1
{
     98a:	ec06                	sd	ra,24(sp)
     98c:	f832                	sd	a2,48(sp)
     98e:	fc36                	sd	a3,56(sp)
     990:	e0ba                	sd	a4,64(sp)
     992:	e4be                	sd	a5,72(sp)
     994:	e8c2                	sd	a6,80(sp)
     996:	ecc6                	sd	a7,88(sp)
  va_start(ap, format);
     998:	e41a                	sd	t1,8(sp)
  int code = whisperPrintfImpl(format, ap);
     99a:	eacff0ef          	jal	ra,46 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
     99e:	60e2                	ld	ra,24(sp)
     9a0:	6125                	addi	sp,sp,96
     9a2:	8082                	ret

00000000000009a4 <putchar>:

int
putchar(int c)
{
  return whisperPutc(c);
     9a4:	0ff57513          	andi	a0,a0,255
  tohost = c;
     9a8:	705807b7          	lui	a5,0x70580
     9ac:	00a78023          	sb	a0,0(a5) # 70580000 <tohost>
}
     9b0:	8082                	ret

00000000000009b2 <putc>:
struct FILE;

int
putc(int c, struct FILE* f)
{
  return whisperPutc(c);
     9b2:	0ff57513          	andi	a0,a0,255
  tohost = c;
     9b6:	705807b7          	lui	a5,0x70580
     9ba:	00a78023          	sb	a0,0(a5) # 70580000 <tohost>
}
     9be:	8082                	ret

00000000000009c0 <puts>:
  while (*s)
     9c0:	00054803          	lbu	a6,0(a0)
     9c4:	705807b7          	lui	a5,0x70580
     9c8:	04080f63          	beqz	a6,a26 <puts+0x66>
  tohost = c;
     9cc:	01078023          	sb	a6,0(a5) # 70580000 <tohost>
  while (*s)
     9d0:	00154703          	lbu	a4,1(a0)
     9d4:	cb29                	beqz	a4,a26 <puts+0x66>
  tohost = c;
     9d6:	00e78023          	sb	a4,0(a5)
  while (*s)
     9da:	00254283          	lbu	t0,2(a0)
     9de:	04028463          	beqz	t0,a26 <puts+0x66>
  tohost = c;
     9e2:	00578023          	sb	t0,0(a5)
  while (*s)
     9e6:	00354303          	lbu	t1,3(a0)
     9ea:	02030e63          	beqz	t1,a26 <puts+0x66>
  tohost = c;
     9ee:	00678023          	sb	t1,0(a5)
  while (*s)
     9f2:	00454383          	lbu	t2,4(a0)
     9f6:	02038863          	beqz	t2,a26 <puts+0x66>
  tohost = c;
     9fa:	00778023          	sb	t2,0(a5)
  while (*s)
     9fe:	00554583          	lbu	a1,5(a0)
     a02:	c195                	beqz	a1,a26 <puts+0x66>
  tohost = c;
     a04:	00b78023          	sb	a1,0(a5)
  while (*s)
     a08:	00654603          	lbu	a2,6(a0)
     a0c:	ce09                	beqz	a2,a26 <puts+0x66>
  tohost = c;
     a0e:	00c78023          	sb	a2,0(a5)
  while (*s)
     a12:	00754683          	lbu	a3,7(a0)
    whisperPutc(*s++);
     a16:	0521                	addi	a0,a0,8
  while (*s)
     a18:	c699                	beqz	a3,a26 <puts+0x66>
  tohost = c;
     a1a:	00d78023          	sb	a3,0(a5)
  while (*s)
     a1e:	00054803          	lbu	a6,0(a0)
     a22:	fa0815e3          	bnez	a6,9cc <puts+0xc>
  tohost = c;
     a26:	4529                	li	a0,10
     a28:	00a78023          	sb	a0,0(a5)

int
puts(const char* s)
{
  return whisperPuts(s);
}
     a2c:	4505                	li	a0,1
     a2e:	8082                	ret

0000000000000a30 <printf>:

int
printf(const char* format, ...)
{
     a30:	711d                	addi	sp,sp,-96
  va_list ap;

  va_start(ap, format);
     a32:	02810313          	addi	t1,sp,40
{
     a36:	f42e                	sd	a1,40(sp)
  int code = whisperPrintfImpl(format, ap);
     a38:	859a                	mv	a1,t1
{
     a3a:	ec06                	sd	ra,24(sp)
     a3c:	f832                	sd	a2,48(sp)
     a3e:	fc36                	sd	a3,56(sp)
     a40:	e0ba                	sd	a4,64(sp)
     a42:	e4be                	sd	a5,72(sp)
     a44:	e8c2                	sd	a6,80(sp)
     a46:	ecc6                	sd	a7,88(sp)
  va_start(ap, format);
     a48:	e41a                	sd	t1,8(sp)
  int code = whisperPrintfImpl(format, ap);
     a4a:	dfcff0ef          	jal	ra,46 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
     a4e:	60e2                	ld	ra,24(sp)
     a50:	6125                	addi	sp,sp,96
     a52:	8082                	ret

0000000000000a54 <get_mcycle>:
unsigned int mcyclel;
unsigned int mcycleh0 = 0, mcycleh1=1;
uint64_t cycles;

while(mcycleh0 != mcycleh1) {
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     a54:	b8002573          	csrr	a0,mcycleh
     a58:	2501                	sext.w	a0,a0
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     a5a:	b00027f3          	csrr	a5,mcycle
     a5e:	2781                	sext.w	a5,a5
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     a60:	b8002773          	csrr	a4,mcycleh
     a64:	0007029b          	sext.w	t0,a4
while(mcycleh0 != mcycleh1) {
     a68:	0c550263          	beq	a0,t0,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     a6c:	b8002373          	csrr	t1,mcycleh
     a70:	0003051b          	sext.w	a0,t1
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     a74:	b00023f3          	csrr	t2,mcycle
     a78:	0003879b          	sext.w	a5,t2
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     a7c:	b80025f3          	csrr	a1,mcycleh
     a80:	0005861b          	sext.w	a2,a1
while(mcycleh0 != mcycleh1) {
     a84:	0ac50463          	beq	a0,a2,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     a88:	b80026f3          	csrr	a3,mcycleh
     a8c:	0006851b          	sext.w	a0,a3
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     a90:	b0002873          	csrr	a6,mcycle
     a94:	0008079b          	sext.w	a5,a6
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     a98:	b80028f3          	csrr	a7,mcycleh
     a9c:	00088e1b          	sext.w	t3,a7
while(mcycleh0 != mcycleh1) {
     aa0:	09c50663          	beq	a0,t3,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     aa4:	b8002ef3          	csrr	t4,mcycleh
     aa8:	000e851b          	sext.w	a0,t4
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     aac:	b0002f73          	csrr	t5,mcycle
     ab0:	000f079b          	sext.w	a5,t5
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     ab4:	b8002ff3          	csrr	t6,mcycleh
     ab8:	000f871b          	sext.w	a4,t6
while(mcycleh0 != mcycleh1) {
     abc:	06e50863          	beq	a0,a4,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     ac0:	b8002573          	csrr	a0,mcycleh
     ac4:	2501                	sext.w	a0,a0
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     ac6:	b00027f3          	csrr	a5,mcycle
     aca:	2781                	sext.w	a5,a5
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     acc:	b80022f3          	csrr	t0,mcycleh
     ad0:	0002831b          	sext.w	t1,t0
while(mcycleh0 != mcycleh1) {
     ad4:	04650c63          	beq	a0,t1,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     ad8:	b80023f3          	csrr	t2,mcycleh
     adc:	0003851b          	sext.w	a0,t2
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     ae0:	b00025f3          	csrr	a1,mcycle
     ae4:	0005879b          	sext.w	a5,a1
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     ae8:	b8002673          	csrr	a2,mcycleh
     aec:	0006069b          	sext.w	a3,a2
while(mcycleh0 != mcycleh1) {
     af0:	02d50e63          	beq	a0,a3,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     af4:	b8002873          	csrr	a6,mcycleh
     af8:	0008051b          	sext.w	a0,a6
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     afc:	b00028f3          	csrr	a7,mcycle
     b00:	0008879b          	sext.w	a5,a7
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     b04:	b8002e73          	csrr	t3,mcycleh
     b08:	000e0e9b          	sext.w	t4,t3
while(mcycleh0 != mcycleh1) {
     b0c:	03d50063          	beq	a0,t4,b2c <get_mcycle+0xd8>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
     b10:	b8002f73          	csrr	t5,mcycleh
     b14:	000f051b          	sext.w	a0,t5
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
     b18:	b0002ff3          	csrr	t6,mcycle
     b1c:	000f879b          	sext.w	a5,t6
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
     b20:	b8002773          	csrr	a4,mcycleh
     b24:	0007029b          	sext.w	t0,a4
while(mcycleh0 != mcycleh1) {
     b28:	f25516e3          	bne	a0,t0,a54 <get_mcycle>
}
cycles = mcycleh1;
return (cycles << 32) | mcyclel;
     b2c:	02079393          	slli	t2,a5,0x20
     b30:	02051313          	slli	t1,a0,0x20
     b34:	0203d593          	srli	a1,t2,0x20

}
     b38:	00b36533          	or	a0,t1,a1
     b3c:	8082                	ret

0000000000000b3e <cmp_idx>:
       Compare the idx item in a list cell, and regen the data.

       Can be used by mergesort.
   */
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
        if (res==NULL) {
     b3e:	c619                	beqz	a2,b4c <cmp_idx+0xe>
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
            }
        return a->idx - b->idx;
     b40:	00251503          	lh	a0,2(a0)
     b44:	00259583          	lh	a1,2(a1)
}
     b48:	9d0d                	subw	a0,a0,a1
     b4a:	8082                	ret
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     b4c:	00051783          	lh	a5,0(a0)
     b50:	0107971b          	slliw	a4,a5,0x10
     b54:	0107529b          	srliw	t0,a4,0x10
     b58:	f007f313          	andi	t1,a5,-256
     b5c:	0082d39b          	srliw	t2,t0,0x8
     b60:	00736633          	or	a2,t1,t2
     b64:	00c51023          	sh	a2,0(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     b68:	00059683          	lh	a3,0(a1)
        return a->idx - b->idx;
     b6c:	00251503          	lh	a0,2(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     b70:	0106981b          	slliw	a6,a3,0x10
     b74:	0108589b          	srliw	a7,a6,0x10
     b78:	f006fe13          	andi	t3,a3,-256
     b7c:	0088de9b          	srliw	t4,a7,0x8
     b80:	01de6f33          	or	t5,t3,t4
     b84:	01e59023          	sh	t5,0(a1)
        return a->idx - b->idx;
     b88:	00259583          	lh	a1,2(a1)
}
     b8c:	9d0d                	subw	a0,a0,a1
     b8e:	8082                	ret

0000000000000b90 <copy_info>:

void copy_info(list_data *to,list_data *from) {
        to->data16=from->data16;
     b90:	00059703          	lh	a4,0(a1)
        to->idx=from->idx;
     b94:	00259783          	lh	a5,2(a1)
        to->data16=from->data16;
     b98:	00e51023          	sh	a4,0(a0)
        to->idx=from->idx;
     b9c:	00f51123          	sh	a5,2(a0)
}
     ba0:	8082                	ret

0000000000000ba2 <core_list_init>:

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
        /* calculated pointers for the list */
            ee_u32 per_item=16+sizeof(struct list_data_s);
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
     ba2:	4851                	li	a6,20
     ba4:	030552b3          	divu	t0,a0,a6
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
     ba8:	8e32                	mv	t3,a2

        /* create a fake items for the list head and tail */
            list->next=NULL;
        list->info=datablock;
        list->info->idx=0x0000;
        list->info->data16=(ee_s16)0x8080;
     baa:	7561                	lui	a0,0xffff8
            list->next=NULL;
     bac:	0005b023          	sd	zero,0(a1)
        list->info->data16=(ee_s16)0x8080;
     bb0:	08050713          	addi	a4,a0,128 # ffffffffffff8080 <tohost+0xffffffff8fa78080>
   */
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
            , list_head *memblock_end, list_data *datablock_end) {
        list_head *newitem;

        if ((*memblock+1) >= memblock_end)
     bb4:	02058793          	addi	a5,a1,32
        memblock++;
     bb8:	01058693          	addi	a3,a1,16
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
     bbc:	ffe28813          	addi	a6,t0,-2
        list_head *memblock_end=memblock+size;
     bc0:	00481613          	slli	a2,a6,0x4
     bc4:	962e                	add	a2,a2,a1
        list->info=datablock;
     bc6:	e590                	sd	a2,8(a1)
        list_data *datablock_end=datablock+size;
     bc8:	00281893          	slli	a7,a6,0x2
        list->info->idx=0x0000;
     bcc:	00061123          	sh	zero,2(a2)
        list->info->data16=(ee_s16)0x8080;
     bd0:	00e61023          	sh	a4,0(a2)
        list_data *datablock_end=datablock+size;
     bd4:	98b2                	add	a7,a7,a2
        datablock++;
     bd6:	00460313          	addi	t1,a2,4
        if ((*memblock+1) >= memblock_end)
     bda:	3cc7f763          	bgeu	a5,a2,fa8 <core_list_init+0x406>
                return NULL;
        if ((*datablock+1) >= datablock_end)
     bde:	00860713          	addi	a4,a2,8
     be2:	3d177363          	bgeu	a4,a7,fa8 <core_list_init+0x406>
                return NULL;

        newitem=*memblock;
        (*memblock)++;
        newitem->next=insert_point->next;
     be6:	0005b823          	sd	zero,16(a1)
        insert_point->next=newitem;
     bea:	e194                	sd	a3,0(a1)

        newitem->info=*datablock;
     bec:	0065bc23          	sd	t1,24(a1)
        to->idx=from->idx;
     bf0:	fff54393          	not	t2,a0
        to->data16=from->data16;
     bf4:	5efd                	li	t4,-1
     bf6:	01d61223          	sh	t4,4(a2)
        to->idx=from->idx;
     bfa:	00761323          	sh	t2,6(a2)
            for (i=0; i<size; i++) {
     bfe:	22080363          	beqz	a6,e24 <core_list_init+0x282>
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     c02:	030e1f13          	slli	t5,t3,0x30
        to->idx=from->idx;
     c06:	7fe1                	lui	t6,0xffff8
     c08:	00387293          	andi	t0,a6,3
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     c0c:	030f5f13          	srli	t5,t5,0x30
     c10:	4501                	li	a0,0
        to->idx=from->idx;
     c12:	ffffce93          	not	t4,t6
     c16:	0c028f63          	beqz	t0,cf4 <core_list_init+0x152>
     c1a:	4305                	li	t1,1
     c1c:	08628563          	beq	t0,t1,ca6 <core_list_init+0x104>
     c20:	4389                	li	t2,2
     c22:	02728d63          	beq	t0,t2,c5c <core_list_init+0xba>
        if ((*memblock+1) >= memblock_end)
     c26:	01078293          	addi	t0,a5,16
     c2a:	1ec2fd63          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     c2e:	00470f93          	addi	t6,a4,4
     c32:	031ff463          	bgeu	t6,a7,c5a <core_list_init+0xb8>
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     c36:	003f151b          	slliw	a0,t5,0x3
        newitem->next=insert_point->next;
     c3a:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     c3c:	07857693          	andi	a3,a0,120
        insert_point->next=newitem;
     c40:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     c42:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     c46:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     c48:	0066e3b3          	or	t2,a3,t1
        to->data16=from->data16;
     c4c:	00771023          	sh	t2,0(a4)
        to->idx=from->idx;
     c50:	01d71123          	sh	t4,2(a4)
        (*datablock)++;
        copy_info(newitem->info,info);

        return newitem;
     c54:	86be                	mv	a3,a5
     c56:	877e                	mv	a4,t6
     c58:	8796                	mv	a5,t0
            for (i=0; i<size; i++) {
     c5a:	4505                	li	a0,1
        if ((*memblock+1) >= memblock_end)
     c5c:	01078293          	addi	t0,a5,16
     c60:	1cc2f263          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     c64:	00470393          	addi	t2,a4,4
     c68:	0313fe63          	bgeu	t2,a7,ca4 <core_list_init+0x102>
     c6c:	03051f93          	slli	t6,a0,0x30
     c70:	030fdf93          	srli	t6,t6,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     c74:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     c78:	0033131b          	slliw	t1,t1,0x3
     c7c:	07837313          	andi	t1,t1,120
     c80:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     c84:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     c86:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     c8a:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     c8c:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     c90:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     c92:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     c96:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     c9a:	01d71123          	sh	t4,2(a4)
        return newitem;
     c9e:	86be                	mv	a3,a5
     ca0:	871e                	mv	a4,t2
     ca2:	8796                	mv	a5,t0
            for (i=0; i<size; i++) {
     ca4:	0505                	addi	a0,a0,1
        if ((*memblock+1) >= memblock_end)
     ca6:	01078293          	addi	t0,a5,16
     caa:	16c2fd63          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     cae:	00470393          	addi	t2,a4,4
     cb2:	0313fe63          	bgeu	t2,a7,cee <core_list_init+0x14c>
     cb6:	03051313          	slli	t1,a0,0x30
     cba:	03035f93          	srli	t6,t1,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     cbe:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     cc2:	0033131b          	slliw	t1,t1,0x3
     cc6:	07837313          	andi	t1,t1,120
     cca:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     cce:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     cd0:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     cd4:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     cd6:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     cda:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     cdc:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     ce0:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     ce4:	01d71123          	sh	t4,2(a4)
        return newitem;
     ce8:	86be                	mv	a3,a5
     cea:	871e                	mv	a4,t2
     cec:	8796                	mv	a5,t0
            for (i=0; i<size; i++) {
     cee:	0505                	addi	a0,a0,1
     cf0:	12a80a63          	beq	a6,a0,e24 <core_list_init+0x282>
        if ((*memblock+1) >= memblock_end)
     cf4:	01078293          	addi	t0,a5,16
     cf8:	12c2f663          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     cfc:	00470393          	addi	t2,a4,4
     d00:	0313fe63          	bgeu	t2,a7,d3c <core_list_init+0x19a>
     d04:	03051313          	slli	t1,a0,0x30
     d08:	03035f93          	srli	t6,t1,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     d0c:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d10:	0033131b          	slliw	t1,t1,0x3
     d14:	07837313          	andi	t1,t1,120
     d18:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     d1c:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d1e:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     d22:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     d24:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     d28:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     d2a:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     d2e:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     d32:	01d71123          	sh	t4,2(a4)
        return newitem;
     d36:	86be                	mv	a3,a5
     d38:	871e                	mv	a4,t2
     d3a:	8796                	mv	a5,t0
        if ((*memblock+1) >= memblock_end)
     d3c:	01078293          	addi	t0,a5,16
            for (i=0; i<size; i++) {
     d40:	0505                	addi	a0,a0,1
        if ((*memblock+1) >= memblock_end)
     d42:	0ec2f163          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     d46:	00470393          	addi	t2,a4,4
     d4a:	0313fe63          	bgeu	t2,a7,d86 <core_list_init+0x1e4>
     d4e:	03051313          	slli	t1,a0,0x30
     d52:	03035f93          	srli	t6,t1,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     d56:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d5a:	0033131b          	slliw	t1,t1,0x3
     d5e:	07837313          	andi	t1,t1,120
     d62:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     d66:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     d68:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     d6c:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     d6e:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     d72:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     d74:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     d78:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     d7c:	01d71123          	sh	t4,2(a4)
        return newitem;
     d80:	86be                	mv	a3,a5
     d82:	871e                	mv	a4,t2
     d84:	8796                	mv	a5,t0
        if ((*memblock+1) >= memblock_end)
     d86:	01078293          	addi	t0,a5,16
            for (i=0; i<size; i++) {
     d8a:	00150313          	addi	t1,a0,1
        if ((*memblock+1) >= memblock_end)
     d8e:	08c2fb63          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     d92:	00470393          	addi	t2,a4,4
     d96:	0313fe63          	bgeu	t2,a7,dd2 <core_list_init+0x230>
     d9a:	03031f93          	slli	t6,t1,0x30
     d9e:	030fdf93          	srli	t6,t6,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     da2:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     da6:	0033131b          	slliw	t1,t1,0x3
     daa:	07837313          	andi	t1,t1,120
     dae:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     db2:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     db4:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     db8:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     dba:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     dbe:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     dc0:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     dc4:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     dc8:	01d71123          	sh	t4,2(a4)
        return newitem;
     dcc:	86be                	mv	a3,a5
     dce:	871e                	mv	a4,t2
     dd0:	8796                	mv	a5,t0
        if ((*memblock+1) >= memblock_end)
     dd2:	01078293          	addi	t0,a5,16
            for (i=0; i<size; i++) {
     dd6:	00250313          	addi	t1,a0,2
        if ((*memblock+1) >= memblock_end)
     dda:	04c2f563          	bgeu	t0,a2,e24 <core_list_init+0x282>
        if ((*datablock+1) >= datablock_end)
     dde:	00470393          	addi	t2,a4,4
     de2:	0313fe63          	bgeu	t2,a7,e1e <core_list_init+0x27c>
     de6:	03031f93          	slli	t6,t1,0x30
     dea:	030fdf93          	srli	t6,t6,0x30
                    ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
     dee:	01efc333          	xor	t1,t6,t5
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     df2:	0033131b          	slliw	t1,t1,0x3
     df6:	07837313          	andi	t1,t1,120
     dfa:	007fff93          	andi	t6,t6,7
        newitem->next=insert_point->next;
     dfe:	e394                	sd	a3,0(a5)
                    ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
     e00:	01f366b3          	or	a3,t1,t6
        insert_point->next=newitem;
     e04:	e19c                	sd	a5,0(a1)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     e06:	0086931b          	slliw	t1,a3,0x8
        newitem->info=*datablock;
     e0a:	e798                	sd	a4,8(a5)
                    info.data16=(dat<<8) | dat;       /* fill the data with actual data and upper bits with rebuild value */
     e0c:	0066efb3          	or	t6,a3,t1
        to->data16=from->data16;
     e10:	01f71023          	sh	t6,0(a4)
        to->idx=from->idx;
     e14:	01d71123          	sh	t4,2(a4)
        return newitem;
     e18:	86be                	mv	a3,a5
     e1a:	871e                	mv	a4,t2
     e1c:	8796                	mv	a5,t0
            for (i=0; i<size; i++) {
     e1e:	050d                	addi	a0,a0,3
     e20:	eca81ae3          	bne	a6,a0,cf4 <core_list_init+0x152>
        while (finder->next!=NULL) {
     e24:	6290                	ld	a2,0(a3)
     e26:	ce39                	beqz	a2,e84 <core_list_init+0x2e2>
                if (i<size/5) /* first 20% of the list in order */
     e28:	4895                	li	a7,5
     e2a:	03185f33          	divu	t5,a6,a7
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e2e:	6811                	lui	a6,0x4
                if (i<size/5) /* first 20% of the list in order */
     e30:	20000793          	li	a5,512
     e34:	4705                	li	a4,1
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e36:	fff80e93          	addi	t4,a6,-1 # 3fff <matrix_mul_matrix+0x73>
     e3a:	a831                	j	e56 <core_list_init+0x2b4>
        while (finder->next!=NULL) {
     e3c:	6208                	ld	a0,0(a2)
     e3e:	1007881b          	addiw	a6,a5,256
                        finder->info->idx=i++;
     e42:	00e29123          	sh	a4,2(t0)
        while (finder->next!=NULL) {
     e46:	03081293          	slli	t0,a6,0x30
     e4a:	0705                	addi	a4,a4,1
     e4c:	0302d793          	srli	a5,t0,0x30
     e50:	c915                	beqz	a0,e84 <core_list_init+0x2e2>
                if (i<size/5) /* first 20% of the list in order */
     e52:	86b2                	mv	a3,a2
     e54:	862a                	mv	a2,a0
                        finder->info->idx=i++;
     e56:	0086b283          	ld	t0,8(a3)
                if (i<size/5) /* first 20% of the list in order */
     e5a:	ffe761e3          	bltu	a4,t5,e3c <core_list_init+0x29a>
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e5e:	7007f393          	andi	t2,a5,1792
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
     e62:	01c74333          	xor	t1,a4,t3
        while (finder->next!=NULL) {
     e66:	6208                	ld	a0,0(a2)
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e68:	0063efb3          	or	t6,t2,t1
        while (finder->next!=NULL) {
     e6c:	1007879b          	addiw	a5,a5,256
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e70:	01dff6b3          	and	a3,t6,t4
        while (finder->next!=NULL) {
     e74:	03079893          	slli	a7,a5,0x30
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
     e78:	00d29123          	sh	a3,2(t0)
        while (finder->next!=NULL) {
     e7c:	0705                	addi	a4,a4,1
     e7e:	0308d793          	srli	a5,a7,0x30
     e82:	f961                	bnez	a0,e52 <core_list_init+0x2b0>
   */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
      list_head *p, *q, *e, *tail;
      ee_s32 insize, nmerges, psize, qsize, i;

      insize = 1;
     e84:	4f85                	li	t6,1

      while (1) {
            p = list;
            list = NULL;
            tail = NULL;
     e86:	4801                	li	a6,0
            list = NULL;
     e88:	4501                	li	a0,0

            nmerges = 0; /* count number of merges we do in this pass */
     e8a:	4281                	li	t0,0
                    }

              tail->next = NULL;

            /* If we have done only one merge, we're finished. */
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
     e8c:	4385                	li	t2,1
                      nmerges++; /* there exists a merge to be done */
     e8e:	007ffe13          	andi	t3,t6,7
     e92:	2285                	addiw	t0,t0,1
     e94:	87ae                	mv	a5,a1
                      psize = 0;
     e96:	4601                	li	a2,0
     e98:	040e0b63          	beqz	t3,eee <core_list_init+0x34c>
     e9c:	4f05                	li	t5,1
     e9e:	05ee0363          	beq	t3,t5,ee4 <core_list_init+0x342>
     ea2:	4e89                	li	t4,2
     ea4:	03de0d63          	beq	t3,t4,ede <core_list_init+0x33c>
     ea8:	430d                	li	t1,3
     eaa:	026e0763          	beq	t3,t1,ed8 <core_list_init+0x336>
     eae:	4691                	li	a3,4
     eb0:	02de0163          	beq	t3,a3,ed2 <core_list_init+0x330>
     eb4:	4715                	li	a4,5
     eb6:	00ee0b63          	beq	t3,a4,ecc <core_list_init+0x32a>
     eba:	4899                	li	a7,6
     ebc:	011e0563          	beq	t3,a7,ec6 <core_list_init+0x324>
                                  q = q->next;
     ec0:	619c                	ld	a5,0(a1)
                            psize++;
     ec2:	4605                	li	a2,1
                            if (!q) break;
     ec4:	cb9d                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ec6:	639c                	ld	a5,0(a5)
                            psize++;
     ec8:	2605                	addiw	a2,a2,1
                            if (!q) break;
     eca:	cb85                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ecc:	639c                	ld	a5,0(a5)
                            psize++;
     ece:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ed0:	c78d                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ed2:	639c                	ld	a5,0(a5)
                            psize++;
     ed4:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ed6:	c395                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ed8:	639c                	ld	a5,0(a5)
                            psize++;
     eda:	2605                	addiw	a2,a2,1
                            if (!q) break;
     edc:	cf99                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ede:	639c                	ld	a5,0(a5)
                            psize++;
     ee0:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ee2:	cf81                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ee4:	639c                	ld	a5,0(a5)
                            psize++;
     ee6:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ee8:	cb89                	beqz	a5,efa <core_list_init+0x358>
                      for (i = 0; i < insize; i++) {
     eea:	01f60863          	beq	a2,t6,efa <core_list_init+0x358>
                                  q = q->next;
     eee:	639c                	ld	a5,0(a5)
                            psize++;
     ef0:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ef2:	c781                	beqz	a5,efa <core_list_init+0x358>
                                  q = q->next;
     ef4:	639c                	ld	a5,0(a5)
                            psize++;
     ef6:	2605                	addiw	a2,a2,1
                            if (!q) break;
     ef8:	f7f9                	bnez	a5,ec6 <core_list_init+0x324>
                                                      list = e;
     efa:	86fe                	mv	a3,t6
                          while (psize > 0 || (qsize > 0 && q)) {
     efc:	c625                	beqz	a2,f64 <core_list_init+0x3c2>
                                                } else if (qsize == 0 || !q) {
     efe:	cead                	beqz	a3,f78 <core_list_init+0x3d6>
     f00:	cfa5                	beqz	a5,f78 <core_list_init+0x3d6>
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
     f02:	0085be03          	ld	t3,8(a1)
     f06:	0087b303          	ld	t1,8(a5)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     f0a:	000e1703          	lh	a4,0(t3)
        return a->idx - b->idx;
     f0e:	00231f03          	lh	t5,2(t1)
     f12:	002e1883          	lh	a7,2(t3)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     f16:	01071e9b          	slliw	t4,a4,0x10
     f1a:	010ede9b          	srliw	t4,t4,0x10
     f1e:	008ede9b          	srliw	t4,t4,0x8
     f22:	f0077713          	andi	a4,a4,-256
     f26:	01d76733          	or	a4,a4,t4
     f2a:	00ee1023          	sh	a4,0(t3)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     f2e:	00031e83          	lh	t4,0(t1)
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
     f32:	41e888bb          	subw	a7,a7,t5
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     f36:	010e9e1b          	slliw	t3,t4,0x10
     f3a:	010e5f1b          	srliw	t5,t3,0x10
     f3e:	f00ef713          	andi	a4,t4,-256
     f42:	008f5e9b          	srliw	t4,t5,0x8
     f46:	01d76e33          	or	t3,a4,t4
     f4a:	01c31023          	sh	t3,0(t1)
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
     f4e:	03105563          	blez	a7,f78 <core_list_init+0x3d6>
                                                                  e = q; q = q->next; qsize--;
     f52:	833e                	mv	t1,a5
     f54:	639c                	ld	a5,0(a5)
     f56:	36fd                	addiw	a3,a3,-1
                                            if (tail) {
     f58:	00080d63          	beqz	a6,f72 <core_list_init+0x3d0>
                                                  tail->next = e;
     f5c:	00683023          	sd	t1,0(a6)
                                                      list = e;
     f60:	881a                	mv	a6,t1
                          while (psize > 0 || (qsize > 0 && q)) {
     f62:	fe51                	bnez	a2,efe <core_list_init+0x35c>
     f64:	ce91                	beqz	a3,f80 <core_list_init+0x3de>
     f66:	c385                	beqz	a5,f86 <core_list_init+0x3e4>
                                                      e = q; q = q->next; qsize--;
     f68:	833e                	mv	t1,a5
     f6a:	36fd                	addiw	a3,a3,-1
     f6c:	639c                	ld	a5,0(a5)
                                            if (tail) {
     f6e:	fe0817e3          	bnez	a6,f5c <core_list_init+0x3ba>
                                                      list = e;
     f72:	851a                	mv	a0,t1
     f74:	881a                	mv	a6,t1
     f76:	b7f5                	j	f62 <core_list_init+0x3c0>
                                                              e = p; p = p->next; psize--;
     f78:	832e                	mv	t1,a1
     f7a:	367d                	addiw	a2,a2,-1
     f7c:	618c                	ld	a1,0(a1)
     f7e:	bfe9                	j	f58 <core_list_init+0x3b6>
                while (p) {
     f80:	c399                	beqz	a5,f86 <core_list_init+0x3e4>
            list = NULL;
     f82:	85be                	mv	a1,a5
     f84:	b729                	j	e8e <core_list_init+0x2ec>
              tail->next = NULL;
     f86:	00083023          	sd	zero,0(a6)
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
     f8a:	00728b63          	beq	t0,t2,fa0 <core_list_init+0x3fe>
                  return list;

            /* Otherwise repeat, merging lists twice the size */
                insize *= 2;
     f8e:	001f9f9b          	slliw	t6,t6,0x1
                while (p) {
     f92:	c901                	beqz	a0,fa2 <core_list_init+0x400>
     f94:	87aa                	mv	a5,a0
            nmerges = 0; /* count number of merges we do in this pass */
     f96:	4281                	li	t0,0
            tail = NULL;
     f98:	4801                	li	a6,0
            list = NULL;
     f9a:	4501                	li	a0,0
     f9c:	85be                	mv	a1,a5
     f9e:	bdc5                	j	e8e <core_list_init+0x2ec>
}
     fa0:	8082                	ret
              tail->next = NULL;
     fa2:	00003023          	sd	zero,0(zero) # 0 <_start>
     fa6:	9002                	ebreak
        memblock++;
     fa8:	87b6                	mv	a5,a3
        datablock++;
     faa:	871a                	mv	a4,t1
     fac:	4681                	li	a3,0
     fae:	b981                	j	bfe <core_list_init+0x5c>

0000000000000fb0 <core_list_insert_new>:
        if ((*memblock+1) >= memblock_end)
     fb0:	00063803          	ld	a6,0(a2)
     fb4:	01080893          	addi	a7,a6,16
     fb8:	04e8f163          	bgeu	a7,a4,ffa <core_list_insert_new+0x4a>
        if ((*datablock+1) >= datablock_end)
     fbc:	6298                	ld	a4,0(a3)
     fbe:	00470313          	addi	t1,a4,4
     fc2:	02f37c63          	bgeu	t1,a5,ffa <core_list_insert_new+0x4a>
        (*memblock)++;
     fc6:	01163023          	sd	a7,0(a2)
        newitem->next=insert_point->next;
     fca:	611c                	ld	a5,0(a0)
        to->data16=from->data16;
     fcc:	00059283          	lh	t0,0(a1)
        to->idx=from->idx;
     fd0:	00259603          	lh	a2,2(a1)
        newitem->next=insert_point->next;
     fd4:	00f83023          	sd	a5,0(a6)
        insert_point->next=newitem;
     fd8:	01053023          	sd	a6,0(a0)
        newitem->info=*datablock;
     fdc:	00e83423          	sd	a4,8(a6)
        (*datablock)++;
     fe0:	0006b383          	ld	t2,0(a3)
     fe4:	00438513          	addi	a0,t2,4
     fe8:	e288                	sd	a0,0(a3)
        copy_info(newitem->info,info);
     fea:	00883583          	ld	a1,8(a6)
}
     fee:	8542                	mv	a0,a6
        to->data16=from->data16;
     ff0:	00559023          	sh	t0,0(a1)
        to->idx=from->idx;
     ff4:	00c59123          	sh	a2,2(a1)
}
     ff8:	8082                	ret
                return NULL;
     ffa:	4801                	li	a6,0
}
     ffc:	8542                	mv	a0,a6
     ffe:	8082                	ret

0000000000001000 <core_list_remove>:
list_head *core_list_remove(list_head *item) {
    1000:	87aa                	mv	a5,a0
        list_head *ret=item->next;
    1002:	6108                	ld	a0,0(a0)
            tmp=item->info;
    1004:	6794                	ld	a3,8(a5)
        item->info=ret->info;
    1006:	6510                	ld	a2,8(a0)
            item->next=item->next->next;
    1008:	6118                	ld	a4,0(a0)
        item->info=ret->info;
    100a:	e790                	sd	a2,8(a5)
        ret->info=tmp;
    100c:	e514                	sd	a3,8(a0)
            item->next=item->next->next;
    100e:	e398                	sd	a4,0(a5)
        ret->next=NULL;
    1010:	00053023          	sd	zero,0(a0)
}
    1014:	8082                	ret

0000000000001016 <core_list_undo_remove>:
        item_removed->info=item_modified->info;
    1016:	6590                	ld	a2,8(a1)
            tmp=item_removed->info;
    1018:	6514                	ld	a3,8(a0)
            item_removed->next=item_modified->next;
    101a:	6198                	ld	a4,0(a1)
        item_removed->info=item_modified->info;
    101c:	e510                	sd	a2,8(a0)
        item_modified->info=tmp;
    101e:	e594                	sd	a3,8(a1)
            item_removed->next=item_modified->next;
    1020:	e118                	sd	a4,0(a0)
        item_modified->next=item_removed;
    1022:	e188                	sd	a0,0(a1)
}
    1024:	8082                	ret

0000000000001026 <core_list_find>:
        if (info->idx>=0) {
    1026:	00259603          	lh	a2,2(a1)
    102a:	00064d63          	bltz	a2,1044 <core_list_find+0x1e>
                while (list && (list->info->idx != info->idx))
    102e:	e501                	bnez	a0,1036 <core_list_find+0x10>
    1030:	a805                	j	1060 <core_list_find+0x3a>
                        list=list->next;
    1032:	6108                	ld	a0,0(a0)
                while (list && (list->info->idx != info->idx))
    1034:	c505                	beqz	a0,105c <core_list_find+0x36>
    1036:	00853303          	ld	t1,8(a0)
    103a:	00231383          	lh	t2,2(t1)
    103e:	fec39ae3          	bne	t2,a2,1032 <core_list_find+0xc>
    1042:	8082                	ret
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    1044:	cd01                	beqz	a0,105c <core_list_find+0x36>
    1046:	00059703          	lh	a4,0(a1)
    104a:	a019                	j	1050 <core_list_find+0x2a>
                            list=list->next;
    104c:	6108                	ld	a0,0(a0)
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    104e:	c901                	beqz	a0,105e <core_list_find+0x38>
    1050:	651c                	ld	a5,8(a0)
    1052:	0007c283          	lbu	t0,0(a5)
    1056:	fee29be3          	bne	t0,a4,104c <core_list_find+0x26>
    105a:	8082                	ret
    105c:	4501                	li	a0,0
}
    105e:	8082                	ret
    1060:	8082                	ret

0000000000001062 <core_list_reverse>:
        while (list) {
    1062:	c92d                	beqz	a0,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    1064:	611c                	ld	a5,0(a0)
        list_head *next=NULL, *tmp;
    1066:	4881                	li	a7,0
                list->next=next;
    1068:	01153023          	sd	a7,0(a0)
        while (list) {
    106c:	86aa                	mv	a3,a0
    106e:	c3bd                	beqz	a5,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    1070:	6398                	ld	a4,0(a5)
                list->next=next;
    1072:	e394                	sd	a3,0(a5)
    1074:	853e                	mv	a0,a5
        while (list) {
    1076:	c325                	beqz	a4,10d6 <core_list_reverse+0x74>
                tmp=list->next;
    1078:	00073283          	ld	t0,0(a4)
                list->next=next;
    107c:	e31c                	sd	a5,0(a4)
    107e:	853a                	mv	a0,a4
        while (list) {
    1080:	04028a63          	beqz	t0,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    1084:	0002b303          	ld	t1,0(t0)
                list->next=next;
    1088:	00e2b023          	sd	a4,0(t0)
    108c:	8516                	mv	a0,t0
        while (list) {
    108e:	04030363          	beqz	t1,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    1092:	00033383          	ld	t2,0(t1)
                list->next=next;
    1096:	00533023          	sd	t0,0(t1)
    109a:	851a                	mv	a0,t1
        while (list) {
    109c:	02038c63          	beqz	t2,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    10a0:	0003b583          	ld	a1,0(t2)
                list->next=next;
    10a4:	0063b023          	sd	t1,0(t2)
    10a8:	851e                	mv	a0,t2
        while (list) {
    10aa:	c58d                	beqz	a1,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    10ac:	0005b803          	ld	a6,0(a1)
                list->next=next;
    10b0:	0075b023          	sd	t2,0(a1)
    10b4:	852e                	mv	a0,a1
        while (list) {
    10b6:	00080f63          	beqz	a6,10d4 <core_list_reverse+0x72>
                tmp=list->next;
    10ba:	00083603          	ld	a2,0(a6)
                list->next=next;
    10be:	00b83023          	sd	a1,0(a6)
    10c2:	8542                	mv	a0,a6
        while (list) {
    10c4:	88c2                	mv	a7,a6
    10c6:	c619                	beqz	a2,10d4 <core_list_reverse+0x72>
    10c8:	8532                	mv	a0,a2
                tmp=list->next;
    10ca:	611c                	ld	a5,0(a0)
                list->next=next;
    10cc:	01153023          	sd	a7,0(a0)
        while (list) {
    10d0:	86aa                	mv	a3,a0
    10d2:	ffd9                	bnez	a5,1070 <core_list_reverse+0xe>
}
    10d4:	8082                	ret
    10d6:	8082                	ret

00000000000010d8 <core_list_mergesort>:
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
    10d8:	711d                	addi	sp,sp,-96
    10da:	e8a2                	sd	s0,80(sp)
    10dc:	f05a                	sd	s6,32(sp)
    10de:	ec5e                	sd	s7,24(sp)
    10e0:	e466                	sd	s9,8(sp)
    10e2:	e06a                	sd	s10,0(sp)
    10e4:	ec86                	sd	ra,88(sp)
    10e6:	e4a6                	sd	s1,72(sp)
    10e8:	e0ca                	sd	s2,64(sp)
    10ea:	fc4e                	sd	s3,56(sp)
    10ec:	f852                	sd	s4,48(sp)
    10ee:	f456                	sd	s5,40(sp)
    10f0:	e862                	sd	s8,16(sp)
    10f2:	842a                	mv	s0,a0
    10f4:	8b2e                	mv	s6,a1
    10f6:	8d32                	mv	s10,a2
      insize = 1;
    10f8:	4b85                	li	s7,1
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
    10fa:	4c85                	li	s9,1
                while (p) {
    10fc:	c861                	beqz	s0,11cc <core_list_mergesort+0xf4>
            nmerges = 0; /* count number of merges we do in this pass */
    10fe:	4c01                	li	s8,0
            tail = NULL;
    1100:	4481                	li	s1,0
            list = NULL;
    1102:	4a81                	li	s5,0
                      nmerges++; /* there exists a merge to be done */
    1104:	007bf713          	andi	a4,s7,7
    1108:	2c05                	addiw	s8,s8,1
    110a:	87a2                	mv	a5,s0
                      psize = 0;
    110c:	4901                	li	s2,0
    110e:	cb31                	beqz	a4,1162 <core_list_mergesort+0x8a>
    1110:	4685                	li	a3,1
    1112:	04d70363          	beq	a4,a3,1158 <core_list_mergesort+0x80>
    1116:	4089                	li	ra,2
    1118:	02170d63          	beq	a4,ra,1152 <core_list_mergesort+0x7a>
    111c:	428d                	li	t0,3
    111e:	02570763          	beq	a4,t0,114c <core_list_mergesort+0x74>
    1122:	4311                	li	t1,4
    1124:	02670163          	beq	a4,t1,1146 <core_list_mergesort+0x6e>
    1128:	4395                	li	t2,5
    112a:	00770b63          	beq	a4,t2,1140 <core_list_mergesort+0x68>
    112e:	4519                	li	a0,6
    1130:	00a70563          	beq	a4,a0,113a <core_list_mergesort+0x62>
                                  q = q->next;
    1134:	601c                	ld	a5,0(s0)
                            psize++;
    1136:	4905                	li	s2,1
                            if (!q) break;
    1138:	cb9d                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    113a:	639c                	ld	a5,0(a5)
                            psize++;
    113c:	2905                	addiw	s2,s2,1
                            if (!q) break;
    113e:	cb85                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1140:	639c                	ld	a5,0(a5)
                            psize++;
    1142:	2905                	addiw	s2,s2,1
                            if (!q) break;
    1144:	c78d                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1146:	639c                	ld	a5,0(a5)
                            psize++;
    1148:	2905                	addiw	s2,s2,1
                            if (!q) break;
    114a:	c395                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    114c:	639c                	ld	a5,0(a5)
                            psize++;
    114e:	2905                	addiw	s2,s2,1
                            if (!q) break;
    1150:	cf99                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1152:	639c                	ld	a5,0(a5)
                            psize++;
    1154:	2905                	addiw	s2,s2,1
                            if (!q) break;
    1156:	cf81                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1158:	639c                	ld	a5,0(a5)
                            psize++;
    115a:	2905                	addiw	s2,s2,1
                            if (!q) break;
    115c:	cb89                	beqz	a5,116e <core_list_mergesort+0x96>
                      for (i = 0; i < insize; i++) {
    115e:	012b8863          	beq	s7,s2,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1162:	639c                	ld	a5,0(a5)
                            psize++;
    1164:	2905                	addiw	s2,s2,1
                            if (!q) break;
    1166:	c781                	beqz	a5,116e <core_list_mergesort+0x96>
                                  q = q->next;
    1168:	639c                	ld	a5,0(a5)
                            psize++;
    116a:	2905                	addiw	s2,s2,1
                            if (!q) break;
    116c:	f7f9                	bnez	a5,113a <core_list_mergesort+0x62>
                                                      list = e;
    116e:	8a22                	mv	s4,s0
    1170:	89de                	mv	s3,s7
    1172:	843e                	mv	s0,a5
                          while (psize > 0 || (qsize > 0 && q)) {
    1174:	02090463          	beqz	s2,119c <core_list_mergesort+0xc4>
                                                } else if (qsize == 0 || !q) {
    1178:	02098c63          	beqz	s3,11b0 <core_list_mergesort+0xd8>
    117c:	c815                	beqz	s0,11b0 <core_list_mergesort+0xd8>
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
    117e:	640c                	ld	a1,8(s0)
    1180:	008a3503          	ld	a0,8(s4)
    1184:	866a                	mv	a2,s10
    1186:	9b02                	jalr	s6
    1188:	02a05463          	blez	a0,11b0 <core_list_mergesort+0xd8>
                                                                  e = q; q = q->next; qsize--;
    118c:	85a2                	mv	a1,s0
    118e:	6000                	ld	s0,0(s0)
    1190:	39fd                	addiw	s3,s3,-1
                                            if (tail) {
    1192:	cc81                	beqz	s1,11aa <core_list_mergesort+0xd2>
                                                  tail->next = e;
    1194:	e08c                	sd	a1,0(s1)
                                                      list = e;
    1196:	84ae                	mv	s1,a1
                          while (psize > 0 || (qsize > 0 && q)) {
    1198:	fe0910e3          	bnez	s2,1178 <core_list_mergesort+0xa0>
    119c:	00098f63          	beqz	s3,11ba <core_list_mergesort+0xe2>
    11a0:	cc11                	beqz	s0,11bc <core_list_mergesort+0xe4>
                                                      e = q; q = q->next; qsize--;
    11a2:	85a2                	mv	a1,s0
    11a4:	39fd                	addiw	s3,s3,-1
    11a6:	6000                	ld	s0,0(s0)
                                            if (tail) {
    11a8:	f4f5                	bnez	s1,1194 <core_list_mergesort+0xbc>
                                                      list = e;
    11aa:	8aae                	mv	s5,a1
    11ac:	84ae                	mv	s1,a1
    11ae:	b7ed                	j	1198 <core_list_mergesort+0xc0>
                                                              e = p; p = p->next; psize--;
    11b0:	85d2                	mv	a1,s4
    11b2:	397d                	addiw	s2,s2,-1
    11b4:	000a3a03          	ld	s4,0(s4)
    11b8:	bfe9                	j	1192 <core_list_mergesort+0xba>
                while (p) {
    11ba:	f429                	bnez	s0,1104 <core_list_mergesort+0x2c>
              tail->next = NULL;
    11bc:	0004b023          	sd	zero,0(s1)
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
    11c0:	019c0963          	beq	s8,s9,11d2 <core_list_mergesort+0xfa>
                insize *= 2;
    11c4:	001b9b9b          	slliw	s7,s7,0x1
            p = list;
    11c8:	8456                	mv	s0,s5
    11ca:	bf0d                	j	10fc <core_list_mergesort+0x24>
              tail->next = NULL;
    11cc:	00003023          	sd	zero,0(zero) # 0 <_start>
    11d0:	9002                	ebreak
          }
#if COMPILER_REQUIRES_SORT_RETURN
        return list;
#endif
}
    11d2:	60e6                	ld	ra,88(sp)
    11d4:	6446                	ld	s0,80(sp)
    11d6:	64a6                	ld	s1,72(sp)
    11d8:	6906                	ld	s2,64(sp)
    11da:	79e2                	ld	s3,56(sp)
    11dc:	7a42                	ld	s4,48(sp)
    11de:	7b02                	ld	s6,32(sp)
    11e0:	6be2                	ld	s7,24(sp)
    11e2:	6c42                	ld	s8,16(sp)
    11e4:	6ca2                	ld	s9,8(sp)
    11e6:	6d02                	ld	s10,0(sp)
    11e8:	8556                	mv	a0,s5
    11ea:	7aa2                	ld	s5,40(sp)
    11ec:	6125                	addi	sp,sp,96
    11ee:	8082                	ret

00000000000011f0 <matrix_test>:
           4 - Multiply a matrix by a matrix.
           5 - Add a constant value to all elements of a matrix.

           After the last step, matrix A is back to original contents.
       */
    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    11f0:	7131                	addi	sp,sp,-192
            ee_u16 crc=0;
            MATDAT clipval=matrix_big(val);
    11f2:	77fd                	lui	a5,0xfffff
    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    11f4:	fd06                	sd	ra,184(sp)
            MATDAT clipval=matrix_big(val);
    11f6:	00f760b3          	or	ra,a4,a5
    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    11fa:	f526                	sd	s1,168(sp)
    11fc:	f8e2                	sd	s8,112(sp)
    11fe:	f922                	sd	s0,176(sp)
            crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
            printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

            matrix_add_const(N,A,-val); /* return matrix to initial value */
    1200:	03071c13          	slli	s8,a4,0x30
    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1204:	f14a                	sd	s2,160(sp)
    1206:	ed4e                	sd	s3,152(sp)
    1208:	e952                	sd	s4,144(sp)
    120a:	e556                	sd	s5,136(sp)
    120c:	e15a                	sd	s6,128(sp)
    120e:	fcde                	sd	s7,120(sp)
    1210:	f4e6                	sd	s9,104(sp)
    1212:	f0ea                	sd	s10,96(sp)
    1214:	ecee                	sd	s11,88(sp)
    1216:	e4ba                	sd	a4,72(sp)
    1218:	e42e                	sd	a1,8(sp)
    121a:	fc32                	sd	a2,56(sp)
    121c:	e836                	sd	a3,16(sp)
            MATDAT clipval=matrix_big(val);
    121e:	e086                	sd	ra,64(sp)
    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1220:	84aa                	mv	s1,a0
            matrix_add_const(N,A,-val); /* return matrix to initial value */
    1222:	030c5c13          	srli	s8,s8,0x30
    /* Function: matrix_add_const
           Add a constant value to all elements of a matrix.
       */
    void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
            ee_u32 i,j;
            for (i=0; i<N; i++) {
    1226:	e119                	bnez	a0,122c <matrix_test+0x3c>
    1228:	7990106f          	j	31c0 <matrix_test+0x1fd0>
    122c:	010c1313          	slli	t1,s8,0x10
    1230:	63a5                	lui	t2,0x9
    1232:	006c6533          	or	a0,s8,t1
    1236:	8eb2                	mv	t4,a2
    1238:	020c1413          	slli	s0,s8,0x20
                    for (j=0; j<N; j++) {
                            A[i*N+j] += val;
    123c:	8503b603          	ld	a2,-1968(t2) # 8850 <_end>
    1240:	030c1593          	slli	a1,s8,0x30
    1244:	00856833          	or	a6,a0,s0
    1248:	68a5                	lui	a7,0x9
    124a:	00b866b3          	or	a3,a6,a1
    124e:	00149913          	slli	s2,s1,0x1
            for (i=0; i<N; i++) {
    1252:	4a01                	li	s4,0
    1254:	fff48993          	addi	s3,s1,-1
                            A[i*N+j] += val;
    1258:	8588b503          	ld	a0,-1960(a7) # 8858 <_end+0x8>
    125c:	ec4a                	sd	s2,24(sp)
            for (i=0; i<N; i++) {
    125e:	8376                	mv	t1,t4
    1260:	4881                	li	a7,0
    1262:	f04e                	sd	s3,32(sp)
                            A[i*N+j] += val;
    1264:	00c6f5b3          	and	a1,a3,a2
    1268:	e052                	sd	s4,0(sp)
                    for (j=0; j<N; j++) {
    126a:	00135a93          	srli	s5,t1,0x1
    126e:	41500b33          	neg	s6,s5
    1272:	003b7b93          	andi	s7,s6,3
    1276:	003b8d13          	addi	s10,s7,3
    127a:	4c95                	li	s9,5
    127c:	019d7363          	bgeu	s10,s9,1282 <matrix_test+0x92>
    1280:	4d15                	li	s10,5
    1282:	7d82                	ld	s11,32(sp)
    1284:	01adf463          	bgeu	s11,s10,128c <matrix_test+0x9c>
    1288:	7330106f          	j	31ba <matrix_test+0x1fca>
    128c:	4701                	li	a4,0
    128e:	020b8c63          	beqz	s7,12c6 <matrix_test+0xd6>
                            A[i*N+j] += val;
    1292:	00035e03          	lhu	t3,0(t1)
                    for (j=0; j<N; j++) {
    1296:	4705                	li	a4,1
                            A[i*N+j] += val;
    1298:	018e0f3b          	addw	t5,t3,s8
    129c:	01e31023          	sh	t5,0(t1)
                    for (j=0; j<N; j++) {
    12a0:	02eb8363          	beq	s7,a4,12c6 <matrix_test+0xd6>
                            A[i*N+j] += val;
    12a4:	00235f83          	lhu	t6,2(t1)
    12a8:	478d                	li	a5,3
                    for (j=0; j<N; j++) {
    12aa:	4709                	li	a4,2
                            A[i*N+j] += val;
    12ac:	018f80bb          	addw	ra,t6,s8
    12b0:	00131123          	sh	ra,2(t1)
                    for (j=0; j<N; j++) {
    12b4:	00fb9963          	bne	s7,a5,12c6 <matrix_test+0xd6>
                            A[i*N+j] += val;
    12b8:	00435283          	lhu	t0,4(t1)
                    for (j=0; j<N; j++) {
    12bc:	470d                	li	a4,3
                            A[i*N+j] += val;
    12be:	018283bb          	addw	t2,t0,s8
    12c2:	00731223          	sh	t2,4(t1)
                    for (j=0; j<N; j++) {
    12c6:	41748433          	sub	s0,s1,s7
    12ca:	00245813          	srli	a6,s0,0x2
    12ce:	00381913          	slli	s2,a6,0x3
    12d2:	ff890a13          	addi	s4,s2,-8
    12d6:	011b89b3          	add	s3,s7,a7
    12da:	003a5a93          	srli	s5,s4,0x3
    12de:	00199b13          	slli	s6,s3,0x1
    12e2:	001a8b93          	addi	s7,s5,1
    12e6:	016e87b3          	add	a5,t4,s6
    12ea:	007bfc93          	andi	s9,s7,7
    12ee:	00f900b3          	add	ra,s2,a5
    12f2:	0e0c8f63          	beqz	s9,13f0 <matrix_test+0x200>
    12f6:	4d05                	li	s10,1
    12f8:	0dac8b63          	beq	s9,s10,13ce <matrix_test+0x1de>
    12fc:	4d89                	li	s11,2
    12fe:	0bbc8963          	beq	s9,s11,13b0 <matrix_test+0x1c0>
    1302:	4e0d                	li	t3,3
    1304:	09cc8763          	beq	s9,t3,1392 <matrix_test+0x1a2>
    1308:	4f11                	li	t5,4
    130a:	07ec8563          	beq	s9,t5,1374 <matrix_test+0x184>
    130e:	4f95                	li	t6,5
    1310:	05fc8363          	beq	s9,t6,1356 <matrix_test+0x166>
    1314:	4299                	li	t0,6
    1316:	025c8163          	beq	s9,t0,1338 <matrix_test+0x148>
                            A[i*N+j] += val;
    131a:	0007b383          	ld	t2,0(a5) # fffffffffffff000 <tohost+0xffffffff8fa7f000>
    131e:	07a1                	addi	a5,a5,8
    1320:	00c3f933          	and	s2,t2,a2
    1324:	00d3c833          	xor	a6,t2,a3
    1328:	00b90a33          	add	s4,s2,a1
    132c:	00a879b3          	and	s3,a6,a0
    1330:	013a4ab3          	xor	s5,s4,s3
    1334:	ff57bc23          	sd	s5,-8(a5)
    1338:	0007bb03          	ld	s6,0(a5)
    133c:	07a1                	addi	a5,a5,8
    133e:	00cb7bb3          	and	s7,s6,a2
    1342:	00db4cb3          	xor	s9,s6,a3
    1346:	00bb8d33          	add	s10,s7,a1
    134a:	00acfdb3          	and	s11,s9,a0
    134e:	01bd4e33          	xor	t3,s10,s11
    1352:	ffc7bc23          	sd	t3,-8(a5)
    1356:	0007bf03          	ld	t5,0(a5)
    135a:	07a1                	addi	a5,a5,8
    135c:	00cf7fb3          	and	t6,t5,a2
    1360:	00df42b3          	xor	t0,t5,a3
    1364:	00bf83b3          	add	t2,t6,a1
    1368:	00a2f933          	and	s2,t0,a0
    136c:	0123c833          	xor	a6,t2,s2
    1370:	ff07bc23          	sd	a6,-8(a5)
    1374:	0007ba03          	ld	s4,0(a5)
    1378:	07a1                	addi	a5,a5,8
    137a:	00ca79b3          	and	s3,s4,a2
    137e:	00da4ab3          	xor	s5,s4,a3
    1382:	00b98b33          	add	s6,s3,a1
    1386:	00aafbb3          	and	s7,s5,a0
    138a:	017b4cb3          	xor	s9,s6,s7
    138e:	ff97bc23          	sd	s9,-8(a5)
    1392:	0007bd03          	ld	s10,0(a5)
    1396:	07a1                	addi	a5,a5,8
    1398:	00cd7db3          	and	s11,s10,a2
    139c:	00dd4f33          	xor	t5,s10,a3
    13a0:	00bd8e33          	add	t3,s11,a1
    13a4:	00af7fb3          	and	t6,t5,a0
    13a8:	01fe42b3          	xor	t0,t3,t6
    13ac:	fe57bc23          	sd	t0,-8(a5)
    13b0:	0007b383          	ld	t2,0(a5)
    13b4:	07a1                	addi	a5,a5,8
    13b6:	00c3f933          	and	s2,t2,a2
    13ba:	00d3c833          	xor	a6,t2,a3
    13be:	00b90a33          	add	s4,s2,a1
    13c2:	00a879b3          	and	s3,a6,a0
    13c6:	013a4ab3          	xor	s5,s4,s3
    13ca:	ff57bc23          	sd	s5,-8(a5)
    13ce:	0007bb03          	ld	s6,0(a5)
    13d2:	07a1                	addi	a5,a5,8
    13d4:	00cb7bb3          	and	s7,s6,a2
    13d8:	00db4cb3          	xor	s9,s6,a3
    13dc:	00bb8d33          	add	s10,s7,a1
    13e0:	00acfdb3          	and	s11,s9,a0
    13e4:	01bd4f33          	xor	t5,s10,s11
    13e8:	ffe7bc23          	sd	t5,-8(a5)
                    for (j=0; j<N; j++) {
    13ec:	0c178e63          	beq	a5,ra,14c8 <matrix_test+0x2d8>
    13f0:	f422                	sd	s0,40(sp)
    13f2:	f83a                	sd	a4,48(sp)
                            A[i*N+j] += val;
    13f4:	6380                	ld	s0,0(a5)
    13f6:	0107b903          	ld	s2,16(a5)
    13fa:	0307ba03          	ld	s4,48(a5)
    13fe:	0387bb83          	ld	s7,56(a5)
    1402:	0087be03          	ld	t3,8(a5)
    1406:	6f98                	ld	a4,24(a5)
    1408:	0207b283          	ld	t0,32(a5)
    140c:	0287bf83          	ld	t6,40(a5)
    1410:	00c47b33          	and	s6,s0,a2
    1414:	00d443b3          	xor	t2,s0,a3
    1418:	00ce7db3          	and	s11,t3,a2
    141c:	00c97d33          	and	s10,s2,a2
    1420:	00d94833          	xor	a6,s2,a3
    1424:	00c77cb3          	and	s9,a4,a2
    1428:	00c2fab3          	and	s5,t0,a2
    142c:	00cff9b3          	and	s3,t6,a2
    1430:	00ca7933          	and	s2,s4,a2
    1434:	00da4f33          	xor	t5,s4,a3
    1438:	00cbf433          	and	s0,s7,a2
    143c:	00dbca33          	xor	s4,s7,a3
    1440:	00de4e33          	xor	t3,t3,a3
    1444:	8f35                	xor	a4,a4,a3
    1446:	00d2c2b3          	xor	t0,t0,a3
    144a:	00dfcfb3          	xor	t6,t6,a3
    144e:	9b2e                	add	s6,s6,a1
    1450:	00a3f3b3          	and	t2,t2,a0
    1454:	9dae                	add	s11,s11,a1
    1456:	00ae7e33          	and	t3,t3,a0
    145a:	9d2e                	add	s10,s10,a1
    145c:	00a87833          	and	a6,a6,a0
    1460:	9cae                	add	s9,s9,a1
    1462:	00aa7bb3          	and	s7,s4,a0
    1466:	8f69                	and	a4,a4,a0
    1468:	9aae                	add	s5,s5,a1
    146a:	00a2f2b3          	and	t0,t0,a0
    146e:	99ae                	add	s3,s3,a1
    1470:	00afffb3          	and	t6,t6,a0
    1474:	992e                	add	s2,s2,a1
    1476:	00af7f33          	and	t5,t5,a0
    147a:	942e                	add	s0,s0,a1
    147c:	007b4a33          	xor	s4,s6,t2
    1480:	01cdcb33          	xor	s6,s11,t3
    1484:	010d43b3          	xor	t2,s10,a6
    1488:	00eccdb3          	xor	s11,s9,a4
    148c:	005ace33          	xor	t3,s5,t0
    1490:	01f9cd33          	xor	s10,s3,t6
    1494:	01e94833          	xor	a6,s2,t5
    1498:	01744cb3          	xor	s9,s0,s7
    149c:	0147b023          	sd	s4,0(a5)
    14a0:	0167b423          	sd	s6,8(a5)
    14a4:	0077b823          	sd	t2,16(a5)
    14a8:	01b7bc23          	sd	s11,24(a5)
    14ac:	03c7b023          	sd	t3,32(a5)
    14b0:	03a7b423          	sd	s10,40(a5)
    14b4:	0307b823          	sd	a6,48(a5)
    14b8:	0397bc23          	sd	s9,56(a5)
                    for (j=0; j<N; j++) {
    14bc:	04078793          	addi	a5,a5,64
    14c0:	f2179ae3          	bne	a5,ra,13f4 <matrix_test+0x204>
    14c4:	7422                	ld	s0,40(sp)
    14c6:	7742                	ld	a4,48(sp)
    14c8:	ffc47093          	andi	ra,s0,-4
    14cc:	9706                	add	a4,a4,ra
    14ce:	0a808d63          	beq	ra,s0,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    14d2:	011707b3          	add	a5,a4,a7
    14d6:	00179a93          	slli	s5,a5,0x1
    14da:	015e82b3          	add	t0,t4,s5
    14de:	0002d983          	lhu	s3,0(t0)
                    for (j=0; j<N; j++) {
    14e2:	00170f93          	addi	t6,a4,1
                            A[i*N+j] += val;
    14e6:	0189893b          	addw	s2,s3,s8
    14ea:	01229023          	sh	s2,0(t0)
                    for (j=0; j<N; j++) {
    14ee:	089ffd63          	bgeu	t6,s1,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    14f2:	011f8f33          	add	t5,t6,a7
    14f6:	001f1413          	slli	s0,t5,0x1
    14fa:	008e8bb3          	add	s7,t4,s0
    14fe:	000bda03          	lhu	s4,0(s7)
                    for (j=0; j<N; j++) {
    1502:	00270b13          	addi	s6,a4,2
                            A[i*N+j] += val;
    1506:	018a03bb          	addw	t2,s4,s8
    150a:	007b9023          	sh	t2,0(s7)
                    for (j=0; j<N; j++) {
    150e:	069b7d63          	bgeu	s6,s1,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    1512:	011b0db3          	add	s11,s6,a7
    1516:	001d9e13          	slli	t3,s11,0x1
    151a:	01ce8d33          	add	s10,t4,t3
    151e:	000d5c83          	lhu	s9,0(s10)
                    for (j=0; j<N; j++) {
    1522:	00370813          	addi	a6,a4,3
                            A[i*N+j] += val;
    1526:	018c80bb          	addw	ra,s9,s8
    152a:	001d1023          	sh	ra,0(s10)
                    for (j=0; j<N; j++) {
    152e:	04987d63          	bgeu	a6,s1,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    1532:	011807b3          	add	a5,a6,a7
    1536:	00179a93          	slli	s5,a5,0x1
    153a:	015e82b3          	add	t0,t4,s5
    153e:	0002d983          	lhu	s3,0(t0)
                    for (j=0; j<N; j++) {
    1542:	00470f93          	addi	t6,a4,4
                            A[i*N+j] += val;
    1546:	0189893b          	addw	s2,s3,s8
    154a:	01229023          	sh	s2,0(t0)
                    for (j=0; j<N; j++) {
    154e:	029ffd63          	bgeu	t6,s1,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    1552:	011f8f33          	add	t5,t6,a7
    1556:	001f1413          	slli	s0,t5,0x1
    155a:	008e8bb3          	add	s7,t4,s0
    155e:	000bda03          	lhu	s4,0(s7)
                    for (j=0; j<N; j++) {
    1562:	0715                	addi	a4,a4,5
                            A[i*N+j] += val;
    1564:	018a0b3b          	addw	s6,s4,s8
    1568:	016b9023          	sh	s6,0(s7)
                    for (j=0; j<N; j++) {
    156c:	00977e63          	bgeu	a4,s1,1588 <matrix_test+0x398>
                            A[i*N+j] += val;
    1570:	011703b3          	add	t2,a4,a7
    1574:	00139d93          	slli	s11,t2,0x1
    1578:	01be8e33          	add	t3,t4,s11
    157c:	000e5d03          	lhu	s10,0(t3)
    1580:	018d0cbb          	addw	s9,s10,s8
    1584:	019e1023          	sh	s9,0(t3)
            for (i=0; i<N; i++) {
    1588:	6802                	ld	a6,0(sp)
    158a:	60e2                	ld	ra,24(sp)
    158c:	98a6                	add	a7,a7,s1
    158e:	0805                	addi	a6,a6,1
    1590:	9306                	add	t1,t1,ra
    1592:	01048463          	beq	s1,a6,159a <matrix_test+0x3aa>
    1596:	e042                	sd	a6,0(sp)
    1598:	b9c9                	j	126a <matrix_test+0x7a>
    159a:	75e2                	ld	a1,56(sp)
    159c:	6a02                	ld	s4,0(sp)
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    159e:	4626                	lw	a2,72(sp)
    15a0:	6fa2                	ld	t6,8(sp)
    15a2:	40900533          	neg	a0,s1
    15a6:	8286                	mv	t0,ra
    15a8:	9586                	add	a1,a1,ra
    15aa:	00151e13          	slli	t3,a0,0x1
    15ae:	4881                	li	a7,0
    15b0:	4301                	li	t1,0
                    for (j=0; j<N; j++) {
    15b2:	41c006b3          	neg	a3,t3
    15b6:	ffe68e93          	addi	t4,a3,-2
    15ba:	001ed793          	srli	a5,t4,0x1
    15be:	00178a93          	addi	s5,a5,1
    15c2:	00289993          	slli	s3,a7,0x2
    15c6:	007af913          	andi	s2,s5,7
    15ca:	00be06b3          	add	a3,t3,a1
    15ce:	01f987b3          	add	a5,s3,t6
    15d2:	08090e63          	beqz	s2,166e <matrix_test+0x47e>
    15d6:	4f05                	li	t5,1
    15d8:	09e90163          	beq	s2,t5,165a <matrix_test+0x46a>
    15dc:	4409                	li	s0,2
    15de:	06890663          	beq	s2,s0,164a <matrix_test+0x45a>
    15e2:	4b8d                	li	s7,3
    15e4:	05790b63          	beq	s2,s7,163a <matrix_test+0x44a>
    15e8:	4711                	li	a4,4
    15ea:	04e90063          	beq	s2,a4,162a <matrix_test+0x43a>
    15ee:	4b15                	li	s6,5
    15f0:	03690563          	beq	s2,s6,161a <matrix_test+0x42a>
    15f4:	4399                	li	t2,6
    15f6:	00790a63          	beq	s2,t2,160a <matrix_test+0x41a>
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    15fa:	00069d83          	lh	s11,0(a3)
                    for (j=0; j<N; j++) {
    15fe:	0791                	addi	a5,a5,4
    1600:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1602:	02cd8d3b          	mulw	s10,s11,a2
    1606:	ffa7ae23          	sw	s10,-4(a5)
    160a:	00069c83          	lh	s9,0(a3)
                    for (j=0; j<N; j++) {
    160e:	0791                	addi	a5,a5,4
    1610:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1612:	02cc80bb          	mulw	ra,s9,a2
    1616:	fe17ae23          	sw	ra,-4(a5)
    161a:	00069503          	lh	a0,0(a3)
                    for (j=0; j<N; j++) {
    161e:	0791                	addi	a5,a5,4
    1620:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1622:	02c50ebb          	mulw	t4,a0,a2
    1626:	ffd7ae23          	sw	t4,-4(a5)
    162a:	00069a83          	lh	s5,0(a3)
                    for (j=0; j<N; j++) {
    162e:	0791                	addi	a5,a5,4
    1630:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1632:	02ca89bb          	mulw	s3,s5,a2
    1636:	ff37ae23          	sw	s3,-4(a5)
    163a:	00069903          	lh	s2,0(a3)
                    for (j=0; j<N; j++) {
    163e:	0791                	addi	a5,a5,4
    1640:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1642:	02c90f3b          	mulw	t5,s2,a2
    1646:	ffe7ae23          	sw	t5,-4(a5)
    164a:	00069403          	lh	s0,0(a3)
                    for (j=0; j<N; j++) {
    164e:	0791                	addi	a5,a5,4
    1650:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1652:	02c40bbb          	mulw	s7,s0,a2
    1656:	ff77ae23          	sw	s7,-4(a5)
    165a:	00069703          	lh	a4,0(a3)
                    for (j=0; j<N; j++) {
    165e:	0791                	addi	a5,a5,4
    1660:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1662:	02c70b3b          	mulw	s6,a4,a2
    1666:	ff67ae23          	sw	s6,-4(a5)
                    for (j=0; j<N; j++) {
    166a:	06b68763          	beq	a3,a1,16d8 <matrix_test+0x4e8>
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    166e:	00069d83          	lh	s11,0(a3)
    1672:	00269d03          	lh	s10,2(a3)
    1676:	00469c83          	lh	s9,4(a3)
    167a:	00669383          	lh	t2,6(a3)
    167e:	00869083          	lh	ra,8(a3)
    1682:	00a69e83          	lh	t4,10(a3)
    1686:	00c69503          	lh	a0,12(a3)
    168a:	00e69a83          	lh	s5,14(a3)
    168e:	02cd89bb          	mulw	s3,s11,a2
                    for (j=0; j<N; j++) {
    1692:	06c1                	addi	a3,a3,16
    1694:	02078793          	addi	a5,a5,32
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1698:	02cd093b          	mulw	s2,s10,a2
    169c:	ff37a023          	sw	s3,-32(a5)
    16a0:	02cc8f3b          	mulw	t5,s9,a2
    16a4:	ff27a223          	sw	s2,-28(a5)
    16a8:	02c3843b          	mulw	s0,t2,a2
    16ac:	ffe7a423          	sw	t5,-24(a5)
    16b0:	02c08bbb          	mulw	s7,ra,a2
    16b4:	fe87a623          	sw	s0,-20(a5)
    16b8:	02ce873b          	mulw	a4,t4,a2
    16bc:	ff77a823          	sw	s7,-16(a5)
    16c0:	02c50b3b          	mulw	s6,a0,a2
    16c4:	fee7aa23          	sw	a4,-12(a5)
    16c8:	02ca8dbb          	mulw	s11,s5,a2
    16cc:	ff67ac23          	sw	s6,-8(a5)
    16d0:	ffb7ae23          	sw	s11,-4(a5)
                    for (j=0; j<N; j++) {
    16d4:	f8b69de3          	bne	a3,a1,166e <matrix_test+0x47e>
            for (i=0; i<N; i++) {
    16d8:	00130793          	addi	a5,t1,1
    16dc:	98c2                	add	a7,a7,a6
    16de:	005685b3          	add	a1,a3,t0
    16e2:	006a0463          	beq	s4,t1,16ea <matrix_test+0x4fa>
    16e6:	833e                	mv	t1,a5
    16e8:	b5e9                	j	15b2 <matrix_test+0x3c2>
    16ea:	62a2                	ld	t0,8(sp)
                            if (tmp>clipval) {
    16ec:	4586                	lw	a1,64(sp)
    16ee:	410006b3          	neg	a3,a6
    16f2:	00281313          	slli	t1,a6,0x2
    16f6:	00628833          	add	a6,t0,t1
    16fa:	00269513          	slli	a0,a3,0x2
    16fe:	4d81                	li	s11,0
    1700:	4e01                	li	t3,0
    1702:	4701                	li	a4,0
    1704:	4881                	li	a7,0
                    for (j=0; j<N; j++) {
    1706:	40a00633          	neg	a2,a0
    170a:	ffc60f93          	addi	t6,a2,-4
    170e:	002fdd13          	srli	s10,t6,0x2
    1712:	001d0c93          	addi	s9,s10,1
    1716:	003cf393          	andi	t2,s9,3
    171a:	01050eb3          	add	t4,a0,a6
    171e:	12038263          	beqz	t2,1842 <matrix_test+0x652>
    1722:	4085                	li	ra,1
    1724:	04138b63          	beq	t2,ra,177a <matrix_test+0x58a>
    1728:	4a89                	li	s5,2
    172a:	03538563          	beq	t2,s5,1754 <matrix_test+0x564>
                            cur=C[i*N+j];
    172e:	89f2                	mv	s3,t3
    1730:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    1734:	030d9913          	slli	s2,s11,0x30
    1738:	03095f13          	srli	t5,s2,0x30
                            tmp+=cur;
    173c:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    1740:	1ce5d463          	bge	a1,a4,1908 <matrix_test+0x718>
                                    ret+=10;
    1744:	00af071b          	addiw	a4,t5,10
    1748:	01071d9b          	slliw	s11,a4,0x10
    174c:	410ddd9b          	sraiw	s11,s11,0x10
                                    tmp=0;
    1750:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    1752:	0e91                	addi	t4,t4,4
                            cur=C[i*N+j];
    1754:	86f2                	mv	a3,t3
    1756:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    175a:	030d9793          	slli	a5,s11,0x30
    175e:	0307d293          	srli	t0,a5,0x30
                            tmp+=cur;
    1762:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    1766:	18e5d863          	bge	a1,a4,18f6 <matrix_test+0x706>
                                    ret+=10;
    176a:	00a28c9b          	addiw	s9,t0,10
    176e:	010c939b          	slliw	t2,s9,0x10
    1772:	4103dd9b          	sraiw	s11,t2,0x10
                                    tmp=0;
    1776:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    1778:	0e91                	addi	t4,t4,4
                            cur=C[i*N+j];
    177a:	80f2                	mv	ra,t3
    177c:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    1780:	030d9a93          	slli	s5,s11,0x30
    1784:	030ad993          	srli	s3,s5,0x30
                            tmp+=cur;
    1788:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    178c:	14e5d863          	bge	a1,a4,18dc <matrix_test+0x6ec>
                                    ret+=10;
    1790:	00a98b1b          	addiw	s6,s3,10
    1794:	030b1713          	slli	a4,s6,0x30
    1798:	010b1d9b          	slliw	s11,s6,0x10
    179c:	03075293          	srli	t0,a4,0x30
    17a0:	410ddd9b          	sraiw	s11,s11,0x10
                                    tmp=0;
    17a4:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    17a6:	0e91                	addi	t4,t4,4
    17a8:	090e9d63          	bne	t4,a6,1842 <matrix_test+0x652>
            for (i=0; i<N; i++) {
    17ac:	00188f93          	addi	t6,a7,1
    17b0:	006e8833          	add	a6,t4,t1
    17b4:	171a0363          	beq	s4,a7,191a <matrix_test+0x72a>
    17b8:	88fe                	mv	a7,t6
    17ba:	b7b1                	j	1706 <matrix_test+0x516>
                                        ret += (cur>prev) ? 1 : 0;
    17bc:	005e2e33          	slt	t3,t3,t0
                            cur=C[i*N+j];
    17c0:	004eaa83          	lw	s5,4(t4)
                                        ret += (cur>prev) ? 1 : 0;
    17c4:	00fe063b          	addw	a2,t3,a5
    17c8:	01061f9b          	slliw	t6,a2,0x10
    17cc:	410fd39b          	sraiw	t2,t6,0x10
                                    ret+=10;
    17d0:	03039993          	slli	s3,t2,0x30
                            tmp+=cur;
    17d4:	001a8f3b          	addw	t5,s5,ra
                    for (j=0; j<N; j++) {
    17d8:	0e91                	addi	t4,t4,4
                                    ret+=10;
    17da:	0309d913          	srli	s2,s3,0x30
                            if (tmp>clipval) {
    17de:	09e5de63          	bge	a1,t5,187a <matrix_test+0x68a>
                            cur=C[i*N+j];
    17e2:	004ea783          	lw	a5,4(t4)
                                    ret+=10;
    17e6:	00a90d9b          	addiw	s11,s2,10
    17ea:	010d929b          	slliw	t0,s11,0x10
    17ee:	4102d71b          	sraiw	a4,t0,0x10
                                    tmp=0;
    17f2:	4f01                	li	t5,0
                                    ret+=10;
    17f4:	03071693          	slli	a3,a4,0x30
                            tmp+=cur;
    17f8:	01e7863b          	addw	a2,a5,t5
                                    ret+=10;
    17fc:	0306de13          	srli	t3,a3,0x30
                            if (tmp>clipval) {
    1800:	08c5df63          	bge	a1,a2,189e <matrix_test+0x6ae>
                                    ret+=10;
    1804:	00ae009b          	addiw	ra,t3,10
                            cur=C[i*N+j];
    1808:	008eae03          	lw	t3,8(t4)
                                    ret+=10;
    180c:	01009a9b          	slliw	s5,ra,0x10
    1810:	410ad39b          	sraiw	t2,s5,0x10
                                    tmp=0;
    1814:	4601                	li	a2,0
                                    ret+=10;
    1816:	03039993          	slli	s3,t2,0x30
                            tmp+=cur;
    181a:	00ce073b          	addw	a4,t3,a2
                                    ret+=10;
    181e:	0309d913          	srli	s2,s3,0x30
                            if (tmp>clipval) {
    1822:	0ae5d063          	bge	a1,a4,18c2 <matrix_test+0x6d2>
                                    ret+=10;
    1826:	00a9079b          	addiw	a5,s2,10
    182a:	03079693          	slli	a3,a5,0x30
    182e:	0107961b          	slliw	a2,a5,0x10
    1832:	0306d293          	srli	t0,a3,0x30
    1836:	41065d9b          	sraiw	s11,a2,0x10
                                    tmp=0;
    183a:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    183c:	0eb1                	addi	t4,t4,12
    183e:	f70e87e3          	beq	t4,a6,17ac <matrix_test+0x5bc>
                            cur=C[i*N+j];
    1842:	000ea283          	lw	t0,0(t4)
                                    ret+=10;
    1846:	030d9693          	slli	a3,s11,0x30
    184a:	0306d793          	srli	a5,a3,0x30
                            tmp+=cur;
    184e:	00e280bb          	addw	ra,t0,a4
                            if (tmp>clipval) {
    1852:	f615d5e3          	bge	a1,ra,17bc <matrix_test+0x5cc>
                            cur=C[i*N+j];
    1856:	004eaa83          	lw	s5,4(t4)
                                    ret+=10;
    185a:	00a78d1b          	addiw	s10,a5,10
    185e:	010d1c9b          	slliw	s9,s10,0x10
    1862:	410cd39b          	sraiw	t2,s9,0x10
                                    tmp=0;
    1866:	4081                	li	ra,0
                                    ret+=10;
    1868:	03039993          	slli	s3,t2,0x30
                            tmp+=cur;
    186c:	001a8f3b          	addw	t5,s5,ra
                    for (j=0; j<N; j++) {
    1870:	0e91                	addi	t4,t4,4
                                    ret+=10;
    1872:	0309d913          	srli	s2,s3,0x30
                            if (tmp>clipval) {
    1876:	f7e5c6e3          	blt	a1,t5,17e2 <matrix_test+0x5f2>
                                        ret += (cur>prev) ? 1 : 0;
    187a:	0152a433          	slt	s0,t0,s5
                            cur=C[i*N+j];
    187e:	004ea783          	lw	a5,4(t4)
                                        ret += (cur>prev) ? 1 : 0;
    1882:	01240bbb          	addw	s7,s0,s2
    1886:	010b9b1b          	slliw	s6,s7,0x10
    188a:	410b571b          	sraiw	a4,s6,0x10
                                    ret+=10;
    188e:	03071693          	slli	a3,a4,0x30
                            tmp+=cur;
    1892:	01e7863b          	addw	a2,a5,t5
                                    ret+=10;
    1896:	0306de13          	srli	t3,a3,0x30
                            if (tmp>clipval) {
    189a:	f6c5c5e3          	blt	a1,a2,1804 <matrix_test+0x614>
                                        ret += (cur>prev) ? 1 : 0;
    189e:	00faafb3          	slt	t6,s5,a5
    18a2:	01cf8d3b          	addw	s10,t6,t3
                            cur=C[i*N+j];
    18a6:	008eae03          	lw	t3,8(t4)
                                        ret += (cur>prev) ? 1 : 0;
    18aa:	010d1c9b          	slliw	s9,s10,0x10
    18ae:	410cd39b          	sraiw	t2,s9,0x10
                                    ret+=10;
    18b2:	03039993          	slli	s3,t2,0x30
                            tmp+=cur;
    18b6:	00ce073b          	addw	a4,t3,a2
                                    ret+=10;
    18ba:	0309d913          	srli	s2,s3,0x30
                            if (tmp>clipval) {
    18be:	f6e5c4e3          	blt	a1,a4,1826 <matrix_test+0x636>
                                        ret += (cur>prev) ? 1 : 0;
    18c2:	01c7af33          	slt	t5,a5,t3
    18c6:	012f043b          	addw	s0,t5,s2
    18ca:	03041b93          	slli	s7,s0,0x30
    18ce:	01041b1b          	slliw	s6,s0,0x10
    18d2:	030bd293          	srli	t0,s7,0x30
    18d6:	410b5d9b          	sraiw	s11,s6,0x10
    18da:	b78d                	j	183c <matrix_test+0x64c>
    18dc:	01c0a933          	slt	s2,ra,t3
    18e0:	01390f3b          	addw	t5,s2,s3
    18e4:	030f1413          	slli	s0,t5,0x30
    18e8:	010f1b9b          	slliw	s7,t5,0x10
    18ec:	03045293          	srli	t0,s0,0x30
    18f0:	410bdd9b          	sraiw	s11,s7,0x10
    18f4:	bd4d                	j	17a6 <matrix_test+0x5b6>
    18f6:	01c6a633          	slt	a2,a3,t3
    18fa:	00560fbb          	addw	t6,a2,t0
    18fe:	010f9d1b          	slliw	s10,t6,0x10
    1902:	410d5d9b          	sraiw	s11,s10,0x10
    1906:	bd8d                	j	1778 <matrix_test+0x588>
    1908:	01c9a433          	slt	s0,s3,t3
    190c:	01e40bbb          	addw	s7,s0,t5
    1910:	010b9b1b          	slliw	s6,s7,0x10
    1914:	410b5d9b          	sraiw	s11,s6,0x10
    1918:	bd2d                	j	1752 <matrix_test+0x562>
                         crc &= 0x7fff;
              }
        return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
        crc=crcu8( (ee_u8) (newval)               ,crc);
    191a:	0ffdf893          	andi	a7,s11,255
                    crc >>= 1;
    191e:	0018fd13          	andi	s10,a7,1
    1922:	63a9                	lui	t2,0xa
    1924:	41a00cb3          	neg	s9,s10
    1928:	00138093          	addi	ra,t2,1 # a001 <_end+0x17b1>
    192c:	0190fab3          	and	s5,ra,s9
                    data >>= 1;
    1930:	0018de13          	srli	t3,a7,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1934:	015e49b3          	xor	s3,t3,s5
                    if (x16 == 1)
    1938:	0019f913          	andi	s2,s3,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    193c:	0082d713          	srli	a4,t0,0x8
                    data >>= 1;
    1940:	0028d693          	srli	a3,a7,0x2
                    crc >>= 1;
    1944:	001ad293          	srli	t0,s5,0x1
                    if (x16 == 1)
    1948:	00090b63          	beqz	s2,195e <matrix_test+0x76e>
                         crc |= 0x8000;
    194c:	7f69                	lui	t5,0xffffa
    194e:	001f0413          	addi	s0,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1952:	0082cbb3          	xor	s7,t0,s0
    1956:	030b9293          	slli	t0,s7,0x30
    195a:	0302d293          	srli	t0,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    195e:	0056cb33          	xor	s6,a3,t0
                    if (x16 == 1)
    1962:	001b7d93          	andi	s11,s6,1
                    data >>= 1;
    1966:	0016d613          	srli	a2,a3,0x1
                    crc >>= 1;
    196a:	0012d593          	srli	a1,t0,0x1
                    if (x16 == 1)
    196e:	000d8b63          	beqz	s11,1984 <matrix_test+0x794>
                         crc |= 0x8000;
    1972:	77e9                	lui	a5,0xffffa
    1974:	00178e93          	addi	t4,a5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1978:	01d5c333          	xor	t1,a1,t4
    197c:	03031513          	slli	a0,t1,0x30
    1980:	03055593          	srli	a1,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1984:	00c5ca33          	xor	s4,a1,a2
                    if (x16 == 1)
    1988:	001a7f93          	andi	t6,s4,1
                    data >>= 1;
    198c:	0026d813          	srli	a6,a3,0x2
                    crc >>= 1;
    1990:	0015d093          	srli	ra,a1,0x1
                    if (x16 == 1)
    1994:	000f8b63          	beqz	t6,19aa <matrix_test+0x7ba>
                         crc |= 0x8000;
    1998:	78e9                	lui	a7,0xffffa
    199a:	00188d13          	addi	s10,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    199e:	01a0ccb3          	xor	s9,ra,s10
    19a2:	030c9393          	slli	t2,s9,0x30
    19a6:	0303d093          	srli	ra,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19aa:	0100cab3          	xor	s5,ra,a6
                    if (x16 == 1)
    19ae:	001afe13          	andi	t3,s5,1
                    data >>= 1;
    19b2:	0036d993          	srli	s3,a3,0x3
                    crc >>= 1;
    19b6:	0010d293          	srli	t0,ra,0x1
                    if (x16 == 1)
    19ba:	000e0b63          	beqz	t3,19d0 <matrix_test+0x7e0>
                         crc |= 0x8000;
    19be:	7969                	lui	s2,0xffffa
    19c0:	00190f13          	addi	t5,s2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    19c4:	01e2c433          	xor	s0,t0,t5
    19c8:	03041b93          	slli	s7,s0,0x30
    19cc:	030bd293          	srli	t0,s7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19d0:	0132cb33          	xor	s6,t0,s3
                    if (x16 == 1)
    19d4:	001b7d93          	andi	s11,s6,1
                    data >>= 1;
    19d8:	0046d793          	srli	a5,a3,0x4
                    crc >>= 1;
    19dc:	0012d593          	srli	a1,t0,0x1
                    if (x16 == 1)
    19e0:	000d8b63          	beqz	s11,19f6 <matrix_test+0x806>
                         crc |= 0x8000;
    19e4:	7669                	lui	a2,0xffffa
    19e6:	00160e93          	addi	t4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    19ea:	01d5c333          	xor	t1,a1,t4
    19ee:	03031513          	slli	a0,t1,0x30
    19f2:	03055593          	srli	a1,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    19f6:	00f5ca33          	xor	s4,a1,a5
                    if (x16 == 1)
    19fa:	001a7f93          	andi	t6,s4,1
                    data >>= 1;
    19fe:	8295                	srli	a3,a3,0x5
                    crc >>= 1;
    1a00:	0015d393          	srli	t2,a1,0x1
                    if (x16 == 1)
    1a04:	000f8b63          	beqz	t6,1a1a <matrix_test+0x82a>
                         crc |= 0x8000;
    1a08:	7869                	lui	a6,0xffffa
    1a0a:	00180893          	addi	a7,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1a0e:	0113cd33          	xor	s10,t2,a7
    1a12:	030d1c93          	slli	s9,s10,0x30
    1a16:	030cd393          	srli	t2,s9,0x30
                    if (x16 == 1)
    1a1a:	0013f093          	andi	ra,t2,1
                    crc >>= 1;
    1a1e:	0013df13          	srli	t5,t2,0x1
                    if (x16 == 1)
    1a22:	00d08b63          	beq	ra,a3,1a38 <matrix_test+0x848>
                         crc |= 0x8000;
    1a26:	7ae9                	lui	s5,0xffffa
    1a28:	001a8e13          	addi	t3,s5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1a2c:	01cf49b3          	xor	s3,t5,t3
    1a30:	03099913          	slli	s2,s3,0x30
    1a34:	03095f13          	srli	t5,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a38:	01e74433          	xor	s0,a4,t5
                    if (x16 == 1)
    1a3c:	00147b93          	andi	s7,s0,1
                    data >>= 1;
    1a40:	00175293          	srli	t0,a4,0x1
                    if (x16 == 1)
    1a44:	001f5e93          	srli	t4,t5,0x1
    1a48:	000b8b63          	beqz	s7,1a5e <matrix_test+0x86e>
                         crc |= 0x8000;
    1a4c:	7b69                	lui	s6,0xffffa
    1a4e:	001b0d93          	addi	s11,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1a52:	01bec7b3          	xor	a5,t4,s11
    1a56:	03079613          	slli	a2,a5,0x30
    1a5a:	03065e93          	srli	t4,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a5e:	01d2c333          	xor	t1,t0,t4
                    if (x16 == 1)
    1a62:	00137513          	andi	a0,t1,1
                    data >>= 1;
    1a66:	00275593          	srli	a1,a4,0x2
                    if (x16 == 1)
    1a6a:	001ed893          	srli	a7,t4,0x1
    1a6e:	c911                	beqz	a0,1a82 <matrix_test+0x892>
                         crc |= 0x8000;
    1a70:	7a69                	lui	s4,0xffffa
    1a72:	001a0f93          	addi	t6,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1a76:	01f8c6b3          	xor	a3,a7,t6
    1a7a:	03069813          	slli	a6,a3,0x30
    1a7e:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1a82:	0115cd33          	xor	s10,a1,a7
                    if (x16 == 1)
    1a86:	001d7393          	andi	t2,s10,1
                    data >>= 1;
    1a8a:	00375093          	srli	ra,a4,0x3
                    if (x16 == 1)
    1a8e:	0018d913          	srli	s2,a7,0x1
    1a92:	00038b63          	beqz	t2,1aa8 <matrix_test+0x8b8>
                         crc |= 0x8000;
    1a96:	7ae9                	lui	s5,0xffffa
    1a98:	001a8e13          	addi	t3,s5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1a9c:	01c94cb3          	xor	s9,s2,t3
    1aa0:	030c9993          	slli	s3,s9,0x30
    1aa4:	0309d913          	srli	s2,s3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1aa8:	00194f33          	xor	t5,s2,ra
                    if (x16 == 1)
    1aac:	001f7413          	andi	s0,t5,1
                    data >>= 1;
    1ab0:	00475b93          	srli	s7,a4,0x4
                    if (x16 == 1)
    1ab4:	00195613          	srli	a2,s2,0x1
    1ab8:	c811                	beqz	s0,1acc <matrix_test+0x8dc>
                         crc |= 0x8000;
    1aba:	72e9                	lui	t0,0xffffa
    1abc:	00128b13          	addi	s6,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1ac0:	01664db3          	xor	s11,a2,s6
    1ac4:	030d9793          	slli	a5,s11,0x30
    1ac8:	0307d613          	srli	a2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1acc:	01764eb3          	xor	t4,a2,s7
                    if (x16 == 1)
    1ad0:	001ef313          	andi	t1,t4,1
                    data >>= 1;
    1ad4:	00575513          	srli	a0,a4,0x5
                    if (x16 == 1)
    1ad8:	00165813          	srli	a6,a2,0x1
    1adc:	00030b63          	beqz	t1,1af2 <matrix_test+0x902>
                         crc |= 0x8000;
    1ae0:	75e9                	lui	a1,0xffffa
    1ae2:	00158a13          	addi	s4,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1ae6:	01484fb3          	xor	t6,a6,s4
    1aea:	030f9693          	slli	a3,t6,0x30
    1aee:	0306d813          	srli	a6,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1af2:	010548b3          	xor	a7,a0,a6
                    if (x16 == 1)
    1af6:	0018fd13          	andi	s10,a7,1
                    data >>= 1;
    1afa:	00675393          	srli	t2,a4,0x6
                    if (x16 == 1)
    1afe:	00185993          	srli	s3,a6,0x1
    1b02:	000d0b63          	beqz	s10,1b18 <matrix_test+0x928>
                         crc |= 0x8000;
    1b06:	70e9                	lui	ra,0xffffa
    1b08:	00108a93          	addi	s5,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1b0c:	0159ce33          	xor	t3,s3,s5
    1b10:	030e1c93          	slli	s9,t3,0x30
    1b14:	030cd993          	srli	s3,s9,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1b18:	0133c933          	xor	s2,t2,s3
                    if (x16 == 1)
    1b1c:	00197f13          	andi	t5,s2,1
                    data >>= 1;
    1b20:	831d                	srli	a4,a4,0x7
                    if (x16 == 1)
    1b22:	0019dd93          	srli	s11,s3,0x1
    1b26:	000f0b63          	beqz	t5,1b3c <matrix_test+0x94c>
                         crc |= 0x8000;
    1b2a:	7469                	lui	s0,0xffffa
    1b2c:	00140b93          	addi	s7,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1b30:	017dc2b3          	xor	t0,s11,s7
    1b34:	03029b13          	slli	s6,t0,0x30
    1b38:	030b5d93          	srli	s11,s6,0x30
                    if (x16 == 1)
    1b3c:	001df793          	andi	a5,s11,1
    1b40:	001dda13          	srli	s4,s11,0x1
    1b44:	00e78b63          	beq	a5,a4,1b5a <matrix_test+0x96a>
                         crc |= 0x8000;
    1b48:	7669                	lui	a2,0xffffa
    1b4a:	00160e93          	addi	t4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1b4e:	01da4333          	xor	t1,s4,t4
    1b52:	03031513          	slli	a0,t1,0x30
    1b56:	03055a13          	srli	s4,a0,0x30
            for (i=0; i<N; i++) {
    1b5a:	e099                	bnez	s1,1b60 <matrix_test+0x970>
    1b5c:	66e0106f          	j	31ca <matrix_test+0x1fda>
                    C[i]=0;
    1b60:	6d22                	ld	s10,8(sp)
    1b62:	00249b93          	slli	s7,s1,0x2
    1b66:	865e                	mv	a2,s7
    1b68:	4581                	li	a1,0
    1b6a:	856a                	mv	a0,s10
    1b6c:	7a5050ef          	jal	ra,7b10 <memset>
    1b70:	62c2                	ld	t0,16(sp)
    1b72:	7de2                	ld	s11,56(sp)
    1b74:	00149693          	slli	a3,s1,0x1
    1b78:	8fea                	mv	t6,s10
    1b7a:	01ab8533          	add	a0,s7,s10
    1b7e:	005683b3          	add	t2,a3,t0
    1b82:	4401                	li	s0,0
    1b84:	e052                	sd	s4,0(sp)
                    for (j=0; j<N; j++) {
    1b86:	405388b3          	sub	a7,t2,t0
    1b8a:	ffe88093          	addi	ra,a7,-2
    1b8e:	0010da93          	srli	s5,ra,0x1
    1b92:	001a8e13          	addi	t3,s5,1
    1b96:	00141c93          	slli	s9,s0,0x1
    1b9a:	007e7993          	andi	s3,t3,7
    1b9e:	019d87b3          	add	a5,s11,s9
                    C[i]=0;
    1ba2:	8716                	mv	a4,t0
    1ba4:	4681                	li	a3,0
    1ba6:	0a098a63          	beqz	s3,1c5a <matrix_test+0xa6a>
    1baa:	4905                	li	s2,1
    1bac:	09298b63          	beq	s3,s2,1c42 <matrix_test+0xa52>
    1bb0:	4f09                	li	t5,2
    1bb2:	07e98e63          	beq	s3,t5,1c2e <matrix_test+0xa3e>
    1bb6:	4b0d                	li	s6,3
    1bb8:	07698263          	beq	s3,s6,1c1c <matrix_test+0xa2c>
    1bbc:	4611                	li	a2,4
    1bbe:	04c98563          	beq	s3,a2,1c08 <matrix_test+0xa18>
    1bc2:	4e95                	li	t4,5
    1bc4:	03d98863          	beq	s3,t4,1bf4 <matrix_test+0xa04>
    1bc8:	4319                	li	t1,6
    1bca:	00698b63          	beq	s3,t1,1be0 <matrix_test+0x9f0>
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bce:	00079a03          	lh	s4,0(a5)
    1bd2:	00029583          	lh	a1,0(t0)
                    for (j=0; j<N; j++) {
    1bd6:	0789                	addi	a5,a5,2
    1bd8:	00228713          	addi	a4,t0,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bdc:	02ba06bb          	mulw	a3,s4,a1
    1be0:	00079d03          	lh	s10,0(a5)
    1be4:	00071803          	lh	a6,0(a4)
                    for (j=0; j<N; j++) {
    1be8:	0789                	addi	a5,a5,2
    1bea:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1bec:	030d08bb          	mulw	a7,s10,a6
    1bf0:	00d886bb          	addw	a3,a7,a3
    1bf4:	00079083          	lh	ra,0(a5)
    1bf8:	00071a83          	lh	s5,0(a4)
                    for (j=0; j<N; j++) {
    1bfc:	0789                	addi	a5,a5,2
    1bfe:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c00:	03508e3b          	mulw	t3,ra,s5
    1c04:	00de06bb          	addw	a3,t3,a3
    1c08:	00079c83          	lh	s9,0(a5)
    1c0c:	00071983          	lh	s3,0(a4)
                    for (j=0; j<N; j++) {
    1c10:	0789                	addi	a5,a5,2
    1c12:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c14:	033c893b          	mulw	s2,s9,s3
    1c18:	00d906bb          	addw	a3,s2,a3
    1c1c:	00079f03          	lh	t5,0(a5)
    1c20:	00071b03          	lh	s6,0(a4)
                    for (j=0; j<N; j++) {
    1c24:	0789                	addi	a5,a5,2
    1c26:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c28:	036f063b          	mulw	a2,t5,s6
    1c2c:	9eb1                	addw	a3,a3,a2
    1c2e:	00079e83          	lh	t4,0(a5)
    1c32:	00071303          	lh	t1,0(a4)
                    for (j=0; j<N; j++) {
    1c36:	0789                	addi	a5,a5,2
    1c38:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c3a:	026e8a3b          	mulw	s4,t4,t1
    1c3e:	00da06bb          	addw	a3,s4,a3
    1c42:	00079d03          	lh	s10,0(a5)
    1c46:	00071583          	lh	a1,0(a4)
                    for (j=0; j<N; j++) {
    1c4a:	0709                	addi	a4,a4,2
    1c4c:	0789                	addi	a5,a5,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c4e:	02bd083b          	mulw	a6,s10,a1
    1c52:	00d806bb          	addw	a3,a6,a3
                    for (j=0; j<N; j++) {
    1c56:	08770663          	beq	a4,t2,1ce2 <matrix_test+0xaf2>
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1c5a:	00071a83          	lh	s5,0(a4)
    1c5e:	00079083          	lh	ra,0(a5)
    1c62:	00279d03          	lh	s10,2(a5)
    1c66:	00271f03          	lh	t5,2(a4)
    1c6a:	035080bb          	mulw	ra,ra,s5
    1c6e:	00479303          	lh	t1,4(a5)
    1c72:	00471c83          	lh	s9,4(a4)
    1c76:	00679883          	lh	a7,6(a5)
    1c7a:	00671b03          	lh	s6,6(a4)
    1c7e:	00879803          	lh	a6,8(a5)
    1c82:	00871a03          	lh	s4,8(a4)
    1c86:	00a79583          	lh	a1,10(a5)
    1c8a:	00a71983          	lh	s3,10(a4)
    1c8e:	00c79603          	lh	a2,12(a5)
    1c92:	03ed0abb          	mulw	s5,s10,t5
    1c96:	00c71903          	lh	s2,12(a4)
    1c9a:	00e79e03          	lh	t3,14(a5)
    1c9e:	00e71e83          	lh	t4,14(a4)
    1ca2:	00d086bb          	addw	a3,ra,a3
                    for (j=0; j<N; j++) {
    1ca6:	0741                	addi	a4,a4,16
    1ca8:	07c1                	addi	a5,a5,16
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    1caa:	03930d3b          	mulw	s10,t1,s9
    1cae:	00da8f3b          	addw	t5,s5,a3
    1cb2:	0368833b          	mulw	t1,a7,s6
    1cb6:	01ed0cbb          	addw	s9,s10,t5
    1cba:	034808bb          	mulw	a7,a6,s4
    1cbe:	01930b3b          	addw	s6,t1,s9
    1cc2:	033580bb          	mulw	ra,a1,s3
    1cc6:	0168883b          	addw	a6,a7,s6
    1cca:	03260a3b          	mulw	s4,a2,s2
    1cce:	010089bb          	addw	s3,ra,a6
    1cd2:	03de05bb          	mulw	a1,t3,t4
    1cd6:	013a063b          	addw	a2,s4,s3
    1cda:	00c586bb          	addw	a3,a1,a2
                    for (j=0; j<N; j++) {
    1cde:	f6771ee3          	bne	a4,t2,1c5a <matrix_test+0xa6a>
    1ce2:	00dfa023          	sw	a3,0(t6) # ffffffffffff8000 <tohost+0xffffffff8fa78000>
            for (i=0; i<N; i++) {
    1ce6:	0f91                	addi	t6,t6,4
    1ce8:	9426                	add	s0,s0,s1
    1cea:	e9f51ee3          	bne	a0,t6,1b86 <matrix_test+0x996>
    1cee:	6a02                	ld	s4,0(sp)
                            if (tmp>clipval) {
    1cf0:	4586                	lw	a1,64(sp)
    1cf2:	409002b3          	neg	t0,s1
    1cf6:	00229893          	slli	a7,t0,0x2
    1cfa:	4401                	li	s0,0
    1cfc:	4e01                	li	t3,0
    1cfe:	4701                	li	a4,0
    1d00:	4801                	li	a6,0
                    for (j=0; j<N; j++) {
    1d02:	411003b3          	neg	t2,a7
    1d06:	ffc38d93          	addi	s11,t2,-4
    1d0a:	002dd913          	srli	s2,s11,0x2
    1d0e:	00190e93          	addi	t4,s2,1
    1d12:	003efa93          	andi	s5,t4,3
    1d16:	00a88333          	add	t1,a7,a0
    1d1a:	520a8863          	beqz	s5,224a <matrix_test+0x105a>
    1d1e:	4685                	li	a3,1
    1d20:	04da8a63          	beq	s5,a3,1d74 <matrix_test+0xb84>
    1d24:	4d09                	li	s10,2
    1d26:	03aa8563          	beq	s5,s10,1d50 <matrix_test+0xb60>
                            cur=C[i*N+j];
    1d2a:	8f72                	mv	t5,t3
    1d2c:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    1d30:	03041793          	slli	a5,s0,0x30
    1d34:	0307dc93          	srli	s9,a5,0x30
                            tmp+=cur;
    1d38:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    1d3c:	5ee5d263          	bge	a1,a4,2320 <matrix_test+0x1130>
                                    ret+=10;
    1d40:	00ac871b          	addiw	a4,s9,10
    1d44:	0107161b          	slliw	a2,a4,0x10
    1d48:	4106541b          	sraiw	s0,a2,0x10
                                    tmp=0;
    1d4c:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    1d4e:	0311                	addi	t1,t1,4
                            cur=C[i*N+j];
    1d50:	8ff2                	mv	t6,t3
    1d52:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    1d56:	1442                	slli	s0,s0,0x30
    1d58:	03045293          	srli	t0,s0,0x30
                            tmp+=cur;
    1d5c:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    1d60:	5ae5d763          	bge	a1,a4,230e <matrix_test+0x111e>
                                    ret+=10;
    1d64:	00a28e9b          	addiw	t4,t0,10
    1d68:	010e9a9b          	slliw	s5,t4,0x10
    1d6c:	410ad41b          	sraiw	s0,s5,0x10
                                    tmp=0;
    1d70:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    1d72:	0311                	addi	t1,t1,4
                            cur=C[i*N+j];
    1d74:	86f2                	mv	a3,t3
    1d76:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    1d7a:	03041d13          	slli	s10,s0,0x30
    1d7e:	030d5f13          	srli	t5,s10,0x30
                            tmp+=cur;
    1d82:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    1d86:	56e5d763          	bge	a1,a4,22f4 <matrix_test+0x1104>
                                    ret+=10;
    1d8a:	00af099b          	addiw	s3,t5,10
    1d8e:	03099713          	slli	a4,s3,0x30
    1d92:	01099f9b          	slliw	t6,s3,0x10
    1d96:	03075613          	srli	a2,a4,0x30
    1d9a:	410fd41b          	sraiw	s0,t6,0x10
                                    tmp=0;
    1d9e:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    1da0:	0311                	addi	t1,t1,4
    1da2:	4aa31463          	bne	t1,a0,224a <matrix_test+0x105a>
            for (i=0; i<N; i++) {
    1da6:	0805                	addi	a6,a6,1
    1da8:	01730533          	add	a0,t1,s7
    1dac:	f5049be3          	bne	s1,a6,1d02 <matrix_test+0xb12>
        crc=crcu8( (ee_u8) (newval)               ,crc);
    1db0:	0ff47f93          	andi	t6,s0,255
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    1db4:	00865593          	srli	a1,a2,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1db8:	01fa4db3          	xor	s11,s4,t6
                    if (x16 == 1)
    1dbc:	001df913          	andi	s2,s11,1
                    data >>= 1;
    1dc0:	001fde93          	srli	t4,t6,0x1
                    if (x16 == 1)
    1dc4:	001a5e13          	srli	t3,s4,0x1
    1dc8:	00090b63          	beqz	s2,1dde <matrix_test+0xbee>
                         crc |= 0x8000;
    1dcc:	7a69                	lui	s4,0xffffa
    1dce:	001a0a93          	addi	s5,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1dd2:	015e4d33          	xor	s10,t3,s5
    1dd6:	030d1693          	slli	a3,s10,0x30
    1dda:	0306de13          	srli	t3,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1dde:	01de4f33          	xor	t5,t3,t4
                    if (x16 == 1)
    1de2:	001f7c93          	andi	s9,t5,1
                    data >>= 1;
    1de6:	002fd713          	srli	a4,t6,0x2
                    if (x16 == 1)
    1dea:	001e5993          	srli	s3,t3,0x1
    1dee:	000c8b63          	beqz	s9,1e04 <matrix_test+0xc14>
                         crc |= 0x8000;
    1df2:	7b69                	lui	s6,0xffffa
    1df4:	001b0093          	addi	ra,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1df8:	0019c7b3          	xor	a5,s3,ra
    1dfc:	03079613          	slli	a2,a5,0x30
    1e00:	03065993          	srli	s3,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e04:	01374433          	xor	s0,a4,s3
                    if (x16 == 1)
    1e08:	00147293          	andi	t0,s0,1
                    data >>= 1;
    1e0c:	003fd393          	srli	t2,t6,0x3
                    if (x16 == 1)
    1e10:	0019d513          	srli	a0,s3,0x1
    1e14:	00028b63          	beqz	t0,1e2a <matrix_test+0xc3a>
                         crc |= 0x8000;
    1e18:	7369                	lui	t1,0xffffa
    1e1a:	00130893          	addi	a7,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1e1e:	01154bb3          	xor	s7,a0,a7
    1e22:	030b9813          	slli	a6,s7,0x30
    1e26:	03085513          	srli	a0,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e2a:	00754db3          	xor	s11,a0,t2
                    if (x16 == 1)
    1e2e:	001df913          	andi	s2,s11,1
                    data >>= 1;
    1e32:	004fde93          	srli	t4,t6,0x4
                    if (x16 == 1)
    1e36:	00155e13          	srli	t3,a0,0x1
    1e3a:	00090b63          	beqz	s2,1e50 <matrix_test+0xc60>
                         crc |= 0x8000;
    1e3e:	7a69                	lui	s4,0xffffa
    1e40:	001a0a93          	addi	s5,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1e44:	015e4d33          	xor	s10,t3,s5
    1e48:	030d1693          	slli	a3,s10,0x30
    1e4c:	0306de13          	srli	t3,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e50:	01de4f33          	xor	t5,t3,t4
                    if (x16 == 1)
    1e54:	001f7c93          	andi	s9,t5,1
                    data >>= 1;
    1e58:	005fd713          	srli	a4,t6,0x5
                    if (x16 == 1)
    1e5c:	001e5993          	srli	s3,t3,0x1
    1e60:	000c8b63          	beqz	s9,1e76 <matrix_test+0xc86>
                         crc |= 0x8000;
    1e64:	7b69                	lui	s6,0xffffa
    1e66:	001b0093          	addi	ra,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1e6a:	0019c7b3          	xor	a5,s3,ra
    1e6e:	03079613          	slli	a2,a5,0x30
    1e72:	03065993          	srli	s3,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e76:	01374433          	xor	s0,a4,s3
                    if (x16 == 1)
    1e7a:	00147293          	andi	t0,s0,1
                    data >>= 1;
    1e7e:	006fd393          	srli	t2,t6,0x6
                    if (x16 == 1)
    1e82:	0019d513          	srli	a0,s3,0x1
    1e86:	00028b63          	beqz	t0,1e9c <matrix_test+0xcac>
                         crc |= 0x8000;
    1e8a:	7369                	lui	t1,0xffffa
    1e8c:	00130893          	addi	a7,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1e90:	01154bb3          	xor	s7,a0,a7
    1e94:	030b9813          	slli	a6,s7,0x30
    1e98:	03085513          	srli	a0,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1e9c:	00a3cdb3          	xor	s11,t2,a0
                    if (x16 == 1)
    1ea0:	001df913          	andi	s2,s11,1
                    data >>= 1;
    1ea4:	007fdf93          	srli	t6,t6,0x7
                    if (x16 == 1)
    1ea8:	00155693          	srli	a3,a0,0x1
    1eac:	00090b63          	beqz	s2,1ec2 <matrix_test+0xcd2>
                         crc |= 0x8000;
    1eb0:	7ee9                	lui	t4,0xffffa
    1eb2:	001e8a13          	addi	s4,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1eb6:	0146cab3          	xor	s5,a3,s4
    1eba:	030a9d13          	slli	s10,s5,0x30
    1ebe:	030d5693          	srli	a3,s10,0x30
                    if (x16 == 1)
    1ec2:	0016fe13          	andi	t3,a3,1
    1ec6:	0016d093          	srli	ra,a3,0x1
    1eca:	01fe0b63          	beq	t3,t6,1ee0 <matrix_test+0xcf0>
                         crc |= 0x8000;
    1ece:	7f69                	lui	t5,0xffffa
    1ed0:	001f0c93          	addi	s9,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1ed4:	0190c733          	xor	a4,ra,s9
    1ed8:	03071b13          	slli	s6,a4,0x30
    1edc:	030b5093          	srli	ra,s6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1ee0:	0015c7b3          	xor	a5,a1,ra
                    if (x16 == 1)
    1ee4:	0017f993          	andi	s3,a5,1
                    data >>= 1;
    1ee8:	0015d613          	srli	a2,a1,0x1
                    if (x16 == 1)
    1eec:	0010d893          	srli	a7,ra,0x1
    1ef0:	00098b63          	beqz	s3,1f06 <matrix_test+0xd16>
                         crc |= 0x8000;
    1ef4:	7469                	lui	s0,0xffffa
    1ef6:	00140293          	addi	t0,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1efa:	0058c3b3          	xor	t2,a7,t0
    1efe:	03039313          	slli	t1,t2,0x30
    1f02:	03035893          	srli	a7,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f06:	01164bb3          	xor	s7,a2,a7
                    if (x16 == 1)
    1f0a:	001bf813          	andi	a6,s7,1
                    data >>= 1;
    1f0e:	0025d513          	srli	a0,a1,0x2
                    if (x16 == 1)
    1f12:	0018da13          	srli	s4,a7,0x1
    1f16:	00080b63          	beqz	a6,1f2c <matrix_test+0xd3c>
                         crc |= 0x8000;
    1f1a:	7de9                	lui	s11,0xffffa
    1f1c:	001d8913          	addi	s2,s11,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1f20:	012a4fb3          	xor	t6,s4,s2
    1f24:	030f9e93          	slli	t4,t6,0x30
    1f28:	030eda13          	srli	s4,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f2c:	00aa4ab3          	xor	s5,s4,a0
                    if (x16 == 1)
    1f30:	001afd13          	andi	s10,s5,1
                    data >>= 1;
    1f34:	0035de13          	srli	t3,a1,0x3
                    if (x16 == 1)
    1f38:	001a5b13          	srli	s6,s4,0x1
    1f3c:	000d0b63          	beqz	s10,1f52 <matrix_test+0xd62>
                         crc |= 0x8000;
    1f40:	76e9                	lui	a3,0xffffa
    1f42:	00168f13          	addi	t5,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1f46:	01eb4cb3          	xor	s9,s6,t5
    1f4a:	030c9713          	slli	a4,s9,0x30
    1f4e:	03075b13          	srli	s6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f52:	016e40b3          	xor	ra,t3,s6
                    if (x16 == 1)
    1f56:	0010f993          	andi	s3,ra,1
                    data >>= 1;
    1f5a:	0045d413          	srli	s0,a1,0x4
                    if (x16 == 1)
    1f5e:	001b5313          	srli	t1,s6,0x1
    1f62:	00098b63          	beqz	s3,1f78 <matrix_test+0xd88>
                         crc |= 0x8000;
    1f66:	7669                	lui	a2,0xffffa
    1f68:	00160293          	addi	t0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1f6c:	005347b3          	xor	a5,t1,t0
    1f70:	03079393          	slli	t2,a5,0x30
    1f74:	0303d313          	srli	t1,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f78:	006448b3          	xor	a7,s0,t1
                    if (x16 == 1)
    1f7c:	0018fb93          	andi	s7,a7,1
                    data >>= 1;
    1f80:	0055d813          	srli	a6,a1,0x5
                    if (x16 == 1)
    1f84:	00135e93          	srli	t4,t1,0x1
    1f88:	000b8b63          	beqz	s7,1f9e <matrix_test+0xdae>
                         crc |= 0x8000;
    1f8c:	7569                	lui	a0,0xffffa
    1f8e:	00150d93          	addi	s11,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1f92:	01bec933          	xor	s2,t4,s11
    1f96:	03091f93          	slli	t6,s2,0x30
    1f9a:	030fde93          	srli	t4,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1f9e:	01d84a33          	xor	s4,a6,t4
                    if (x16 == 1)
    1fa2:	001a7a93          	andi	s5,s4,1
                    data >>= 1;
    1fa6:	0065dd13          	srli	s10,a1,0x6
                    if (x16 == 1)
    1faa:	001edb13          	srli	s6,t4,0x1
    1fae:	000a8b63          	beqz	s5,1fc4 <matrix_test+0xdd4>
                         crc |= 0x8000;
    1fb2:	7e69                	lui	t3,0xffffa
    1fb4:	001e0693          	addi	a3,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1fb8:	00db4f33          	xor	t5,s6,a3
    1fbc:	030f1c93          	slli	s9,t5,0x30
    1fc0:	030cdb13          	srli	s6,s9,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    1fc4:	016d4733          	xor	a4,s10,s6
                    if (x16 == 1)
    1fc8:	00177093          	andi	ra,a4,1
                    data >>= 1;
    1fcc:	819d                	srli	a1,a1,0x7
                    if (x16 == 1)
    1fce:	001b5793          	srli	a5,s6,0x1
    1fd2:	00008b63          	beqz	ra,1fe8 <matrix_test+0xdf8>
                         crc |= 0x8000;
    1fd6:	79e9                	lui	s3,0xffffa
    1fd8:	00198413          	addi	s0,s3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1fdc:	0087c633          	xor	a2,a5,s0
    1fe0:	03061293          	slli	t0,a2,0x30
    1fe4:	0302d793          	srli	a5,t0,0x30
                    if (x16 == 1)
    1fe8:	0017d313          	srli	t1,a5,0x1
    1fec:	0017f393          	andi	t2,a5,1
    1ff0:	e01a                	sd	t1,0(sp)
    1ff2:	00b38c63          	beq	t2,a1,200a <matrix_test+0xe1a>
                         crc |= 0x8000;
    1ff6:	78e9                	lui	a7,0xffffa
    1ff8:	00188b93          	addi	s7,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    1ffc:	01734833          	xor	a6,t1,s7
    2000:	03081513          	slli	a0,a6,0x30
    2004:	03055d93          	srli	s11,a0,0x30
    2008:	e06e                	sd	s11,0(sp)
            for (i=0; i<N; i++) {
    200a:	4f81                	li	t6,0
    200c:	4801                	li	a6,0
    200e:	32048663          	beqz	s1,233a <matrix_test+0x114a>
    2012:	7962                	ld	s2,56(sp)
    2014:	00149413          	slli	s0,s1,0x1
                            C[i*N+j]=0;
    2018:	00249a13          	slli	s4,s1,0x2
    201c:	89ca                	mv	s3,s2
    201e:	ec52                	sd	s4,24(sp)
    2020:	9922                	add	s2,s2,s0
    2022:	4b81                	li	s7,0
            for (i=0; i<N; i++) {
    2024:	4c81                	li	s9,0
    2026:	f062                	sd	s8,32(sp)
                    for (j=0; j<N; j++) {
    2028:	6fa2                	ld	t6,8(sp)
    202a:	002b9c13          	slli	s8,s7,0x2
                            C[i*N+j]=0;
    202e:	8652                	mv	a2,s4
    2030:	01fc0533          	add	a0,s8,t6
    2034:	4581                	li	a1,0
    2036:	2db050ef          	jal	ra,7b10 <memset>
    203a:	6ec2                	ld	t4,16(sp)
    203c:	8f2a                	mv	t5,a0
                    for (j=0; j<N; j++) {
    203e:	4281                	li	t0,0
                            for(k=0;k<N;k++)
    2040:	41390ab3          	sub	s5,s2,s3
    2044:	ffea8d13          	addi	s10,s5,-2
    2048:	001d5e13          	srli	t3,s10,0x1
    204c:	001e0693          	addi	a3,t3,1
    2050:	0076fb13          	andi	s6,a3,7
    2054:	8776                	mv	a4,t4
    2056:	87ce                	mv	a5,s3
    2058:	4681                	li	a3,0
    205a:	0a0b0963          	beqz	s6,210c <matrix_test+0xf1c>
    205e:	4085                	li	ra,1
    2060:	081b0b63          	beq	s6,ra,20f6 <matrix_test+0xf06>
    2064:	4589                	li	a1,2
    2066:	06bb0e63          	beq	s6,a1,20e2 <matrix_test+0xef2>
    206a:	460d                	li	a2,3
    206c:	06cb0163          	beq	s6,a2,20ce <matrix_test+0xede>
    2070:	4391                	li	t2,4
    2072:	047b0563          	beq	s6,t2,20bc <matrix_test+0xecc>
    2076:	4315                	li	t1,5
    2078:	026b0863          	beq	s6,t1,20a8 <matrix_test+0xeb8>
    207c:	4899                	li	a7,6
    207e:	011b0c63          	beq	s6,a7,2096 <matrix_test+0xea6>
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2082:	00099803          	lh	a6,0(s3)
    2086:	000e9d83          	lh	s11,0(t4)
                            for(k=0;k<N;k++)
    208a:	00298793          	addi	a5,s3,2
    208e:	008e8733          	add	a4,t4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2092:	03b806bb          	mulw	a3,a6,s11
    2096:	00079c03          	lh	s8,0(a5)
    209a:	00071f83          	lh	t6,0(a4)
                            for(k=0;k<N;k++)
    209e:	0789                	addi	a5,a5,2
    20a0:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    20a2:	03fc053b          	mulw	a0,s8,t6
    20a6:	9ea9                	addw	a3,a3,a0
    20a8:	00079a83          	lh	s5,0(a5)
    20ac:	00071d03          	lh	s10,0(a4)
                            for(k=0;k<N;k++)
    20b0:	0789                	addi	a5,a5,2
    20b2:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    20b4:	03aa8e3b          	mulw	t3,s5,s10
    20b8:	00de06bb          	addw	a3,t3,a3
    20bc:	00079b03          	lh	s6,0(a5)
    20c0:	00071083          	lh	ra,0(a4)
                            for(k=0;k<N;k++)
    20c4:	0789                	addi	a5,a5,2
    20c6:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    20c8:	021b05bb          	mulw	a1,s6,ra
    20cc:	9ead                	addw	a3,a3,a1
    20ce:	00079603          	lh	a2,0(a5)
    20d2:	00071383          	lh	t2,0(a4)
                            for(k=0;k<N;k++)
    20d6:	0789                	addi	a5,a5,2
    20d8:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    20da:	0276033b          	mulw	t1,a2,t2
    20de:	00d306bb          	addw	a3,t1,a3
    20e2:	00079883          	lh	a7,0(a5)
    20e6:	00071803          	lh	a6,0(a4)
                            for(k=0;k<N;k++)
    20ea:	0789                	addi	a5,a5,2
    20ec:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    20ee:	03088dbb          	mulw	s11,a7,a6
    20f2:	00dd86bb          	addw	a3,s11,a3
    20f6:	00079c03          	lh	s8,0(a5)
    20fa:	00071f83          	lh	t6,0(a4)
                            for(k=0;k<N;k++)
    20fe:	0789                	addi	a5,a5,2
    2100:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2102:	03fc053b          	mulw	a0,s8,t6
    2106:	9ea9                	addw	a3,a3,a0
                            for(k=0;k<N;k++)
    2108:	0af90463          	beq	s2,a5,21b0 <matrix_test+0xfc0>
    210c:	00870ab3          	add	s5,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2110:	00079083          	lh	ra,0(a5)
    2114:	00071583          	lh	a1,0(a4)
    2118:	000a9e03          	lh	t3,0(s5)
                            for(k=0;k<N;k++)
    211c:	008a8d33          	add	s10,s5,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2120:	00279b03          	lh	s6,2(a5)
                            for(k=0;k<N;k++)
    2124:	008d03b3          	add	t2,s10,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2128:	00479883          	lh	a7,4(a5)
    212c:	000d1d03          	lh	s10,0(s10)
    2130:	02b08dbb          	mulw	s11,ra,a1
                            for(k=0;k<N;k++)
    2134:	00838633          	add	a2,t2,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2138:	00039c03          	lh	s8,0(t2)
    213c:	00679803          	lh	a6,6(a5)
                            for(k=0;k<N;k++)
    2140:	00860fb3          	add	t6,a2,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2144:	00879503          	lh	a0,8(a5)
    2148:	00061a83          	lh	s5,0(a2)
                            for(k=0;k<N;k++)
    214c:	008f8333          	add	t1,t6,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2150:	00a79083          	lh	ra,10(a5)
    2154:	000f9583          	lh	a1,0(t6)
    2158:	03cb0b3b          	mulw	s6,s6,t3
    215c:	00c79383          	lh	t2,12(a5)
                            for(k=0;k<N;k++)
    2160:	00830733          	add	a4,t1,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2164:	00031603          	lh	a2,0(t1)
    2168:	00e79f83          	lh	t6,14(a5)
    216c:	00071e03          	lh	t3,0(a4)
    2170:	00dd86bb          	addw	a3,s11,a3
                            for(k=0;k<N;k++)
    2174:	07c1                	addi	a5,a5,16
    2176:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2178:	03a888bb          	mulw	a7,a7,s10
    217c:	00db0d3b          	addw	s10,s6,a3
    2180:	0388083b          	mulw	a6,a6,s8
    2184:	01a88dbb          	addw	s11,a7,s10
    2188:	03550c3b          	mulw	s8,a0,s5
    218c:	01b8053b          	addw	a0,a6,s11
    2190:	02b08abb          	mulw	s5,ra,a1
    2194:	00ac00bb          	addw	ra,s8,a0
    2198:	02c385bb          	mulw	a1,t2,a2
    219c:	001a83bb          	addw	t2,s5,ra
    21a0:	03cf833b          	mulw	t1,t6,t3
    21a4:	00758b3b          	addw	s6,a1,t2
    21a8:	016306bb          	addw	a3,t1,s6
                            for(k=0;k<N;k++)
    21ac:	f6f910e3          	bne	s2,a5,210c <matrix_test+0xf1c>
    21b0:	00df2023          	sw	a3,0(t5)
                    for (j=0; j<N; j++) {
    21b4:	00128793          	addi	a5,t0,1
    21b8:	0f11                	addi	t5,t5,4
    21ba:	0e89                	addi	t4,t4,2
    21bc:	12f48363          	beq	s1,a5,22e2 <matrix_test+0x10f2>
    21c0:	82be                	mv	t0,a5
    21c2:	bdbd                	j	2040 <matrix_test+0xe50>
                                        ret += (cur>prev) ? 1 : 0;
    21c4:	00ce2e33          	slt	t3,t3,a2
                            cur=C[i*N+j];
    21c8:	00432683          	lw	a3,4(t1)
                                        ret += (cur>prev) ? 1 : 0;
    21cc:	005e03bb          	addw	t2,t3,t0
    21d0:	01039d9b          	slliw	s11,t2,0x10
    21d4:	410dda9b          	sraiw	s5,s11,0x10
                                    ret+=10;
    21d8:	030a9f13          	slli	t5,s5,0x30
                            tmp+=cur;
    21dc:	01a68cbb          	addw	s9,a3,s10
                    for (j=0; j<N; j++) {
    21e0:	0311                	addi	t1,t1,4
                                    ret+=10;
    21e2:	030f5793          	srli	a5,t5,0x30
                            if (tmp>clipval) {
    21e6:	0995dd63          	bge	a1,s9,2280 <matrix_test+0x1090>
                            cur=C[i*N+j];
    21ea:	00432403          	lw	s0,4(t1)
                                    ret+=10;
    21ee:	00a78f9b          	addiw	t6,a5,10
    21f2:	010f961b          	slliw	a2,t6,0x10
    21f6:	4106571b          	sraiw	a4,a2,0x10
                                    tmp=0;
    21fa:	4c81                	li	s9,0
                                    ret+=10;
    21fc:	03071293          	slli	t0,a4,0x30
                            tmp+=cur;
    2200:	019403bb          	addw	t2,s0,s9
                                    ret+=10;
    2204:	0302de13          	srli	t3,t0,0x30
                            if (tmp>clipval) {
    2208:	0875de63          	bge	a1,t2,22a4 <matrix_test+0x10b4>
                                    ret+=10;
    220c:	00ae0d1b          	addiw	s10,t3,10
                            cur=C[i*N+j];
    2210:	00832e03          	lw	t3,8(t1)
                                    ret+=10;
    2214:	010d169b          	slliw	a3,s10,0x10
    2218:	4106da9b          	sraiw	s5,a3,0x10
                                    tmp=0;
    221c:	4381                	li	t2,0
                                    ret+=10;
    221e:	030a9f13          	slli	t5,s5,0x30
                            tmp+=cur;
    2222:	007e073b          	addw	a4,t3,t2
                                    ret+=10;
    2226:	030f5c93          	srli	s9,t5,0x30
                            if (tmp>clipval) {
    222a:	08e5df63          	bge	a1,a4,22c8 <matrix_test+0x10d8>
                                    ret+=10;
    222e:	00ac8f9b          	addiw	t6,s9,10
    2232:	030f9293          	slli	t0,t6,0x30
    2236:	010f939b          	slliw	t2,t6,0x10
    223a:	0302d613          	srli	a2,t0,0x30
    223e:	4103d41b          	sraiw	s0,t2,0x10
                                    tmp=0;
    2242:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2244:	0331                	addi	t1,t1,12
    2246:	b6a300e3          	beq	t1,a0,1da6 <matrix_test+0xbb6>
                            cur=C[i*N+j];
    224a:	00032603          	lw	a2,0(t1)
                                    ret+=10;
    224e:	1442                	slli	s0,s0,0x30
    2250:	03045293          	srli	t0,s0,0x30
                            tmp+=cur;
    2254:	00e60d3b          	addw	s10,a2,a4
                            if (tmp>clipval) {
    2258:	f7a5d6e3          	bge	a1,s10,21c4 <matrix_test+0xfd4>
                            cur=C[i*N+j];
    225c:	00432683          	lw	a3,4(t1)
                                    ret+=10;
    2260:	00a2891b          	addiw	s2,t0,10
    2264:	01091e9b          	slliw	t4,s2,0x10
    2268:	410eda9b          	sraiw	s5,t4,0x10
                                    tmp=0;
    226c:	4d01                	li	s10,0
                                    ret+=10;
    226e:	030a9f13          	slli	t5,s5,0x30
                            tmp+=cur;
    2272:	01a68cbb          	addw	s9,a3,s10
                    for (j=0; j<N; j++) {
    2276:	0311                	addi	t1,t1,4
                                    ret+=10;
    2278:	030f5793          	srli	a5,t5,0x30
                            if (tmp>clipval) {
    227c:	f795c7e3          	blt	a1,s9,21ea <matrix_test+0xffa>
                                        ret += (cur>prev) ? 1 : 0;
    2280:	00d62b33          	slt	s6,a2,a3
                            cur=C[i*N+j];
    2284:	00432403          	lw	s0,4(t1)
                                        ret += (cur>prev) ? 1 : 0;
    2288:	00fb00bb          	addw	ra,s6,a5
    228c:	0100999b          	slliw	s3,ra,0x10
    2290:	4109d71b          	sraiw	a4,s3,0x10
                                    ret+=10;
    2294:	03071293          	slli	t0,a4,0x30
                            tmp+=cur;
    2298:	019403bb          	addw	t2,s0,s9
                                    ret+=10;
    229c:	0302de13          	srli	t3,t0,0x30
                            if (tmp>clipval) {
    22a0:	f675c6e3          	blt	a1,t2,220c <matrix_test+0x101c>
                                        ret += (cur>prev) ? 1 : 0;
    22a4:	0086adb3          	slt	s11,a3,s0
    22a8:	01cd893b          	addw	s2,s11,t3
                            cur=C[i*N+j];
    22ac:	00832e03          	lw	t3,8(t1)
                                        ret += (cur>prev) ? 1 : 0;
    22b0:	01091e9b          	slliw	t4,s2,0x10
    22b4:	410eda9b          	sraiw	s5,t4,0x10
                                    ret+=10;
    22b8:	030a9f13          	slli	t5,s5,0x30
                            tmp+=cur;
    22bc:	007e073b          	addw	a4,t3,t2
                                    ret+=10;
    22c0:	030f5c93          	srli	s9,t5,0x30
                            if (tmp>clipval) {
    22c4:	f6e5c5e3          	blt	a1,a4,222e <matrix_test+0x103e>
                                        ret += (cur>prev) ? 1 : 0;
    22c8:	01c427b3          	slt	a5,s0,t3
    22cc:	01978b3b          	addw	s6,a5,s9
    22d0:	030b1093          	slli	ra,s6,0x30
    22d4:	010b199b          	slliw	s3,s6,0x10
    22d8:	0300d613          	srli	a2,ra,0x30
    22dc:	4109d41b          	sraiw	s0,s3,0x10
    22e0:	b795                	j	2244 <matrix_test+0x1054>
            for (i=0; i<N; i++) {
    22e2:	001c8f13          	addi	t5,s9,1
    22e6:	99a2                	add	s3,s3,s0
    22e8:	9ba6                	add	s7,s7,s1
    22ea:	9922                	add	s2,s2,s0
    22ec:	49928ee3          	beq	t0,s9,2f88 <matrix_test+0x1d98>
    22f0:	8cfa                	mv	s9,t5
    22f2:	bb1d                	j	2028 <matrix_test+0xe38>
                                        ret += (cur>prev) ? 1 : 0;
    22f4:	01c6a7b3          	slt	a5,a3,t3
    22f8:	01e78cbb          	addw	s9,a5,t5
    22fc:	030c9b13          	slli	s6,s9,0x30
    2300:	010c909b          	slliw	ra,s9,0x10
    2304:	030b5613          	srli	a2,s6,0x30
    2308:	4100d41b          	sraiw	s0,ra,0x10
    230c:	bc51                	j	1da0 <matrix_test+0xbb0>
    230e:	01cfa3b3          	slt	t2,t6,t3
    2312:	00538dbb          	addw	s11,t2,t0
    2316:	010d991b          	slliw	s2,s11,0x10
    231a:	4109541b          	sraiw	s0,s2,0x10
    231e:	bc91                	j	1d72 <matrix_test+0xb82>
    2320:	01cf2b33          	slt	s6,t5,t3
    2324:	019b00bb          	addw	ra,s6,s9
    2328:	0100999b          	slliw	s3,ra,0x10
    232c:	4109d41b          	sraiw	s0,s3,0x10
    2330:	bc39                	j	1d4e <matrix_test+0xb5e>
        crc=crcu8( (ee_u8) (newval)               ,crc);
    2332:	0ff9f813          	andi	a6,s3,255
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    2336:	008bdf93          	srli	t6,s7,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    233a:	6d02                	ld	s10,0(sp)
                    data >>= 1;
    233c:	00185a93          	srli	s5,a6,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2340:	010d46b3          	xor	a3,s10,a6
                    if (x16 == 1)
    2344:	0016fd93          	andi	s11,a3,1
    2348:	001d5b13          	srli	s6,s10,0x1
    234c:	000d8b63          	beqz	s11,2362 <matrix_test+0x1172>
                         crc |= 0x8000;
    2350:	7e69                	lui	t3,0xffffa
    2352:	001e0093          	addi	ra,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2356:	001b43b3          	xor	t2,s6,ra
    235a:	03039713          	slli	a4,t2,0x30
    235e:	03075b13          	srli	s6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2362:	015b47b3          	xor	a5,s6,s5
                    if (x16 == 1)
    2366:	0017f313          	andi	t1,a5,1
                    data >>= 1;
    236a:	00285b93          	srli	s7,a6,0x2
                    if (x16 == 1)
    236e:	001b5293          	srli	t0,s6,0x1
    2372:	00030b63          	beqz	t1,2388 <matrix_test+0x1198>
                         crc |= 0x8000;
    2376:	7f69                	lui	t5,0xffffa
    2378:	001f0993          	addi	s3,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    237c:	0132c933          	xor	s2,t0,s3
    2380:	03091e93          	slli	t4,s2,0x30
    2384:	030ed293          	srli	t0,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2388:	0172c5b3          	xor	a1,t0,s7
                    if (x16 == 1)
    238c:	0015f893          	andi	a7,a1,1
                    data >>= 1;
    2390:	00385613          	srli	a2,a6,0x3
                    if (x16 == 1)
    2394:	0012dd13          	srli	s10,t0,0x1
    2398:	00088b63          	beqz	a7,23ae <matrix_test+0x11be>
                         crc |= 0x8000;
    239c:	7569                	lui	a0,0xffffa
    239e:	00150c93          	addi	s9,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    23a2:	019d4433          	xor	s0,s10,s9
    23a6:	03041a13          	slli	s4,s0,0x30
    23aa:	030a5d13          	srli	s10,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    23ae:	00cd46b3          	xor	a3,s10,a2
                    if (x16 == 1)
    23b2:	0016fd93          	andi	s11,a3,1
                    data >>= 1;
    23b6:	00485a93          	srli	s5,a6,0x4
                    if (x16 == 1)
    23ba:	001d5b13          	srli	s6,s10,0x1
    23be:	000d8b63          	beqz	s11,23d4 <matrix_test+0x11e4>
                         crc |= 0x8000;
    23c2:	7e69                	lui	t3,0xffffa
    23c4:	001e0093          	addi	ra,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    23c8:	001b43b3          	xor	t2,s6,ra
    23cc:	03039713          	slli	a4,t2,0x30
    23d0:	03075b13          	srli	s6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    23d4:	015b47b3          	xor	a5,s6,s5
                    if (x16 == 1)
    23d8:	0017f313          	andi	t1,a5,1
                    data >>= 1;
    23dc:	00585b93          	srli	s7,a6,0x5
                    if (x16 == 1)
    23e0:	001b5293          	srli	t0,s6,0x1
    23e4:	00030b63          	beqz	t1,23fa <matrix_test+0x120a>
                         crc |= 0x8000;
    23e8:	7f69                	lui	t5,0xffffa
    23ea:	001f0993          	addi	s3,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    23ee:	0132c933          	xor	s2,t0,s3
    23f2:	03091e93          	slli	t4,s2,0x30
    23f6:	030ed293          	srli	t0,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    23fa:	0172c5b3          	xor	a1,t0,s7
                    if (x16 == 1)
    23fe:	0015f893          	andi	a7,a1,1
                    data >>= 1;
    2402:	00685513          	srli	a0,a6,0x6
                    if (x16 == 1)
    2406:	0012dd13          	srli	s10,t0,0x1
    240a:	00088b63          	beqz	a7,2420 <matrix_test+0x1230>
                         crc |= 0x8000;
    240e:	7669                	lui	a2,0xffffa
    2410:	00160c93          	addi	s9,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2414:	019d4433          	xor	s0,s10,s9
    2418:	03041a13          	slli	s4,s0,0x30
    241c:	030a5d13          	srli	s10,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2420:	00ad46b3          	xor	a3,s10,a0
                    if (x16 == 1)
    2424:	0016fd93          	andi	s11,a3,1
                    data >>= 1;
    2428:	00785813          	srli	a6,a6,0x7
                    if (x16 == 1)
    242c:	001d5713          	srli	a4,s10,0x1
    2430:	000d8b63          	beqz	s11,2446 <matrix_test+0x1256>
                         crc |= 0x8000;
    2434:	7ae9                	lui	s5,0xffffa
    2436:	001a8e13          	addi	t3,s5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    243a:	01c740b3          	xor	ra,a4,t3
    243e:	03009393          	slli	t2,ra,0x30
    2442:	0303d713          	srli	a4,t2,0x30
                    if (x16 == 1)
    2446:	00177b13          	andi	s6,a4,1
    244a:	00175993          	srli	s3,a4,0x1
    244e:	010b0b63          	beq	s6,a6,2464 <matrix_test+0x1274>
                         crc |= 0x8000;
    2452:	77e9                	lui	a5,0xffffa
    2454:	00178313          	addi	t1,a5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2458:	0069cbb3          	xor	s7,s3,t1
    245c:	030b9f13          	slli	t5,s7,0x30
    2460:	030f5993          	srli	s3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2464:	013fc933          	xor	s2,t6,s3
                    if (x16 == 1)
    2468:	00197e93          	andi	t4,s2,1
                    data >>= 1;
    246c:	001fd293          	srli	t0,t6,0x1
                    if (x16 == 1)
    2470:	0019dc93          	srli	s9,s3,0x1
    2474:	000e8b63          	beqz	t4,248a <matrix_test+0x129a>
                         crc |= 0x8000;
    2478:	75e9                	lui	a1,0xffffa
    247a:	00158893          	addi	a7,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    247e:	011cc533          	xor	a0,s9,a7
    2482:	03051613          	slli	a2,a0,0x30
    2486:	03065c93          	srli	s9,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    248a:	005cc433          	xor	s0,s9,t0
                    if (x16 == 1)
    248e:	00147a13          	andi	s4,s0,1
                    data >>= 1;
    2492:	002fdd13          	srli	s10,t6,0x2
                    if (x16 == 1)
    2496:	001cde13          	srli	t3,s9,0x1
    249a:	000a0b63          	beqz	s4,24b0 <matrix_test+0x12c0>
                         crc |= 0x8000;
    249e:	76e9                	lui	a3,0xffffa
    24a0:	00168d93          	addi	s11,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    24a4:	01be4833          	xor	a6,t3,s11
    24a8:	03081a93          	slli	s5,a6,0x30
    24ac:	030ade13          	srli	t3,s5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    24b0:	01ae40b3          	xor	ra,t3,s10
                    if (x16 == 1)
    24b4:	0010f393          	andi	t2,ra,1
                    data >>= 1;
    24b8:	003fdb13          	srli	s6,t6,0x3
                    if (x16 == 1)
    24bc:	001e5f13          	srli	t5,t3,0x1
    24c0:	00038b63          	beqz	t2,24d6 <matrix_test+0x12e6>
                         crc |= 0x8000;
    24c4:	7769                	lui	a4,0xffffa
    24c6:	00170793          	addi	a5,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    24ca:	00ff4333          	xor	t1,t5,a5
    24ce:	03031b93          	slli	s7,t1,0x30
    24d2:	030bdf13          	srli	t5,s7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    24d6:	01eb49b3          	xor	s3,s6,t5
                    if (x16 == 1)
    24da:	0019f913          	andi	s2,s3,1
                    data >>= 1;
    24de:	004fde93          	srli	t4,t6,0x4
                    if (x16 == 1)
    24e2:	001f5613          	srli	a2,t5,0x1
    24e6:	00090b63          	beqz	s2,24fc <matrix_test+0x130c>
                         crc |= 0x8000;
    24ea:	72e9                	lui	t0,0xffffa
    24ec:	00128593          	addi	a1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    24f0:	00b648b3          	xor	a7,a2,a1
    24f4:	03089513          	slli	a0,a7,0x30
    24f8:	03055613          	srli	a2,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    24fc:	00ceccb3          	xor	s9,t4,a2
                    if (x16 == 1)
    2500:	001cfa13          	andi	s4,s9,1
                    data >>= 1;
    2504:	005fdd13          	srli	s10,t6,0x5
                    if (x16 == 1)
    2508:	00165a93          	srli	s5,a2,0x1
    250c:	000a0b63          	beqz	s4,2522 <matrix_test+0x1332>
                         crc |= 0x8000;
    2510:	76e9                	lui	a3,0xffffa
    2512:	00168d93          	addi	s11,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2516:	01bac433          	xor	s0,s5,s11
    251a:	03041813          	slli	a6,s0,0x30
    251e:	03085a93          	srli	s5,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2522:	015d4e33          	xor	t3,s10,s5
                    if (x16 == 1)
    2526:	001e7093          	andi	ra,t3,1
                    data >>= 1;
    252a:	006fd393          	srli	t2,t6,0x6
                    if (x16 == 1)
    252e:	001adb93          	srli	s7,s5,0x1
    2532:	00008b63          	beqz	ra,2548 <matrix_test+0x1358>
                         crc |= 0x8000;
    2536:	7b69                	lui	s6,0xffffa
    2538:	001b0713          	addi	a4,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    253c:	00ebc7b3          	xor	a5,s7,a4
    2540:	03079313          	slli	t1,a5,0x30
    2544:	03035b93          	srli	s7,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2548:	007bcf33          	xor	t5,s7,t2
                    if (x16 == 1)
    254c:	001f7993          	andi	s3,t5,1
                    data >>= 1;
    2550:	007fdf93          	srli	t6,t6,0x7
                    if (x16 == 1)
    2554:	001bd893          	srli	a7,s7,0x1
    2558:	00098b63          	beqz	s3,256e <matrix_test+0x137e>
                         crc |= 0x8000;
    255c:	7969                	lui	s2,0xffffa
    255e:	00190e93          	addi	t4,s2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2562:	01d8c2b3          	xor	t0,a7,t4
    2566:	03029593          	slli	a1,t0,0x30
    256a:	0305d893          	srli	a7,a1,0x30
                    if (x16 == 1)
    256e:	0018f513          	andi	a0,a7,1
    2572:	0018d413          	srli	s0,a7,0x1
    2576:	01f50b63          	beq	a0,t6,258c <matrix_test+0x139c>
                         crc |= 0x8000;
    257a:	7669                	lui	a2,0xffffa
    257c:	00160c93          	addi	s9,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2580:	01944a33          	xor	s4,s0,s9
    2584:	030a1d13          	slli	s10,s4,0x30
    2588:	030d5413          	srli	s0,s10,0x30
            for (i=0; i<N; i++) {
    258c:	4281                	li	t0,0
    258e:	4801                	li	a6,0
    2590:	1a048663          	beqz	s1,273c <matrix_test+0x154c>
    2594:	76e2                	ld	a3,56(sp)
    2596:	6ca2                	ld	s9,8(sp)
    2598:	6d42                	ld	s10,16(sp)
    259a:	00149913          	slli	s2,s1,0x1
    259e:	8a36                	mv	s4,a3
    25a0:	00d909b3          	add	s3,s2,a3
                            C[i*N+j]=0;
    25a4:	00249b93          	slli	s7,s1,0x2
    25a8:	4a81                	li	s5,0
            for (i=0; i<N; i++) {
    25aa:	4b01                	li	s6,0
                    for (j=0; j<N; j++) {
    25ac:	002a9d93          	slli	s11,s5,0x2
    25b0:	019d8533          	add	a0,s11,s9
                            C[i*N+j]=0;
    25b4:	865e                	mv	a2,s7
    25b6:	4581                	li	a1,0
    25b8:	558050ef          	jal	ra,7b10 <memset>
    25bc:	882a                	mv	a6,a0
    25be:	83ea                	mv	t2,s10
                    for (j=0; j<N; j++) {
    25c0:	4e81                	li	t4,0
                            for(k=0;k<N;k++)
    25c2:	41498e33          	sub	t3,s3,s4
    25c6:	ffee0093          	addi	ra,t3,-2
    25ca:	0010d713          	srli	a4,ra,0x1
    25ce:	00170793          	addi	a5,a4,1
    25d2:	0037f313          	andi	t1,a5,3
    25d6:	889e                	mv	a7,t2
    25d8:	86d2                	mv	a3,s4
    25da:	4e01                	li	t3,0
    25dc:	08030663          	beqz	t1,2668 <matrix_test+0x1478>
    25e0:	4f05                	li	t5,1
    25e2:	05e30d63          	beq	t1,t5,263c <matrix_test+0x144c>
    25e6:	4f89                	li	t6,2
    25e8:	03f30663          	beq	t1,t6,2614 <matrix_test+0x1424>
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    25ec:	000a1283          	lh	t0,0(s4)
    25f0:	00039583          	lh	a1,0(t2)
                            for(k=0;k<N;k++)
    25f4:	002a0693          	addi	a3,s4,2
    25f8:	012388b3          	add	a7,t2,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    25fc:	02b2863b          	mulw	a2,t0,a1
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2600:	40265d9b          	sraiw	s11,a2,0x2
    2604:	4056551b          	sraiw	a0,a2,0x5
    2608:	00fdfe13          	andi	t3,s11,15
    260c:	07f57093          	andi	ra,a0,127
    2610:	021e0e33          	mul	t3,t3,ra
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2614:	00069783          	lh	a5,0(a3)
    2618:	00089703          	lh	a4,0(a7)
                            for(k=0;k<N;k++)
    261c:	0689                	addi	a3,a3,2
    261e:	98ca                	add	a7,a7,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2620:	02e7833b          	mulw	t1,a5,a4
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2624:	40235f1b          	sraiw	t5,t1,0x2
    2628:	40535f9b          	sraiw	t6,t1,0x5
    262c:	00ff7293          	andi	t0,t5,15
    2630:	07fff593          	andi	a1,t6,127
    2634:	02b2863b          	mulw	a2,t0,a1
    2638:	01c60e3b          	addw	t3,a2,t3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    263c:	00069d83          	lh	s11,0(a3)
    2640:	00089503          	lh	a0,0(a7)
                            for(k=0;k<N;k++)
    2644:	0689                	addi	a3,a3,2
    2646:	98ca                	add	a7,a7,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2648:	02ad80bb          	mulw	ra,s11,a0
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    264c:	4020d71b          	sraiw	a4,ra,0x2
    2650:	4050d79b          	sraiw	a5,ra,0x5
    2654:	00f77313          	andi	t1,a4,15
    2658:	07f7ff13          	andi	t5,a5,127
    265c:	03e30fbb          	mulw	t6,t1,t5
    2660:	01cf8e3b          	addw	t3,t6,t3
                            for(k=0;k<N;k++)
    2664:	0b368463          	beq	a3,s3,270c <matrix_test+0x151c>
    2668:	012882b3          	add	t0,a7,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    266c:	00069603          	lh	a2,0(a3)
    2670:	00089d83          	lh	s11,0(a7)
                            for(k=0;k<N;k++)
    2674:	01228533          	add	a0,t0,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2678:	00269083          	lh	ra,2(a3)
    267c:	00029783          	lh	a5,0(t0)
    2680:	00469583          	lh	a1,4(a3)
                            for(k=0;k<N;k++)
    2684:	012508b3          	add	a7,a0,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2688:	00051303          	lh	t1,0(a0)
    268c:	03b6073b          	mulw	a4,a2,s11
    2690:	00669283          	lh	t0,6(a3)
    2694:	00089603          	lh	a2,0(a7)
                            for(k=0;k<N;k++)
    2698:	06a1                	addi	a3,a3,8
    269a:	98ca                	add	a7,a7,s2
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    269c:	02f08dbb          	mulw	s11,ra,a5
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    26a0:	40275f1b          	sraiw	t5,a4,0x2
    26a4:	4057509b          	sraiw	ra,a4,0x5
    26a8:	07f0f713          	andi	a4,ra,127
    26ac:	00ff7f93          	andi	t6,t5,15
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    26b0:	0265833b          	mulw	t1,a1,t1
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    26b4:	405dd79b          	sraiw	a5,s11,0x5
    26b8:	402dd51b          	sraiw	a0,s11,0x2
    26bc:	07f7f593          	andi	a1,a5,127
    26c0:	00f57d93          	andi	s11,a0,15
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    26c4:	02c2863b          	mulw	a2,t0,a2
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    26c8:	40535f1b          	sraiw	t5,t1,0x5
    26cc:	4023529b          	sraiw	t0,t1,0x2
    26d0:	00f2f093          	andi	ra,t0,15
    26d4:	07ff7313          	andi	t1,t5,127
    26d8:	02ef8fbb          	mulw	t6,t6,a4
    26dc:	4056551b          	sraiw	a0,a2,0x5
    26e0:	4026571b          	sraiw	a4,a2,0x2
    26e4:	00f77613          	andi	a2,a4,15
    26e8:	07f57293          	andi	t0,a0,127
    26ec:	02bd8dbb          	mulw	s11,s11,a1
    26f0:	01cf8e3b          	addw	t3,t6,t3
    26f4:	026087bb          	mulw	a5,ra,t1
    26f8:	01cd85bb          	addw	a1,s11,t3
    26fc:	02560f3b          	mulw	t5,a2,t0
    2700:	00b780bb          	addw	ra,a5,a1
    2704:	001f0e3b          	addw	t3,t5,ra
                            for(k=0;k<N;k++)
    2708:	f73690e3          	bne	a3,s3,2668 <matrix_test+0x1478>
    270c:	01c82023          	sw	t3,0(a6)
                    for (j=0; j<N; j++) {
    2710:	001e8893          	addi	a7,t4,1
    2714:	0811                	addi	a6,a6,4
    2716:	0389                	addi	t2,t2,2
    2718:	01148463          	beq	s1,a7,2720 <matrix_test+0x1530>
    271c:	8ec6                	mv	t4,a7
    271e:	b555                	j	25c2 <matrix_test+0x13d2>
            for (i=0; i<N; i++) {
    2720:	001b0813          	addi	a6,s6,1
    2724:	9a4a                	add	s4,s4,s2
    2726:	9aa6                	add	s5,s5,s1
    2728:	012689b3          	add	s3,a3,s2
    272c:	63db0963          	beq	s6,t4,2d5e <matrix_test+0x1b6e>
    2730:	8b42                	mv	s6,a6
    2732:	bdad                	j	25ac <matrix_test+0x13bc>
        crc=crcu8( (ee_u8) (newval)               ,crc);
    2734:	0fff7813          	andi	a6,t5,255
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    2738:	00895293          	srli	t0,s2,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    273c:	01044633          	xor	a2,s0,a6
                    if (x16 == 1)
    2740:	00167d93          	andi	s11,a2,1
                    data >>= 1;
    2744:	00185e13          	srli	t3,a6,0x1
                    if (x16 == 1)
    2748:	00145a93          	srli	s5,s0,0x1
    274c:	000d8b63          	beqz	s11,2762 <matrix_test+0x1572>
                         crc |= 0x8000;
    2750:	70e9                	lui	ra,0xffffa
    2752:	00108a13          	addi	s4,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2756:	014ac7b3          	xor	a5,s5,s4
    275a:	03079713          	slli	a4,a5,0x30
    275e:	03075a93          	srli	s5,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2762:	01cac9b3          	xor	s3,s5,t3
                    if (x16 == 1)
    2766:	0019ff13          	andi	t5,s3,1
                    data >>= 1;
    276a:	00285393          	srli	t2,a6,0x2
                    if (x16 == 1)
    276e:	001ad893          	srli	a7,s5,0x1
    2772:	000f0b63          	beqz	t5,2788 <matrix_test+0x1598>
                         crc |= 0x8000;
    2776:	7fe9                	lui	t6,0xffffa
    2778:	001f8313          	addi	t1,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    277c:	0068c433          	xor	s0,a7,t1
    2780:	03041593          	slli	a1,s0,0x30
    2784:	0305d893          	srli	a7,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2788:	0078cbb3          	xor	s7,a7,t2
                    if (x16 == 1)
    278c:	001bfe93          	andi	t4,s7,1
                    data >>= 1;
    2790:	00385693          	srli	a3,a6,0x3
                    if (x16 == 1)
    2794:	0018dd13          	srli	s10,a7,0x1
    2798:	000e8b63          	beqz	t4,27ae <matrix_test+0x15be>
                         crc |= 0x8000;
    279c:	7569                	lui	a0,0xffffa
    279e:	00150b13          	addi	s6,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    27a2:	016d4933          	xor	s2,s10,s6
    27a6:	03091c93          	slli	s9,s2,0x30
    27aa:	030cdd13          	srli	s10,s9,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27ae:	01a6c633          	xor	a2,a3,s10
                    if (x16 == 1)
    27b2:	00167d93          	andi	s11,a2,1
                    data >>= 1;
    27b6:	00485e13          	srli	t3,a6,0x4
                    if (x16 == 1)
    27ba:	001d5a93          	srli	s5,s10,0x1
    27be:	000d8b63          	beqz	s11,27d4 <matrix_test+0x15e4>
                         crc |= 0x8000;
    27c2:	70e9                	lui	ra,0xffffa
    27c4:	00108a13          	addi	s4,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    27c8:	014ac7b3          	xor	a5,s5,s4
    27cc:	03079713          	slli	a4,a5,0x30
    27d0:	03075a93          	srli	s5,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27d4:	01cac9b3          	xor	s3,s5,t3
                    if (x16 == 1)
    27d8:	0019ff13          	andi	t5,s3,1
                    data >>= 1;
    27dc:	00585393          	srli	t2,a6,0x5
                    if (x16 == 1)
    27e0:	001ad893          	srli	a7,s5,0x1
    27e4:	000f0b63          	beqz	t5,27fa <matrix_test+0x160a>
                         crc |= 0x8000;
    27e8:	7fe9                	lui	t6,0xffffa
    27ea:	001f8313          	addi	t1,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    27ee:	0068c433          	xor	s0,a7,t1
    27f2:	03041593          	slli	a1,s0,0x30
    27f6:	0305d893          	srli	a7,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    27fa:	0078cbb3          	xor	s7,a7,t2
                    if (x16 == 1)
    27fe:	001bfe93          	andi	t4,s7,1
                    data >>= 1;
    2802:	00685693          	srli	a3,a6,0x6
                    if (x16 == 1)
    2806:	0018dd13          	srli	s10,a7,0x1
    280a:	000e8b63          	beqz	t4,2820 <matrix_test+0x1630>
                         crc |= 0x8000;
    280e:	7569                	lui	a0,0xffffa
    2810:	00150b13          	addi	s6,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2814:	016d4933          	xor	s2,s10,s6
    2818:	03091c93          	slli	s9,s2,0x30
    281c:	030cdd13          	srli	s10,s9,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2820:	00dd4633          	xor	a2,s10,a3
                    if (x16 == 1)
    2824:	00167d93          	andi	s11,a2,1
                    data >>= 1;
    2828:	00785813          	srli	a6,a6,0x7
                    if (x16 == 1)
    282c:	001d5713          	srli	a4,s10,0x1
    2830:	000d8b63          	beqz	s11,2846 <matrix_test+0x1656>
                         crc |= 0x8000;
    2834:	7e69                	lui	t3,0xffffa
    2836:	001e0093          	addi	ra,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    283a:	00174a33          	xor	s4,a4,ra
    283e:	030a1793          	slli	a5,s4,0x30
    2842:	0307d713          	srli	a4,a5,0x30
                    if (x16 == 1)
    2846:	00177a93          	andi	s5,a4,1
    284a:	00175313          	srli	t1,a4,0x1
    284e:	010a8b63          	beq	s5,a6,2864 <matrix_test+0x1674>
                         crc |= 0x8000;
    2852:	79e9                	lui	s3,0xffffa
    2854:	00198f13          	addi	t5,s3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2858:	01e343b3          	xor	t2,t1,t5
    285c:	03039f93          	slli	t6,t2,0x30
    2860:	030fd313          	srli	t1,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2864:	0062c433          	xor	s0,t0,t1
                    if (x16 == 1)
    2868:	00147593          	andi	a1,s0,1
                    data >>= 1;
    286c:	0012d893          	srli	a7,t0,0x1
                    if (x16 == 1)
    2870:	00135b13          	srli	s6,t1,0x1
    2874:	c991                	beqz	a1,2888 <matrix_test+0x1698>
                         crc |= 0x8000;
    2876:	7be9                	lui	s7,0xffffa
    2878:	001b8e93          	addi	t4,s7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    287c:	01db46b3          	xor	a3,s6,t4
    2880:	03069513          	slli	a0,a3,0x30
    2884:	03055b13          	srli	s6,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2888:	011b4933          	xor	s2,s6,a7
                    if (x16 == 1)
    288c:	00197c93          	andi	s9,s2,1
                    data >>= 1;
    2890:	0022dd13          	srli	s10,t0,0x2
                    if (x16 == 1)
    2894:	001b5093          	srli	ra,s6,0x1
    2898:	000c8b63          	beqz	s9,28ae <matrix_test+0x16be>
                         crc |= 0x8000;
    289c:	7669                	lui	a2,0xffffa
    289e:	00160d93          	addi	s11,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    28a2:	01b0c833          	xor	a6,ra,s11
    28a6:	03081e13          	slli	t3,a6,0x30
    28aa:	030e5093          	srli	ra,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28ae:	001d4a33          	xor	s4,s10,ra
                    if (x16 == 1)
    28b2:	001a7713          	andi	a4,s4,1
                    data >>= 1;
    28b6:	0032da93          	srli	s5,t0,0x3
                    if (x16 == 1)
    28ba:	0010df93          	srli	t6,ra,0x1
    28be:	cb11                	beqz	a4,28d2 <matrix_test+0x16e2>
                         crc |= 0x8000;
    28c0:	79e9                	lui	s3,0xffffa
    28c2:	00198f13          	addi	t5,s3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    28c6:	01efc7b3          	xor	a5,t6,t5
    28ca:	03079393          	slli	t2,a5,0x30
    28ce:	0303df93          	srli	t6,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28d2:	01fac333          	xor	t1,s5,t6
                    if (x16 == 1)
    28d6:	00137413          	andi	s0,t1,1
                    data >>= 1;
    28da:	0042d593          	srli	a1,t0,0x4
                    if (x16 == 1)
    28de:	001fd513          	srli	a0,t6,0x1
    28e2:	c811                	beqz	s0,28f6 <matrix_test+0x1706>
                         crc |= 0x8000;
    28e4:	78e9                	lui	a7,0xffffa
    28e6:	00188b93          	addi	s7,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    28ea:	01754eb3          	xor	t4,a0,s7
    28ee:	030e9693          	slli	a3,t4,0x30
    28f2:	0306d513          	srli	a0,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    28f6:	00a5cb33          	xor	s6,a1,a0
                    if (x16 == 1)
    28fa:	001b7913          	andi	s2,s6,1
                    data >>= 1;
    28fe:	0052dc93          	srli	s9,t0,0x5
                    if (x16 == 1)
    2902:	00155e13          	srli	t3,a0,0x1
    2906:	00090b63          	beqz	s2,291c <matrix_test+0x172c>
                         crc |= 0x8000;
    290a:	7d69                	lui	s10,0xffffa
    290c:	001d0613          	addi	a2,s10,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2910:	00ce4db3          	xor	s11,t3,a2
    2914:	030d9813          	slli	a6,s11,0x30
    2918:	03085e13          	srli	t3,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    291c:	019e40b3          	xor	ra,t3,s9
                    if (x16 == 1)
    2920:	0010fa13          	andi	s4,ra,1
                    data >>= 1;
    2924:	0062d713          	srli	a4,t0,0x6
                    if (x16 == 1)
    2928:	001e5393          	srli	t2,t3,0x1
    292c:	000a0b63          	beqz	s4,2942 <matrix_test+0x1752>
                         crc |= 0x8000;
    2930:	7ae9                	lui	s5,0xffffa
    2932:	001a8993          	addi	s3,s5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    2936:	0133cf33          	xor	t5,t2,s3
    293a:	030f1793          	slli	a5,t5,0x30
    293e:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    2942:	00e3cfb3          	xor	t6,t2,a4
                    if (x16 == 1)
    2946:	001ff313          	andi	t1,t6,1
                    data >>= 1;
    294a:	0072d293          	srli	t0,t0,0x7
                    if (x16 == 1)
    294e:	0013de93          	srli	t4,t2,0x1
    2952:	00030b63          	beqz	t1,2968 <matrix_test+0x1778>
                         crc |= 0x8000;
    2956:	7469                	lui	s0,0xffffa
    2958:	00140593          	addi	a1,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    295c:	00bec8b3          	xor	a7,t4,a1
    2960:	03089b93          	slli	s7,a7,0x30
    2964:	030bde93          	srli	t4,s7,0x30
                    if (x16 == 1)
    2968:	001ed513          	srli	a0,t4,0x1
    296c:	001ef693          	andi	a3,t4,1
    2970:	f02a                	sd	a0,32(sp)
    2972:	00568c63          	beq	a3,t0,298a <matrix_test+0x179a>
                         crc |= 0x8000;
    2976:	7b69                	lui	s6,0xffffa
    2978:	001b0913          	addi	s2,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    297c:	01254cb3          	xor	s9,a0,s2
    2980:	030c9d13          	slli	s10,s9,0x30
    2984:	030d5613          	srli	a2,s10,0x30
    2988:	f032                	sd	a2,32(sp)
            for (i=0; i<N; i++) {
    298a:	3a048963          	beqz	s1,2d3c <matrix_test+0x1b4c>
    298e:	010c1d93          	slli	s11,s8,0x10
    2992:	020c1813          	slli	a6,s8,0x20
    2996:	01bc6e33          	or	t3,s8,s11
    299a:	60a5                	lui	ra,0x9
    299c:	010e6733          	or	a4,t3,a6
                            A[i*N+j] += val;
    29a0:	8500b783          	ld	a5,-1968(ra) # 8850 <_end>
    29a4:	7e62                	ld	t3,56(sp)
    29a6:	030c1a13          	slli	s4,s8,0x30
    29aa:	6aa5                	lui	s5,0x9
    29ac:	01476633          	or	a2,a4,s4
    29b0:	858ab703          	ld	a4,-1960(s5) # 8858 <_end+0x8>
    29b4:	00149993          	slli	s3,s1,0x1
    29b8:	fff48f13          	addi	t5,s1,-1
    29bc:	e44e                	sd	s3,8(sp)
    29be:	88f2                	mv	a7,t3
            for (i=0; i<N; i++) {
    29c0:	4801                	li	a6,0
    29c2:	4901                	li	s2,0
    29c4:	e87a                	sd	t5,16(sp)
                            A[i*N+j] += val;
    29c6:	00f675b3          	and	a1,a2,a5
                    for (j=0; j<N; j++) {
    29ca:	0018d393          	srli	t2,a7,0x1
    29ce:	40700fb3          	neg	t6,t2
    29d2:	003ff293          	andi	t0,t6,3
    29d6:	00328413          	addi	s0,t0,3
    29da:	4315                	li	t1,5
    29dc:	00647363          	bgeu	s0,t1,29e2 <matrix_test+0x17f2>
    29e0:	4415                	li	s0,5
    29e2:	6bc2                	ld	s7,16(sp)
    29e4:	7c8be963          	bltu	s7,s0,31b6 <matrix_test+0x1fc6>
    29e8:	4681                	li	a3,0
    29ea:	02028c63          	beqz	t0,2a22 <matrix_test+0x1832>
                            A[i*N+j] += val;
    29ee:	0008de83          	lhu	t4,0(a7)
                    for (j=0; j<N; j++) {
    29f2:	4685                	li	a3,1
                            A[i*N+j] += val;
    29f4:	418e853b          	subw	a0,t4,s8
    29f8:	00a89023          	sh	a0,0(a7)
                    for (j=0; j<N; j++) {
    29fc:	02d28363          	beq	t0,a3,2a22 <matrix_test+0x1832>
                            A[i*N+j] += val;
    2a00:	0028db03          	lhu	s6,2(a7)
    2a04:	4c8d                	li	s9,3
                    for (j=0; j<N; j++) {
    2a06:	4689                	li	a3,2
                            A[i*N+j] += val;
    2a08:	418b0d3b          	subw	s10,s6,s8
    2a0c:	01a89123          	sh	s10,2(a7)
                    for (j=0; j<N; j++) {
    2a10:	01929963          	bne	t0,s9,2a22 <matrix_test+0x1832>
                            A[i*N+j] += val;
    2a14:	0048dd83          	lhu	s11,4(a7)
                    for (j=0; j<N; j++) {
    2a18:	468d                	li	a3,3
                            A[i*N+j] += val;
    2a1a:	418d80bb          	subw	ra,s11,s8
    2a1e:	00189223          	sh	ra,4(a7)
                    for (j=0; j<N; j++) {
    2a22:	40548cb3          	sub	s9,s1,t0
    2a26:	002cda13          	srli	s4,s9,0x2
    2a2a:	003a1a93          	slli	s5,s4,0x3
    2a2e:	01028f33          	add	t5,t0,a6
    2a32:	ff8a8993          	addi	s3,s5,-8
    2a36:	001f1793          	slli	a5,t5,0x1
    2a3a:	0039d393          	srli	t2,s3,0x3
    2a3e:	97f2                	add	a5,a5,t3
    2a40:	00138f93          	addi	t6,t2,1
    2a44:	00fa8333          	add	t1,s5,a5
    2a48:	007ff293          	andi	t0,t6,7
    2a4c:	e01a                	sd	t1,0(sp)
    2a4e:	10028e63          	beqz	t0,2b6a <matrix_test+0x197a>
    2a52:	4405                	li	s0,1
    2a54:	0e828763          	beq	t0,s0,2b42 <matrix_test+0x1952>
    2a58:	4b89                	li	s7,2
    2a5a:	0d728363          	beq	t0,s7,2b20 <matrix_test+0x1930>
    2a5e:	4e8d                	li	t4,3
    2a60:	09d28f63          	beq	t0,t4,2afe <matrix_test+0x190e>
    2a64:	4511                	li	a0,4
    2a66:	06a28b63          	beq	t0,a0,2adc <matrix_test+0x18ec>
    2a6a:	4b15                	li	s6,5
    2a6c:	05628763          	beq	t0,s6,2aba <matrix_test+0x18ca>
    2a70:	4d19                	li	s10,6
    2a72:	03a28363          	beq	t0,s10,2a98 <matrix_test+0x18a8>
                            A[i*N+j] += val;
    2a76:	0007bd83          	ld	s11,0(a5)
    2a7a:	07a1                	addi	a5,a5,8
    2a7c:	00cdc0b3          	xor	ra,s11,a2
    2a80:	fff0ca13          	not	s4,ra
    2a84:	00edeab3          	or	s5,s11,a4
    2a88:	00ea79b3          	and	s3,s4,a4
    2a8c:	40ba8f33          	sub	t5,s5,a1
    2a90:	01e9c3b3          	xor	t2,s3,t5
    2a94:	fe77bc23          	sd	t2,-8(a5)
    2a98:	0007bf83          	ld	t6,0(a5)
    2a9c:	07a1                	addi	a5,a5,8
    2a9e:	00cfc2b3          	xor	t0,t6,a2
    2aa2:	fff2c413          	not	s0,t0
    2aa6:	00efe333          	or	t1,t6,a4
    2aaa:	00e47bb3          	and	s7,s0,a4
    2aae:	40b30eb3          	sub	t4,t1,a1
    2ab2:	01dbc533          	xor	a0,s7,t4
    2ab6:	fea7bc23          	sd	a0,-8(a5)
    2aba:	0007bb03          	ld	s6,0(a5)
    2abe:	07a1                	addi	a5,a5,8
    2ac0:	00cb4d33          	xor	s10,s6,a2
    2ac4:	fffd4d93          	not	s11,s10
    2ac8:	00eb60b3          	or	ra,s6,a4
    2acc:	00edfa33          	and	s4,s11,a4
    2ad0:	40b08ab3          	sub	s5,ra,a1
    2ad4:	015a49b3          	xor	s3,s4,s5
    2ad8:	ff37bc23          	sd	s3,-8(a5)
    2adc:	0007bf03          	ld	t5,0(a5)
    2ae0:	07a1                	addi	a5,a5,8
    2ae2:	00cf43b3          	xor	t2,t5,a2
    2ae6:	fff3cf93          	not	t6,t2
    2aea:	00ef62b3          	or	t0,t5,a4
    2aee:	00eff433          	and	s0,t6,a4
    2af2:	40b28333          	sub	t1,t0,a1
    2af6:	00644bb3          	xor	s7,s0,t1
    2afa:	ff77bc23          	sd	s7,-8(a5)
    2afe:	0007be83          	ld	t4,0(a5)
    2b02:	07a1                	addi	a5,a5,8
    2b04:	00cec533          	xor	a0,t4,a2
    2b08:	fff54b13          	not	s6,a0
    2b0c:	00eeed33          	or	s10,t4,a4
    2b10:	00eb7db3          	and	s11,s6,a4
    2b14:	40bd00b3          	sub	ra,s10,a1
    2b18:	001dca33          	xor	s4,s11,ra
    2b1c:	ff47bc23          	sd	s4,-8(a5)
    2b20:	0007ba83          	ld	s5,0(a5)
    2b24:	07a1                	addi	a5,a5,8
    2b26:	00cac9b3          	xor	s3,s5,a2
    2b2a:	fff9cf13          	not	t5,s3
    2b2e:	00eae3b3          	or	t2,s5,a4
    2b32:	00ef7fb3          	and	t6,t5,a4
    2b36:	40b382b3          	sub	t0,t2,a1
    2b3a:	005fc433          	xor	s0,t6,t0
    2b3e:	fe87bc23          	sd	s0,-8(a5)
    2b42:	0007b303          	ld	t1,0(a5)
    2b46:	6082                	ld	ra,0(sp)
    2b48:	07a1                	addi	a5,a5,8
    2b4a:	00c34bb3          	xor	s7,t1,a2
    2b4e:	fffbce93          	not	t4,s7
    2b52:	00e36b33          	or	s6,t1,a4
    2b56:	00eef533          	and	a0,t4,a4
    2b5a:	40bb0d33          	sub	s10,s6,a1
    2b5e:	01a54db3          	xor	s11,a0,s10
    2b62:	ffb7bc23          	sd	s11,-8(a5)
                    for (j=0; j<N; j++) {
    2b66:	10178563          	beq	a5,ra,2c70 <matrix_test+0x1a80>
    2b6a:	ec4a                	sd	s2,24(sp)
                            A[i*N+j] += val;
    2b6c:	0007bf03          	ld	t5,0(a5)
    2b70:	0087be83          	ld	t4,8(a5)
    2b74:	6f88                	ld	a0,24(a5)
    2b76:	0107b303          	ld	t1,16(a5)
    2b7a:	0207ba03          	ld	s4,32(a5)
    2b7e:	0287b983          	ld	s3,40(a5)
    2b82:	0307b903          	ld	s2,48(a5)
    2b86:	0387bd83          	ld	s11,56(a5)
    2b8a:	00cf4d33          	xor	s10,t5,a2
    2b8e:	00cecbb3          	xor	s7,t4,a2
    2b92:	00c54ab3          	xor	s5,a0,a2
    2b96:	00c34b33          	xor	s6,t1,a2
    2b9a:	00ca4433          	xor	s0,s4,a2
    2b9e:	00c9c3b3          	xor	t2,s3,a2
    2ba2:	00c942b3          	xor	t0,s2,a2
    2ba6:	00cdcfb3          	xor	t6,s11,a2
    2baa:	fffd4093          	not	ra,s10
    2bae:	00ef6f33          	or	t5,t5,a4
    2bb2:	fffbcb93          	not	s7,s7
    2bb6:	00eeeeb3          	or	t4,t4,a4
    2bba:	fffaca93          	not	s5,s5
    2bbe:	8d59                	or	a0,a0,a4
    2bc0:	00e0fd33          	and	s10,ra,a4
    2bc4:	00ebfbb3          	and	s7,s7,a4
    2bc8:	40bf00b3          	sub	ra,t5,a1
    2bcc:	40be8eb3          	sub	t4,t4,a1
    2bd0:	00eafab3          	and	s5,s5,a4
    2bd4:	8d0d                	sub	a0,a0,a1
    2bd6:	fffb4b13          	not	s6,s6
    2bda:	00e36333          	or	t1,t1,a4
    2bde:	fff44413          	not	s0,s0
    2be2:	00ea6a33          	or	s4,s4,a4
    2be6:	fff3c393          	not	t2,t2
    2bea:	00e9e9b3          	or	s3,s3,a4
    2bee:	fff2c293          	not	t0,t0
    2bf2:	00e96933          	or	s2,s2,a4
    2bf6:	ffffcf93          	not	t6,t6
    2bfa:	00ededb3          	or	s11,s11,a4
    2bfe:	001d4f33          	xor	t5,s10,ra
    2c02:	00eb7b33          	and	s6,s6,a4
    2c06:	01dbcd33          	xor	s10,s7,t4
    2c0a:	40b30333          	sub	t1,t1,a1
    2c0e:	00aacbb3          	xor	s7,s5,a0
    2c12:	8c79                	and	s0,s0,a4
    2c14:	40ba0a33          	sub	s4,s4,a1
    2c18:	00e3f3b3          	and	t2,t2,a4
    2c1c:	40b989b3          	sub	s3,s3,a1
    2c20:	00e2f2b3          	and	t0,t0,a4
    2c24:	40b90933          	sub	s2,s2,a1
    2c28:	00efffb3          	and	t6,t6,a4
    2c2c:	40bd8db3          	sub	s11,s11,a1
    2c30:	6502                	ld	a0,0(sp)
    2c32:	006b40b3          	xor	ra,s6,t1
    2c36:	01444eb3          	xor	t4,s0,s4
    2c3a:	0133cb33          	xor	s6,t2,s3
    2c3e:	0122c333          	xor	t1,t0,s2
    2c42:	01bfcab3          	xor	s5,t6,s11
    2c46:	01e7b023          	sd	t5,0(a5)
    2c4a:	01a7b423          	sd	s10,8(a5)
    2c4e:	0017b823          	sd	ra,16(a5)
    2c52:	0177bc23          	sd	s7,24(a5)
    2c56:	03d7b023          	sd	t4,32(a5)
    2c5a:	0367b423          	sd	s6,40(a5)
    2c5e:	0267b823          	sd	t1,48(a5)
    2c62:	0357bc23          	sd	s5,56(a5)
                    for (j=0; j<N; j++) {
    2c66:	04078793          	addi	a5,a5,64
    2c6a:	f0a791e3          	bne	a5,a0,2b6c <matrix_test+0x197c>
    2c6e:	6962                	ld	s2,24(sp)
    2c70:	ffccf793          	andi	a5,s9,-4
    2c74:	96be                	add	a3,a3,a5
    2c76:	0b978d63          	beq	a5,s9,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2c7a:	01068cb3          	add	s9,a3,a6
    2c7e:	001c9413          	slli	s0,s9,0x1
    2c82:	008e0a33          	add	s4,t3,s0
    2c86:	000a5383          	lhu	t2,0(s4)
                    for (j=0; j<N; j++) {
    2c8a:	00168993          	addi	s3,a3,1
                            A[i*N+j] += val;
    2c8e:	418382bb          	subw	t0,t2,s8
    2c92:	005a1023          	sh	t0,0(s4)
                    for (j=0; j<N; j++) {
    2c96:	0899fd63          	bgeu	s3,s1,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2c9a:	01098fb3          	add	t6,s3,a6
    2c9e:	001f9d93          	slli	s11,t6,0x1
    2ca2:	01be0f33          	add	t5,t3,s11
    2ca6:	000f5d03          	lhu	s10,0(t5)
                    for (j=0; j<N; j++) {
    2caa:	00268093          	addi	ra,a3,2
                            A[i*N+j] += val;
    2cae:	418d0bbb          	subw	s7,s10,s8
    2cb2:	017f1023          	sh	s7,0(t5)
                    for (j=0; j<N; j++) {
    2cb6:	0690fd63          	bgeu	ra,s1,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2cba:	01008eb3          	add	t4,ra,a6
    2cbe:	001e9b13          	slli	s6,t4,0x1
    2cc2:	016e0ab3          	add	s5,t3,s6
    2cc6:	000ad303          	lhu	t1,0(s5)
                    for (j=0; j<N; j++) {
    2cca:	00368513          	addi	a0,a3,3
                            A[i*N+j] += val;
    2cce:	418307bb          	subw	a5,t1,s8
    2cd2:	00fa9023          	sh	a5,0(s5)
                    for (j=0; j<N; j++) {
    2cd6:	04957d63          	bgeu	a0,s1,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2cda:	01050cb3          	add	s9,a0,a6
    2cde:	001c9413          	slli	s0,s9,0x1
    2ce2:	008e0a33          	add	s4,t3,s0
    2ce6:	000a5383          	lhu	t2,0(s4)
                    for (j=0; j<N; j++) {
    2cea:	00468993          	addi	s3,a3,4
                            A[i*N+j] += val;
    2cee:	418382bb          	subw	t0,t2,s8
    2cf2:	005a1023          	sh	t0,0(s4)
                    for (j=0; j<N; j++) {
    2cf6:	0299fd63          	bgeu	s3,s1,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2cfa:	01098fb3          	add	t6,s3,a6
    2cfe:	001f9d93          	slli	s11,t6,0x1
    2d02:	01be0f33          	add	t5,t3,s11
    2d06:	000f5d03          	lhu	s10,0(t5)
                    for (j=0; j<N; j++) {
    2d0a:	0695                	addi	a3,a3,5
                            A[i*N+j] += val;
    2d0c:	418d00bb          	subw	ra,s10,s8
    2d10:	001f1023          	sh	ra,0(t5)
                    for (j=0; j<N; j++) {
    2d14:	0096fe63          	bgeu	a3,s1,2d30 <matrix_test+0x1b40>
                            A[i*N+j] += val;
    2d18:	01068bb3          	add	s7,a3,a6
    2d1c:	001b9e93          	slli	t4,s7,0x1
    2d20:	01de0b33          	add	s6,t3,t4
    2d24:	000b5a83          	lhu	s5,0(s6)
    2d28:	418a833b          	subw	t1,s5,s8
    2d2c:	006b1023          	sh	t1,0(s6)
            for (i=0; i<N; i++) {
    2d30:	6522                	ld	a0,8(sp)
    2d32:	0905                	addi	s2,s2,1
    2d34:	9826                	add	a6,a6,s1
    2d36:	98aa                	add	a7,a7,a0
    2d38:	c92499e3          	bne	s1,s2,29ca <matrix_test+0x17da>
    }
    2d3c:	70ea                	ld	ra,184(sp)
    2d3e:	744a                	ld	s0,176(sp)
    2d40:	02011503          	lh	a0,32(sp)
    2d44:	74aa                	ld	s1,168(sp)
    2d46:	790a                	ld	s2,160(sp)
    2d48:	69ea                	ld	s3,152(sp)
    2d4a:	6a4a                	ld	s4,144(sp)
    2d4c:	6aaa                	ld	s5,136(sp)
    2d4e:	6b0a                	ld	s6,128(sp)
    2d50:	7be6                	ld	s7,120(sp)
    2d52:	7c46                	ld	s8,112(sp)
    2d54:	7ca6                	ld	s9,104(sp)
    2d56:	7d06                	ld	s10,96(sp)
    2d58:	6de6                	ld	s11,88(sp)
    2d5a:	6129                	addi	sp,sp,192
    2d5c:	8082                	ret
    2d5e:	6922                	ld	s2,8(sp)
                            if (tmp>clipval) {
    2d60:	4586                	lw	a1,64(sp)
    2d62:	40900b33          	neg	s6,s1
    2d66:	01790533          	add	a0,s2,s7
    2d6a:	002b1893          	slli	a7,s6,0x2
    2d6e:	4f01                	li	t5,0
    2d70:	4e01                	li	t3,0
    2d72:	4701                	li	a4,0
    2d74:	4801                	li	a6,0
                    for (j=0; j<N; j++) {
    2d76:	41100cb3          	neg	s9,a7
    2d7a:	ffcc8d13          	addi	s10,s9,-4
    2d7e:	002d5393          	srli	t2,s10,0x2
    2d82:	00138693          	addi	a3,t2,1
    2d86:	0036ff93          	andi	t6,a3,3
    2d8a:	01150333          	add	t1,a0,a7
    2d8e:	120f8163          	beqz	t6,2eb0 <matrix_test+0x1cc0>
    2d92:	4605                	li	a2,1
    2d94:	04cf8b63          	beq	t6,a2,2dea <matrix_test+0x1bfa>
    2d98:	4289                	li	t0,2
    2d9a:	025f8563          	beq	t6,t0,2dc4 <matrix_test+0x1bd4>
                            cur=C[i*N+j];
    2d9e:	8df2                	mv	s11,t3
    2da0:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    2da4:	030f1793          	slli	a5,t5,0x30
    2da8:	0307df13          	srli	t5,a5,0x30
                            tmp+=cur;
    2dac:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    2db0:	1ce5d363          	bge	a1,a4,2f76 <matrix_test+0x1d86>
                                    ret+=10;
    2db4:	00af071b          	addiw	a4,t5,10
    2db8:	0107199b          	slliw	s3,a4,0x10
    2dbc:	4109df1b          	sraiw	t5,s3,0x10
                                    tmp=0;
    2dc0:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2dc2:	0311                	addi	t1,t1,4
                            cur=C[i*N+j];
    2dc4:	8b72                	mv	s6,t3
    2dc6:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    2dca:	030f1913          	slli	s2,t5,0x30
    2dce:	03095c93          	srli	s9,s2,0x30
                            tmp+=cur;
    2dd2:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    2dd6:	18e5d763          	bge	a1,a4,2f64 <matrix_test+0x1d74>
                                    ret+=10;
    2dda:	00ac8f9b          	addiw	t6,s9,10
    2dde:	010f961b          	slliw	a2,t6,0x10
    2de2:	41065f1b          	sraiw	t5,a2,0x10
                                    tmp=0;
    2de6:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2de8:	0311                	addi	t1,t1,4
                            cur=C[i*N+j];
    2dea:	82f2                	mv	t0,t3
    2dec:	00032e03          	lw	t3,0(t1)
                                    ret+=10;
    2df0:	030f1d93          	slli	s11,t5,0x30
    2df4:	030dd793          	srli	a5,s11,0x30
                            tmp+=cur;
    2df8:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    2dfc:	14e5d763          	bge	a1,a4,2f4a <matrix_test+0x1d5a>
                                    ret+=10;
    2e00:	00a7871b          	addiw	a4,a5,10
    2e04:	03071993          	slli	s3,a4,0x30
    2e08:	01071b1b          	slliw	s6,a4,0x10
    2e0c:	0309d913          	srli	s2,s3,0x30
    2e10:	410b5f1b          	sraiw	t5,s6,0x10
                                    tmp=0;
    2e14:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2e16:	0311                	addi	t1,t1,4
    2e18:	08651c63          	bne	a0,t1,2eb0 <matrix_test+0x1cc0>
            for (i=0; i<N; i++) {
    2e1c:	00180693          	addi	a3,a6,1
    2e20:	955e                	add	a0,a0,s7
    2e22:	910e89e3          	beq	t4,a6,2734 <matrix_test+0x1544>
    2e26:	8836                	mv	a6,a3
    2e28:	b7b9                	j	2d76 <matrix_test+0x1b86>
                                        ret += (cur>prev) ? 1 : 0;
    2e2a:	012e2e33          	slt	t3,t3,s2
                            cur=C[i*N+j];
    2e2e:	00432f03          	lw	t5,4(t1)
                                        ret += (cur>prev) ? 1 : 0;
    2e32:	01ae03bb          	addw	t2,t3,s10
    2e36:	0103969b          	slliw	a3,t2,0x10
    2e3a:	4106d29b          	sraiw	t0,a3,0x10
                                    ret+=10;
    2e3e:	03029793          	slli	a5,t0,0x30
                            tmp+=cur;
    2e42:	01bf0a3b          	addw	s4,t5,s11
                    for (j=0; j<N; j++) {
    2e46:	0311                	addi	t1,t1,4
                                    ret+=10;
    2e48:	0307d093          	srli	ra,a5,0x30
                            if (tmp>clipval) {
    2e4c:	0945de63          	bge	a1,s4,2ee8 <matrix_test+0x1cf8>
                            cur=C[i*N+j];
    2e50:	00432d03          	lw	s10,4(t1)
                                    ret+=10;
    2e54:	00a0891b          	addiw	s2,ra,10
    2e58:	01091c9b          	slliw	s9,s2,0x10
    2e5c:	410cdb1b          	sraiw	s6,s9,0x10
                                    tmp=0;
    2e60:	4a01                	li	s4,0
                                    ret+=10;
    2e62:	030b1e13          	slli	t3,s6,0x30
                            tmp+=cur;
    2e66:	014d0fbb          	addw	t6,s10,s4
                                    ret+=10;
    2e6a:	030e5393          	srli	t2,t3,0x30
                            if (tmp>clipval) {
    2e6e:	09f5df63          	bge	a1,t6,2f0c <matrix_test+0x1d1c>
                            cur=C[i*N+j];
    2e72:	00832e03          	lw	t3,8(t1)
                                    ret+=10;
    2e76:	00a38f1b          	addiw	t5,t2,10
    2e7a:	010f179b          	slliw	a5,t5,0x10
    2e7e:	4107dd9b          	sraiw	s11,a5,0x10
                                    tmp=0;
    2e82:	4f81                	li	t6,0
                                    ret+=10;
    2e84:	030d9093          	slli	ra,s11,0x30
                            tmp+=cur;
    2e88:	01fe073b          	addw	a4,t3,t6
                                    ret+=10;
    2e8c:	0300da13          	srli	s4,ra,0x30
                            if (tmp>clipval) {
    2e90:	0ae5d063          	bge	a1,a4,2f30 <matrix_test+0x1d40>
                                    ret+=10;
    2e94:	00aa0d1b          	addiw	s10,s4,10
    2e98:	030d1393          	slli	t2,s10,0x30
    2e9c:	010d1f9b          	slliw	t6,s10,0x10
    2ea0:	0303d913          	srli	s2,t2,0x30
    2ea4:	410fdf1b          	sraiw	t5,t6,0x10
                                    tmp=0;
    2ea8:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2eaa:	0331                	addi	t1,t1,12
    2eac:	f66508e3          	beq	a0,t1,2e1c <matrix_test+0x1c2c>
                            cur=C[i*N+j];
    2eb0:	00032903          	lw	s2,0(t1)
                                    ret+=10;
    2eb4:	030f1c93          	slli	s9,t5,0x30
    2eb8:	030cdd13          	srli	s10,s9,0x30
                            tmp+=cur;
    2ebc:	00e90dbb          	addw	s11,s2,a4
                            if (tmp>clipval) {
    2ec0:	f7b5d5e3          	bge	a1,s11,2e2a <matrix_test+0x1c3a>
                            cur=C[i*N+j];
    2ec4:	00432f03          	lw	t5,4(t1)
                                    ret+=10;
    2ec8:	00ad0f9b          	addiw	t6,s10,10
    2ecc:	010f961b          	slliw	a2,t6,0x10
    2ed0:	4106529b          	sraiw	t0,a2,0x10
                                    tmp=0;
    2ed4:	4d81                	li	s11,0
                                    ret+=10;
    2ed6:	03029793          	slli	a5,t0,0x30
                            tmp+=cur;
    2eda:	01bf0a3b          	addw	s4,t5,s11
                    for (j=0; j<N; j++) {
    2ede:	0311                	addi	t1,t1,4
                                    ret+=10;
    2ee0:	0307d093          	srli	ra,a5,0x30
                            if (tmp>clipval) {
    2ee4:	f745c6e3          	blt	a1,s4,2e50 <matrix_test+0x1c60>
                                        ret += (cur>prev) ? 1 : 0;
    2ee8:	01e92ab3          	slt	s5,s2,t5
                            cur=C[i*N+j];
    2eec:	00432d03          	lw	s10,4(t1)
                                        ret += (cur>prev) ? 1 : 0;
    2ef0:	001a873b          	addw	a4,s5,ra
    2ef4:	0107199b          	slliw	s3,a4,0x10
    2ef8:	4109db1b          	sraiw	s6,s3,0x10
                                    ret+=10;
    2efc:	030b1e13          	slli	t3,s6,0x30
                            tmp+=cur;
    2f00:	014d0fbb          	addw	t6,s10,s4
                                    ret+=10;
    2f04:	030e5393          	srli	t2,t3,0x30
                            if (tmp>clipval) {
    2f08:	f7f5c5e3          	blt	a1,t6,2e72 <matrix_test+0x1c82>
                                        ret += (cur>prev) ? 1 : 0;
    2f0c:	01af26b3          	slt	a3,t5,s10
                            cur=C[i*N+j];
    2f10:	00832e03          	lw	t3,8(t1)
                                        ret += (cur>prev) ? 1 : 0;
    2f14:	0076863b          	addw	a2,a3,t2
    2f18:	0106129b          	slliw	t0,a2,0x10
    2f1c:	4102dd9b          	sraiw	s11,t0,0x10
                                    ret+=10;
    2f20:	030d9093          	slli	ra,s11,0x30
                            tmp+=cur;
    2f24:	01fe073b          	addw	a4,t3,t6
                                    ret+=10;
    2f28:	0300da13          	srli	s4,ra,0x30
                            if (tmp>clipval) {
    2f2c:	f6e5c4e3          	blt	a1,a4,2e94 <matrix_test+0x1ca4>
                                        ret += (cur>prev) ? 1 : 0;
    2f30:	01cd2ab3          	slt	s5,s10,t3
    2f34:	014a89bb          	addw	s3,s5,s4
    2f38:	03099b13          	slli	s6,s3,0x30
    2f3c:	01099c9b          	slliw	s9,s3,0x10
    2f40:	030b5913          	srli	s2,s6,0x30
    2f44:	410cdf1b          	sraiw	t5,s9,0x10
    2f48:	b78d                	j	2eaa <matrix_test+0x1cba>
    2f4a:	01c2af33          	slt	t5,t0,t3
    2f4e:	00ff00bb          	addw	ra,t5,a5
    2f52:	03009a13          	slli	s4,ra,0x30
    2f56:	01009a9b          	slliw	s5,ra,0x10
    2f5a:	030a5913          	srli	s2,s4,0x30
    2f5e:	410adf1b          	sraiw	t5,s5,0x10
    2f62:	bd55                	j	2e16 <matrix_test+0x1c26>
    2f64:	01cb2d33          	slt	s10,s6,t3
    2f68:	019d03bb          	addw	t2,s10,s9
    2f6c:	0103969b          	slliw	a3,t2,0x10
    2f70:	4106df1b          	sraiw	t5,a3,0x10
    2f74:	bd95                	j	2de8 <matrix_test+0x1bf8>
    2f76:	01cda0b3          	slt	ra,s11,t3
    2f7a:	01e08a3b          	addw	s4,ra,t5
    2f7e:	010a1a9b          	slliw	s5,s4,0x10
    2f82:	410adf1b          	sraiw	t5,s5,0x10
    2f86:	bd35                	j	2dc2 <matrix_test+0x1bd2>
    2f88:	6ca2                	ld	s9,8(sp)
    2f8a:	6662                	ld	a2,24(sp)
    2f8c:	7c02                	ld	s8,32(sp)
                            if (tmp>clipval) {
    2f8e:	4586                	lw	a1,64(sp)
    2f90:	40900a33          	neg	s4,s1
    2f94:	00cc8533          	add	a0,s9,a2
    2f98:	002a1893          	slli	a7,s4,0x2
    2f9c:	4981                	li	s3,0
    2f9e:	4e01                	li	t3,0
    2fa0:	4701                	li	a4,0
    2fa2:	4801                	li	a6,0
                    for (j=0; j<N; j++) {
    2fa4:	41100433          	neg	s0,a7
    2fa8:	ffc40e93          	addi	t4,s0,-4
    2fac:	002edf93          	srli	t6,t4,0x2
    2fb0:	001f8693          	addi	a3,t6,1
    2fb4:	0036fd13          	andi	s10,a3,3
    2fb8:	00a88eb3          	add	t4,a7,a0
    2fbc:	120d0163          	beqz	s10,30de <matrix_test+0x1eee>
    2fc0:	4d85                	li	s11,1
    2fc2:	05bd0b63          	beq	s10,s11,3018 <matrix_test+0x1e28>
    2fc6:	4a89                	li	s5,2
    2fc8:	035d0563          	beq	s10,s5,2ff2 <matrix_test+0x1e02>
                            cur=C[i*N+j];
    2fcc:	80f2                	mv	ra,t3
    2fce:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    2fd2:	03099393          	slli	t2,s3,0x30
    2fd6:	0303d313          	srli	t1,t2,0x30
                            tmp+=cur;
    2fda:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    2fde:	1ce5d363          	bge	a1,a4,31a4 <matrix_test+0x1fb4>
                                    ret+=10;
    2fe2:	00a3071b          	addiw	a4,t1,10
    2fe6:	0107199b          	slliw	s3,a4,0x10
    2fea:	4109d99b          	sraiw	s3,s3,0x10
                                    tmp=0;
    2fee:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    2ff0:	0e91                	addi	t4,t4,4
                            cur=C[i*N+j];
    2ff2:	8bf2                	mv	s7,t3
    2ff4:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    2ff8:	03099913          	slli	s2,s3,0x30
    2ffc:	03095a13          	srli	s4,s2,0x30
                            tmp+=cur;
    3000:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    3004:	18e5d763          	bge	a1,a4,3192 <matrix_test+0x1fa2>
                                    ret+=10;
    3008:	00aa069b          	addiw	a3,s4,10
    300c:	01069d1b          	slliw	s10,a3,0x10
    3010:	410d599b          	sraiw	s3,s10,0x10
                                    tmp=0;
    3014:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    3016:	0e91                	addi	t4,t4,4
                            cur=C[i*N+j];
    3018:	8df2                	mv	s11,t3
    301a:	000eae03          	lw	t3,0(t4)
                                    ret+=10;
    301e:	03099a93          	slli	s5,s3,0x30
    3022:	030ad093          	srli	ra,s5,0x30
                            tmp+=cur;
    3026:	00ee073b          	addw	a4,t3,a4
                            if (tmp>clipval) {
    302a:	14e5d763          	bge	a1,a4,3178 <matrix_test+0x1f88>
                                    ret+=10;
    302e:	00a08f1b          	addiw	t5,ra,10
    3032:	030f1713          	slli	a4,t5,0x30
    3036:	010f199b          	slliw	s3,t5,0x10
    303a:	03075b93          	srli	s7,a4,0x30
    303e:	4109d99b          	sraiw	s3,s3,0x10
                                    tmp=0;
    3042:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    3044:	0e91                	addi	t4,t4,4
    3046:	09d51c63          	bne	a0,t4,30de <matrix_test+0x1eee>
            for (i=0; i<N; i++) {
    304a:	00180413          	addi	s0,a6,1
    304e:	9532                	add	a0,a0,a2
    3050:	af028163          	beq	t0,a6,2332 <matrix_test+0x1142>
    3054:	8822                	mv	a6,s0
    3056:	b7b9                	j	2fa4 <matrix_test+0x1db4>
                                        ret += (cur>prev) ? 1 : 0;
    3058:	017e2e33          	slt	t3,t3,s7
                            cur=C[i*N+j];
    305c:	004eaa83          	lw	s5,4(t4)
                                        ret += (cur>prev) ? 1 : 0;
    3060:	014e0cbb          	addw	s9,t3,s4
    3064:	010c941b          	slliw	s0,s9,0x10
    3068:	41045d1b          	sraiw	s10,s0,0x10
                                    ret+=10;
    306c:	030d1093          	slli	ra,s10,0x30
                            tmp+=cur;
    3070:	01ba8b3b          	addw	s6,s5,s11
                    for (j=0; j<N; j++) {
    3074:	0e91                	addi	t4,t4,4
                                    ret+=10;
    3076:	0300d393          	srli	t2,ra,0x30
                            if (tmp>clipval) {
    307a:	0965de63          	bge	a1,s6,3116 <matrix_test+0x1f26>
                            cur=C[i*N+j];
    307e:	004ea903          	lw	s2,4(t4)
                                    ret+=10;
    3082:	00a3899b          	addiw	s3,t2,10
    3086:	01099b9b          	slliw	s7,s3,0x10
    308a:	410bd71b          	sraiw	a4,s7,0x10
                                    tmp=0;
    308e:	4b01                	li	s6,0
                                    ret+=10;
    3090:	03071a13          	slli	s4,a4,0x30
                            tmp+=cur;
    3094:	01690cbb          	addw	s9,s2,s6
                                    ret+=10;
    3098:	030a5e13          	srli	t3,s4,0x30
                            if (tmp>clipval) {
    309c:	0995df63          	bge	a1,s9,313a <matrix_test+0x1f4a>
                                    ret+=10;
    30a0:	00ae0d9b          	addiw	s11,t3,10
                            cur=C[i*N+j];
    30a4:	008eae03          	lw	t3,8(t4)
                                    ret+=10;
    30a8:	010d9a9b          	slliw	s5,s11,0x10
    30ac:	410add1b          	sraiw	s10,s5,0x10
                                    tmp=0;
    30b0:	4c81                	li	s9,0
                                    ret+=10;
    30b2:	030d1093          	slli	ra,s10,0x30
                            tmp+=cur;
    30b6:	019e073b          	addw	a4,t3,s9
                                    ret+=10;
    30ba:	0300d393          	srli	t2,ra,0x30
                            if (tmp>clipval) {
    30be:	0ae5d063          	bge	a1,a4,315e <matrix_test+0x1f6e>
                                    ret+=10;
    30c2:	00a3891b          	addiw	s2,t2,10
    30c6:	03091a13          	slli	s4,s2,0x30
    30ca:	01091c9b          	slliw	s9,s2,0x10
    30ce:	030a5b93          	srli	s7,s4,0x30
    30d2:	410cd99b          	sraiw	s3,s9,0x10
                                    tmp=0;
    30d6:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    30d8:	0eb1                	addi	t4,t4,12
    30da:	f7d508e3          	beq	a0,t4,304a <matrix_test+0x1e5a>
                            cur=C[i*N+j];
    30de:	000eab83          	lw	s7,0(t4)
                                    ret+=10;
    30e2:	03099913          	slli	s2,s3,0x30
    30e6:	03095a13          	srli	s4,s2,0x30
                            tmp+=cur;
    30ea:	00eb8dbb          	addw	s11,s7,a4
                            if (tmp>clipval) {
    30ee:	f7b5d5e3          	bge	a1,s11,3058 <matrix_test+0x1e68>
                            cur=C[i*N+j];
    30f2:	004eaa83          	lw	s5,4(t4)
                                    ret+=10;
    30f6:	00aa0f9b          	addiw	t6,s4,10
    30fa:	010f969b          	slliw	a3,t6,0x10
    30fe:	4106dd1b          	sraiw	s10,a3,0x10
                                    tmp=0;
    3102:	4d81                	li	s11,0
                                    ret+=10;
    3104:	030d1093          	slli	ra,s10,0x30
                            tmp+=cur;
    3108:	01ba8b3b          	addw	s6,s5,s11
                    for (j=0; j<N; j++) {
    310c:	0e91                	addi	t4,t4,4
                                    ret+=10;
    310e:	0300d393          	srli	t2,ra,0x30
                            if (tmp>clipval) {
    3112:	f765c6e3          	blt	a1,s6,307e <matrix_test+0x1e8e>
                                        ret += (cur>prev) ? 1 : 0;
    3116:	015ba333          	slt	t1,s7,s5
                            cur=C[i*N+j];
    311a:	004ea903          	lw	s2,4(t4)
                                        ret += (cur>prev) ? 1 : 0;
    311e:	007307bb          	addw	a5,t1,t2
    3122:	01079f1b          	slliw	t5,a5,0x10
    3126:	410f571b          	sraiw	a4,t5,0x10
                                    ret+=10;
    312a:	03071a13          	slli	s4,a4,0x30
                            tmp+=cur;
    312e:	01690cbb          	addw	s9,s2,s6
                                    ret+=10;
    3132:	030a5e13          	srli	t3,s4,0x30
                            if (tmp>clipval) {
    3136:	f795c5e3          	blt	a1,s9,30a0 <matrix_test+0x1eb0>
                                        ret += (cur>prev) ? 1 : 0;
    313a:	012aa433          	slt	s0,s5,s2
    313e:	01c40fbb          	addw	t6,s0,t3
                            cur=C[i*N+j];
    3142:	008eae03          	lw	t3,8(t4)
                                        ret += (cur>prev) ? 1 : 0;
    3146:	010f969b          	slliw	a3,t6,0x10
    314a:	4106dd1b          	sraiw	s10,a3,0x10
                                    ret+=10;
    314e:	030d1093          	slli	ra,s10,0x30
                            tmp+=cur;
    3152:	019e073b          	addw	a4,t3,s9
                                    ret+=10;
    3156:	0300d393          	srli	t2,ra,0x30
                            if (tmp>clipval) {
    315a:	f6e5c4e3          	blt	a1,a4,30c2 <matrix_test+0x1ed2>
                                        ret += (cur>prev) ? 1 : 0;
    315e:	01c92b33          	slt	s6,s2,t3
    3162:	007b07bb          	addw	a5,s6,t2
    3166:	03079313          	slli	t1,a5,0x30
    316a:	01079f1b          	slliw	t5,a5,0x10
    316e:	03035b93          	srli	s7,t1,0x30
    3172:	410f599b          	sraiw	s3,t5,0x10
    3176:	b78d                	j	30d8 <matrix_test+0x1ee8>
    3178:	01cda3b3          	slt	t2,s11,t3
    317c:	00138b3b          	addw	s6,t2,ra
    3180:	030b1313          	slli	t1,s6,0x30
    3184:	010b179b          	slliw	a5,s6,0x10
    3188:	03035b93          	srli	s7,t1,0x30
    318c:	4107d99b          	sraiw	s3,a5,0x10
    3190:	bd55                	j	3044 <matrix_test+0x1e54>
    3192:	01cbacb3          	slt	s9,s7,t3
    3196:	014c843b          	addw	s0,s9,s4
    319a:	01041f9b          	slliw	t6,s0,0x10
    319e:	410fd99b          	sraiw	s3,t6,0x10
    31a2:	bd95                	j	3016 <matrix_test+0x1e26>
    31a4:	01c0ab33          	slt	s6,ra,t3
    31a8:	006b07bb          	addw	a5,s6,t1
    31ac:	01079f1b          	slliw	t5,a5,0x10
    31b0:	410f599b          	sraiw	s3,t5,0x10
    31b4:	bd35                	j	2ff0 <matrix_test+0x1e00>
                    for (j=0; j<N; j++) {
    31b6:	4681                	li	a3,0
    31b8:	b4c9                	j	2c7a <matrix_test+0x1a8a>
    31ba:	4701                	li	a4,0
    31bc:	b16fe06f          	j	14d2 <matrix_test+0x2e2>
                    data >>= 1;
    31c0:	4681                	li	a3,0
            for (i=0; i<N; i++) {
    31c2:	4701                	li	a4,0
                    crc >>= 1;
    31c4:	4281                	li	t0,0
    31c6:	f98fe06f          	j	195e <matrix_test+0x76e>
            for (i=0; i<N; i++) {
    31ca:	4581                	li	a1,0
    31cc:	4f81                	li	t6,0
    31ce:	bebfe06f          	j	1db8 <matrix_test+0xbc8>

00000000000031d2 <core_bench_matrix>:
    ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    31d2:	1141                	addi	sp,sp,-16
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    31d4:	6914                	ld	a3,16(a0)
    ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    31d6:	872e                	mv	a4,a1
    31d8:	e022                	sd	s0,0(sp)
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    31da:	6d0c                	ld	a1,24(a0)
    ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    31dc:	8432                	mv	s0,a2
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    31de:	6510                	ld	a2,8(a0)
    31e0:	4108                	lw	a0,0(a0)
    ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    31e2:	e406                	sd	ra,8(sp)
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    31e4:	80cfe0ef          	jal	ra,11f0 <matrix_test>
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    31e8:	00a446b3          	xor	a3,s0,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    31ec:	0ff57713          	andi	a4,a0,255
        crc=crc16((ee_s16) newval        ,crc);
        crc=crc16((ee_s16) (newval>>16) ,crc);
        return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
        return crcu16((ee_u16)newval, crc);
    31f0:	03051793          	slli	a5,a0,0x30
                    if (x16 == 1)
    31f4:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
    31f8:	0307d313          	srli	t1,a5,0x30
                    data >>= 1;
    31fc:	00175613          	srli	a2,a4,0x1
                    crc >>= 1;
    3200:	00145813          	srli	a6,s0,0x1
                    if (x16 == 1)
    3204:	00028b63          	beqz	t0,321a <core_bench_matrix+0x48>
                         crc |= 0x8000;
    3208:	70e9                	lui	ra,0xffffa
    320a:	00108393          	addi	t2,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    320e:	00784533          	xor	a0,a6,t2
    3212:	03051593          	slli	a1,a0,0x30
    3216:	0305d813          	srli	a6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    321a:	00c848b3          	xor	a7,a6,a2
                    if (x16 == 1)
    321e:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    3222:	00275e93          	srli	t4,a4,0x2
                    crc >>= 1;
    3226:	00185293          	srli	t0,a6,0x1
                    if (x16 == 1)
    322a:	000e0b63          	beqz	t3,3240 <core_bench_matrix+0x6e>
                         crc |= 0x8000;
    322e:	7f69                	lui	t5,0xffffa
    3230:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    3234:	01f2c433          	xor	s0,t0,t6
    3238:	03041693          	slli	a3,s0,0x30
    323c:	0306d293          	srli	t0,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3240:	01d2c7b3          	xor	a5,t0,t4
                    if (x16 == 1)
    3244:	0017f093          	andi	ra,a5,1
                    data >>= 1;
    3248:	00375613          	srli	a2,a4,0x3
                    crc >>= 1;
    324c:	0012d893          	srli	a7,t0,0x1
                    if (x16 == 1)
    3250:	00008b63          	beqz	ra,3266 <core_bench_matrix+0x94>
                         crc |= 0x8000;
    3254:	73e9                	lui	t2,0xffffa
    3256:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    325a:	00b8c533          	xor	a0,a7,a1
    325e:	03051813          	slli	a6,a0,0x30
    3262:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3266:	00c8ce33          	xor	t3,a7,a2
                    if (x16 == 1)
    326a:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    326e:	00475f13          	srli	t5,a4,0x4
                    crc >>= 1;
    3272:	0018d793          	srli	a5,a7,0x1
                    if (x16 == 1)
    3276:	000e8b63          	beqz	t4,328c <core_bench_matrix+0xba>
                         crc |= 0x8000;
    327a:	7fe9                	lui	t6,0xffffa
    327c:	001f8413          	addi	s0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    3280:	0087c6b3          	xor	a3,a5,s0
    3284:	03069293          	slli	t0,a3,0x30
    3288:	0302d793          	srli	a5,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    328c:	01e7c0b3          	xor	ra,a5,t5
                    if (x16 == 1)
    3290:	0010f393          	andi	t2,ra,1
                    data >>= 1;
    3294:	00575613          	srli	a2,a4,0x5
                    crc >>= 1;
    3298:	0017de13          	srli	t3,a5,0x1
                    if (x16 == 1)
    329c:	00038b63          	beqz	t2,32b2 <core_bench_matrix+0xe0>
                         crc |= 0x8000;
    32a0:	75e9                	lui	a1,0xffffa
    32a2:	00158813          	addi	a6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    32a6:	010e4533          	xor	a0,t3,a6
    32aa:	03051893          	slli	a7,a0,0x30
    32ae:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    32b2:	00ce4eb3          	xor	t4,t3,a2
                    if (x16 == 1)
    32b6:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    32ba:	00675f93          	srli	t6,a4,0x6
                    crc >>= 1;
    32be:	001e5093          	srli	ra,t3,0x1
                    if (x16 == 1)
    32c2:	000f0b63          	beqz	t5,32d8 <core_bench_matrix+0x106>
                         crc |= 0x8000;
    32c6:	7469                	lui	s0,0xffffa
    32c8:	00140693          	addi	a3,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    32cc:	00d0c2b3          	xor	t0,ra,a3
    32d0:	03029793          	slli	a5,t0,0x30
    32d4:	0307d093          	srli	ra,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    32d8:	01f0c3b3          	xor	t2,ra,t6
                    if (x16 == 1)
    32dc:	0013f613          	andi	a2,t2,1
                    data >>= 1;
    32e0:	831d                	srli	a4,a4,0x7
                    crc >>= 1;
    32e2:	0010de13          	srli	t3,ra,0x1
                    if (x16 == 1)
    32e6:	ca11                	beqz	a2,32fa <core_bench_matrix+0x128>
                         crc |= 0x8000;
    32e8:	75e9                	lui	a1,0xffffa
    32ea:	00158813          	addi	a6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    32ee:	010e4533          	xor	a0,t3,a6
    32f2:	03051893          	slli	a7,a0,0x30
    32f6:	0308de13          	srli	t3,a7,0x30
                    if (x16 == 1)
    32fa:	001e7e93          	andi	t4,t3,1
                    crc >>= 1;
    32fe:	001e5293          	srli	t0,t3,0x1
                    if (x16 == 1)
    3302:	12ee9e63          	bne	t4,a4,343e <core_bench_matrix+0x26c>
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3306:	00835793          	srli	a5,t1,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    330a:	0057c0b3          	xor	ra,a5,t0
                    if (x16 == 1)
    330e:	0010f393          	andi	t2,ra,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3312:	00835613          	srli	a2,t1,0x8
                    data >>= 1;
    3316:	0012d893          	srli	a7,t0,0x1
    331a:	00935313          	srli	t1,t1,0x9
                    if (x16 == 1)
    331e:	00038b63          	beqz	t2,3334 <core_bench_matrix+0x162>
                         crc |= 0x8000;
    3322:	7769                	lui	a4,0xffffa
    3324:	00170593          	addi	a1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    3328:	00b8c833          	xor	a6,a7,a1
    332c:	03081513          	slli	a0,a6,0x30
    3330:	03055893          	srli	a7,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3334:	01134e33          	xor	t3,t1,a7
                    if (x16 == 1)
    3338:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    333c:	00265f13          	srli	t5,a2,0x2
                    if (x16 == 1)
    3340:	0018d093          	srli	ra,a7,0x1
    3344:	000e8b63          	beqz	t4,335a <core_bench_matrix+0x188>
                         crc |= 0x8000;
    3348:	7fe9                	lui	t6,0xffffa
    334a:	001f8413          	addi	s0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    334e:	0080c6b3          	xor	a3,ra,s0
    3352:	03069293          	slli	t0,a3,0x30
    3356:	0302d093          	srli	ra,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    335a:	01e0c7b3          	xor	a5,ra,t5
                    if (x16 == 1)
    335e:	0017f393          	andi	t2,a5,1
                    data >>= 1;
    3362:	00365313          	srli	t1,a2,0x3
                    if (x16 == 1)
    3366:	0010d893          	srli	a7,ra,0x1
    336a:	00038b63          	beqz	t2,3380 <core_bench_matrix+0x1ae>
                         crc |= 0x8000;
    336e:	7769                	lui	a4,0xffffa
    3370:	00170593          	addi	a1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    3374:	00b8c833          	xor	a6,a7,a1
    3378:	03081513          	slli	a0,a6,0x30
    337c:	03055893          	srli	a7,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3380:	0068ce33          	xor	t3,a7,t1
                    if (x16 == 1)
    3384:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    3388:	00465f13          	srli	t5,a2,0x4
                    if (x16 == 1)
    338c:	0018d093          	srli	ra,a7,0x1
    3390:	000e8b63          	beqz	t4,33a6 <core_bench_matrix+0x1d4>
                         crc |= 0x8000;
    3394:	7fe9                	lui	t6,0xffffa
    3396:	001f8413          	addi	s0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    339a:	0080c6b3          	xor	a3,ra,s0
    339e:	03069293          	slli	t0,a3,0x30
    33a2:	0302d093          	srli	ra,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    33a6:	01e0c7b3          	xor	a5,ra,t5
                    if (x16 == 1)
    33aa:	0017f393          	andi	t2,a5,1
                    data >>= 1;
    33ae:	00565313          	srli	t1,a2,0x5
                    if (x16 == 1)
    33b2:	0010d893          	srli	a7,ra,0x1
    33b6:	00038b63          	beqz	t2,33cc <core_bench_matrix+0x1fa>
                         crc |= 0x8000;
    33ba:	7769                	lui	a4,0xffffa
    33bc:	00170593          	addi	a1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    33c0:	00b8c833          	xor	a6,a7,a1
    33c4:	03081513          	slli	a0,a6,0x30
    33c8:	03055893          	srli	a7,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    33cc:	0068ce33          	xor	t3,a7,t1
                    if (x16 == 1)
    33d0:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    33d4:	00665f13          	srli	t5,a2,0x6
                    if (x16 == 1)
    33d8:	0018d093          	srli	ra,a7,0x1
    33dc:	000e8b63          	beqz	t4,33f2 <core_bench_matrix+0x220>
                         crc |= 0x8000;
    33e0:	7fe9                	lui	t6,0xffffa
    33e2:	001f8413          	addi	s0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    33e6:	0080c6b3          	xor	a3,ra,s0
    33ea:	03069293          	slli	t0,a3,0x30
    33ee:	0302d093          	srli	ra,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    33f2:	01e0c7b3          	xor	a5,ra,t5
                    if (x16 == 1)
    33f6:	0017f393          	andi	t2,a5,1
                    data >>= 1;
    33fa:	821d                	srli	a2,a2,0x7
                    if (x16 == 1)
    33fc:	0010d513          	srli	a0,ra,0x1
    3400:	00038b63          	beqz	t2,3416 <core_bench_matrix+0x244>
                         crc |= 0x8000;
    3404:	7369                	lui	t1,0xffffa
    3406:	00130713          	addi	a4,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    340a:	00e545b3          	xor	a1,a0,a4
    340e:	03059813          	slli	a6,a1,0x30
    3412:	03085513          	srli	a0,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3416:	00a648b3          	xor	a7,a2,a0
                    if (x16 == 1)
    341a:	0018fe13          	andi	t3,a7,1
    341e:	8105                	srli	a0,a0,0x1
    3420:	000e0b63          	beqz	t3,3436 <core_bench_matrix+0x264>
                         crc |= 0x8000;
    3424:	7ee9                	lui	t4,0xffffa
    3426:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    342a:	01e54fb3          	xor	t6,a0,t5
    342e:	030f9413          	slli	s0,t6,0x30
    3432:	03045513          	srli	a0,s0,0x30
    }
    3436:	60a2                	ld	ra,8(sp)
    3438:	6402                	ld	s0,0(sp)
    343a:	0141                	addi	sp,sp,16
    343c:	8082                	ret
                         crc |= 0x8000;
    343e:	7f69                	lui	t5,0xffffa
    3440:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    3444:	01f2c433          	xor	s0,t0,t6
    3448:	03041693          	slli	a3,s0,0x30
    344c:	0306d293          	srli	t0,a3,0x30
    3450:	bd5d                	j	3306 <core_bench_matrix+0x134>

0000000000003452 <core_init_matrix>:
    ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
    3452:	7139                	addi	sp,sp,-64
    3454:	fc22                	sd	s0,56(sp)
    3456:	f826                	sd	s1,48(sp)
    3458:	f44a                	sd	s2,40(sp)
    345a:	f04e                	sd	s3,32(sp)
    345c:	ec52                	sd	s4,24(sp)
    345e:	e856                	sd	s5,16(sp)
    3460:	e45a                	sd	s6,8(sp)
    3462:	e05e                	sd	s7,0(sp)
    3464:	872a                	mv	a4,a0
    3466:	8436                	mv	s0,a3
            if (seed==0)
    3468:	e211                	bnez	a2,346c <core_init_matrix+0x1a>
                    seed=1;
    346a:	4605                	li	a2,1
            A=(MATDAT *)align_mem(memblk);
    346c:	15fd                	addi	a1,a1,-1
    346e:	ffc5f393          	andi	t2,a1,-4
    3472:	00438913          	addi	s2,t2,4
            while (j<blksize) {
    3476:	4781                	li	a5,0
    3478:	22070b63          	beqz	a4,36ae <core_init_matrix+0x25c>
                    i++;
    347c:	00178293          	addi	t0,a5,1
                    j=i*i*2*4;
    3480:	025284b3          	mul	s1,t0,t0
                    i++;
    3484:	00278813          	addi	a6,a5,2
    3488:	00378e13          	addi	t3,a5,3
    348c:	00478f13          	addi	t5,a5,4
    3490:	00578e93          	addi	t4,a5,5
    3494:	00678893          	addi	a7,a5,6
    3498:	00778313          	addi	t1,a5,7
            while (j<blksize) {
    349c:	853e                	mv	a0,a5
                    i++;
    349e:	07a1                	addi	a5,a5,8
                    j=i*i*2*4;
    34a0:	00349a13          	slli	s4,s1,0x3
            while (j<blksize) {
    34a4:	06ea7363          	bgeu	s4,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34a8:	03080ab3          	mul	s5,a6,a6
    34ac:	8516                	mv	a0,t0
    34ae:	003a9b13          	slli	s6,s5,0x3
            while (j<blksize) {
    34b2:	04eb7c63          	bgeu	s6,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34b6:	03ce0bb3          	mul	s7,t3,t3
    34ba:	8542                	mv	a0,a6
    34bc:	003b9f93          	slli	t6,s7,0x3
            while (j<blksize) {
    34c0:	04eff563          	bgeu	t6,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34c4:	03ef05b3          	mul	a1,t5,t5
    34c8:	8572                	mv	a0,t3
    34ca:	00359393          	slli	t2,a1,0x3
            while (j<blksize) {
    34ce:	02e3fe63          	bgeu	t2,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34d2:	03de89b3          	mul	s3,t4,t4
    34d6:	857a                	mv	a0,t5
    34d8:	00399693          	slli	a3,s3,0x3
            while (j<blksize) {
    34dc:	02e6f763          	bgeu	a3,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34e0:	031882b3          	mul	t0,a7,a7
    34e4:	8576                	mv	a0,t4
    34e6:	00329813          	slli	a6,t0,0x3
            while (j<blksize) {
    34ea:	02e87063          	bgeu	a6,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34ee:	02630e33          	mul	t3,t1,t1
    34f2:	8546                	mv	a0,a7
    34f4:	003e1f13          	slli	t5,t3,0x3
            while (j<blksize) {
    34f8:	00ef7963          	bgeu	t5,a4,350a <core_init_matrix+0xb8>
                    j=i*i*2*4;
    34fc:	02f78eb3          	mul	t4,a5,a5
    3500:	851a                	mv	a0,t1
    3502:	003e9893          	slli	a7,t4,0x3
            while (j<blksize) {
    3506:	f6e8ebe3          	bltu	a7,a4,347c <core_init_matrix+0x2a>
            B=A+N*N;
    350a:	02a50733          	mul	a4,a0,a0
            p->N=N;
    350e:	0005099b          	sext.w	s3,a0
            B=A+N*N;
    3512:	00171693          	slli	a3,a4,0x1
    3516:	00d903b3          	add	t2,s2,a3
            for (i=0; i<N; i++) {
    351a:	18050f63          	beqz	a0,36b8 <core_init_matrix+0x266>
                            seed = ( ( order * seed ) % 65536 );
    351e:	6341                	lui	t1,0x10
            B=A+N*N;
    3520:	4281                	li	t0,0
    3522:	4f81                	li	t6,0
    3524:	4f05                	li	t5,1
    3526:	40790eb3          	sub	t4,s2,t2
                            seed = ( ( order * seed ) % 65536 );
    352a:	fff30e13          	addi	t3,t1,-1 # ffff <_end+0x77af>
                            order++;
    352e:	fff5049b          	addiw	s1,a0,-1
                            seed = ( ( order * seed ) % 65536 );
    3532:	03e6063b          	mulw	a2,a2,t5
    3536:	030f1793          	slli	a5,t5,0x30
    353a:	0307db13          	srli	s6,a5,0x30
    353e:	00129a13          	slli	s4,t0,0x1
    3542:	007a0bb3          	add	s7,s4,t2
    3546:	fff50593          	addi	a1,a0,-1
    354a:	0015f713          	andi	a4,a1,1
                            A[i*N+j] = val;
    354e:	017e8ab3          	add	s5,t4,s7
                    for (j=0; j<N; j++) {
    3552:	4305                	li	t1,1
                            order++;
    3554:	001f089b          	addiw	a7,t5,1
                            seed = ( ( order * seed ) % 65536 );
    3558:	41f6579b          	sraiw	a5,a2,0x1f
    355c:	0107da1b          	srliw	s4,a5,0x10
    3560:	0146063b          	addw	a2,a2,s4
    3564:	01c675b3          	and	a1,a2,t3
    3568:	4145863b          	subw	a2,a1,s4
                            val = (seed + order);
    356c:	016607bb          	addw	a5,a2,s6
    3570:	03079a13          	slli	s4,a5,0x30
    3574:	030a5593          	srli	a1,s4,0x30
                            val = (val + order);
    3578:	01658b3b          	addw	s6,a1,s6
                            B[i*N+j] = val;
    357c:	00bb9023          	sh	a1,0(s7)
                            val=matrix_clip(val,1);
    3580:	0ffb7793          	andi	a5,s6,255
                            A[i*N+j] = val;
    3584:	00fa9023          	sh	a5,0(s5)
                    for (j=0; j<N; j++) {
    3588:	002b8813          	addi	a6,s7,2
    358c:	0ca37e63          	bgeu	t1,a0,3668 <core_init_matrix+0x216>
    3590:	c739                	beqz	a4,35de <core_init_matrix+0x18c>
                            seed = ( ( order * seed ) % 65536 );
    3592:	03160abb          	mulw	s5,a2,a7
    3596:	03089313          	slli	t1,a7,0x30
    359a:	03035713          	srli	a4,t1,0x30
                            A[i*N+j] = val;
    359e:	010e8a33          	add	s4,t4,a6
                    for (j=0; j<N; j++) {
    35a2:	004b8813          	addi	a6,s7,4
    35a6:	4309                	li	t1,2
                            val = (seed + order);
    35a8:	2885                	addiw	a7,a7,1
                            seed = ( ( order * seed ) % 65536 );
    35aa:	41fad61b          	sraiw	a2,s5,0x1f
    35ae:	0106559b          	srliw	a1,a2,0x10
    35b2:	00ba8b3b          	addw	s6,s5,a1
    35b6:	01cb77b3          	and	a5,s6,t3
    35ba:	40b7863b          	subw	a2,a5,a1
                            val = (seed + order);
    35be:	00e60abb          	addw	s5,a2,a4
    35c2:	030a9593          	slli	a1,s5,0x30
    35c6:	0305db13          	srli	s6,a1,0x30
                            val = (val + order);
    35ca:	00eb073b          	addw	a4,s6,a4
                            B[i*N+j] = val;
    35ce:	016b9123          	sh	s6,2(s7)
                            val=matrix_clip(val,1);
    35d2:	0ff77b93          	andi	s7,a4,255
                            A[i*N+j] = val;
    35d6:	017a1023          	sh	s7,0(s4)
                    for (j=0; j<N; j++) {
    35da:	08a37763          	bgeu	t1,a0,3668 <core_init_matrix+0x216>
                            seed = ( ( order * seed ) % 65536 );
    35de:	0316063b          	mulw	a2,a2,a7
                            order++;
    35e2:	0018871b          	addiw	a4,a7,1
    35e6:	03071793          	slli	a5,a4,0x30
    35ea:	0307d593          	srli	a1,a5,0x30
    35ee:	03089a13          	slli	s4,a7,0x30
    35f2:	0017089b          	addiw	a7,a4,1
    35f6:	030a5a93          	srli	s5,s4,0x30
                            A[i*N+j] = val;
    35fa:	010e8b33          	add	s6,t4,a6
                    for (j=0; j<N; j++) {
    35fe:	0811                	addi	a6,a6,4
                            A[i*N+j] = val;
    3600:	8a5a                	mv	s4,s6
                            seed = ( ( order * seed ) % 65536 );
    3602:	41f65b9b          	sraiw	s7,a2,0x1f
    3606:	010bdb9b          	srliw	s7,s7,0x10
    360a:	0176063b          	addw	a2,a2,s7
    360e:	01c677b3          	and	a5,a2,t3
    3612:	41778bbb          	subw	s7,a5,s7
    3616:	02eb873b          	mulw	a4,s7,a4
                            val = (seed + order);
    361a:	015b863b          	addw	a2,s7,s5
    361e:	03061793          	slli	a5,a2,0x30
    3622:	0307db93          	srli	s7,a5,0x30
                            val = (val + order);
    3626:	015b8abb          	addw	s5,s7,s5
                            B[i*N+j] = val;
    362a:	ff781e23          	sh	s7,-4(a6)
                            val=matrix_clip(val,1);
    362e:	0ffaf613          	andi	a2,s5,255
                            A[i*N+j] = val;
    3632:	00cb1023          	sh	a2,0(s6)
                    for (j=0; j<N; j++) {
    3636:	0309                	addi	t1,t1,2
                            seed = ( ( order * seed ) % 65536 );
    3638:	41f75b1b          	sraiw	s6,a4,0x1f
    363c:	010b579b          	srliw	a5,s6,0x10
    3640:	9f3d                	addw	a4,a4,a5
    3642:	01c77bb3          	and	s7,a4,t3
    3646:	40fb863b          	subw	a2,s7,a5
                            val = (seed + order);
    364a:	00b60abb          	addw	s5,a2,a1
    364e:	030a9b13          	slli	s6,s5,0x30
    3652:	030b5793          	srli	a5,s6,0x30
                            val = (val + order);
    3656:	9dbd                	addw	a1,a1,a5
                            B[i*N+j] = val;
    3658:	fef81f23          	sh	a5,-2(a6)
                            val=matrix_clip(val,1);
    365c:	0ff5f713          	andi	a4,a1,255
                            A[i*N+j] = val;
    3660:	00ea1123          	sh	a4,2(s4)
                    for (j=0; j<N; j++) {
    3664:	f6a36de3          	bltu	t1,a0,35de <core_init_matrix+0x18c>
    3668:	2f05                	addiw	t5,t5,1
                            order++;
    366a:	4301                	li	t1,0
    366c:	c111                	beqz	a0,3670 <core_init_matrix+0x21e>
    366e:	8326                	mv	t1,s1
            for (i=0; i<N; i++) {
    3670:	0f85                	addi	t6,t6,1
                            order++;
    3672:	01e30f3b          	addw	t5,t1,t5
            for (i=0; i<N; i++) {
    3676:	92aa                	add	t0,t0,a0
    3678:	eaafede3          	bltu	t6,a0,3532 <core_init_matrix+0xe0>
            p->C=(MATRES *)align_mem(B+N*N);
    367c:	969e                	add	a3,a3,t2
    367e:	fff68293          	addi	t0,a3,-1
    3682:	ffc2ff93          	andi	t6,t0,-4
    3686:	004f8e93          	addi	t4,t6,4
            p->A=A;
    368a:	01243423          	sd	s2,8(s0)
            p->N=N;
    368e:	01342023          	sw	s3,0(s0)
            p->B=B;
    3692:	00743823          	sd	t2,16(s0)
            p->C=(MATRES *)align_mem(B+N*N);
    3696:	01d43c23          	sd	t4,24(s0)
    }
    369a:	7462                	ld	s0,56(sp)
    369c:	74c2                	ld	s1,48(sp)
    369e:	7922                	ld	s2,40(sp)
    36a0:	7982                	ld	s3,32(sp)
    36a2:	6a62                	ld	s4,24(sp)
    36a4:	6ac2                	ld	s5,16(sp)
    36a6:	6b22                	ld	s6,8(sp)
    36a8:	6b82                	ld	s7,0(sp)
    36aa:	6121                	addi	sp,sp,64
    36ac:	8082                	ret
            B=A+N*N;
    36ae:	0399                	addi	t2,t2,6
    36b0:	59fd                	li	s3,-1
            N=i-1;
    36b2:	557d                	li	a0,-1
            B=A+N*N;
    36b4:	4689                	li	a3,2
    36b6:	b5a5                	j	351e <core_init_matrix+0xcc>
            for (i=0; i<N; i++) {
    36b8:	4981                	li	s3,0
    36ba:	b7c9                	j	367c <core_init_matrix+0x22a>

00000000000036bc <matrix_sum>:
    ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
    36bc:	8e2a                	mv	t3,a0
            for (i=0; i<N; i++) {
    36be:	20050163          	beqz	a0,38c0 <matrix_sum+0x204>
    36c2:	00251e93          	slli	t4,a0,0x2
    36c6:	40a00333          	neg	t1,a0
                            if (tmp>clipval) {
    36ca:	0006081b          	sext.w	a6,a2
    36ce:	95f6                	add	a1,a1,t4
    36d0:	030a                	slli	t1,t1,0x2
            for (i=0; i<N; i++) {
    36d2:	4881                	li	a7,0
            ee_s16 ret=0;
    36d4:	4501                	li	a0,0
            MATRES tmp=0,prev=0,cur=0;
    36d6:	4f81                	li	t6,0
    36d8:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    36da:	406007b3          	neg	a5,t1
    36de:	ffc78293          	addi	t0,a5,-4
    36e2:	0022d393          	srli	t2,t0,0x2
    36e6:	00138613          	addi	a2,t2,1
    36ea:	00367f13          	andi	t5,a2,3
    36ee:	00b306b3          	add	a3,t1,a1
    36f2:	100f0463          	beqz	t5,37fa <matrix_sum+0x13e>
    36f6:	4785                	li	a5,1
    36f8:	04ff0963          	beq	t5,a5,374a <matrix_sum+0x8e>
    36fc:	4289                	li	t0,2
    36fe:	025f0463          	beq	t5,t0,3726 <matrix_sum+0x6a>
                            cur=C[i*N+j];
    3702:	83fe                	mv	t2,t6
    3704:	0006af83          	lw	t6,0(a3)
                                    ret+=10;
    3708:	1542                	slli	a0,a0,0x30
    370a:	03055613          	srli	a2,a0,0x30
                            tmp+=cur;
    370e:	01f7073b          	addw	a4,a4,t6
                            if (tmp>clipval) {
    3712:	18e85e63          	bge	a6,a4,38ae <matrix_sum+0x1f2>
                                    ret+=10;
    3716:	00a6071b          	addiw	a4,a2,10
    371a:	0107139b          	slliw	t2,a4,0x10
    371e:	4103d51b          	sraiw	a0,t2,0x10
                                    tmp=0;
    3722:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    3724:	0691                	addi	a3,a3,4
                            cur=C[i*N+j];
    3726:	867e                	mv	a2,t6
    3728:	0006af83          	lw	t6,0(a3)
                                    ret+=10;
    372c:	1542                	slli	a0,a0,0x30
    372e:	03055f13          	srli	t5,a0,0x30
                            tmp+=cur;
    3732:	01f7073b          	addw	a4,a4,t6
                            if (tmp>clipval) {
    3736:	16e85363          	bge	a6,a4,389c <matrix_sum+0x1e0>
                                    ret+=10;
    373a:	00af071b          	addiw	a4,t5,10
    373e:	0107161b          	slliw	a2,a4,0x10
    3742:	4106551b          	sraiw	a0,a2,0x10
                                    tmp=0;
    3746:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    3748:	0691                	addi	a3,a3,4
                            cur=C[i*N+j];
    374a:	8f7e                	mv	t5,t6
    374c:	0006af83          	lw	t6,0(a3)
                                    ret+=10;
    3750:	1542                	slli	a0,a0,0x30
    3752:	03055293          	srli	t0,a0,0x30
                            tmp+=cur;
    3756:	01f7073b          	addw	a4,a4,t6
                            if (tmp>clipval) {
    375a:	12e85863          	bge	a6,a4,388a <matrix_sum+0x1ce>
                                    ret+=10;
    375e:	00a2871b          	addiw	a4,t0,10
    3762:	01071f1b          	slliw	t5,a4,0x10
    3766:	410f551b          	sraiw	a0,t5,0x10
                                    tmp=0;
    376a:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    376c:	0691                	addi	a3,a3,4
    376e:	08d59663          	bne	a1,a3,37fa <matrix_sum+0x13e>
            for (i=0; i<N; i++) {
    3772:	0885                	addi	a7,a7,1
    3774:	95f6                	add	a1,a1,t4
    3776:	f71e12e3          	bne	t3,a7,36da <matrix_sum+0x1e>
    377a:	8082                	ret
                                        ret += (cur>prev) ? 1 : 0;
    377c:	005fafb3          	slt	t6,t6,t0
    3780:	007f87bb          	addw	a5,t6,t2
                            cur=C[i*N+j];
    3784:	0046a383          	lw	t2,4(a3)
                                        ret += (cur>prev) ? 1 : 0;
    3788:	0107961b          	slliw	a2,a5,0x10
    378c:	4106551b          	sraiw	a0,a2,0x10
                                    ret+=10;
    3790:	03051f93          	slli	t6,a0,0x30
                            tmp+=cur;
    3794:	0077063b          	addw	a2,a4,t2
                    for (j=0; j<N; j++) {
    3798:	0691                	addi	a3,a3,4
                                    ret+=10;
    379a:	030fd793          	srli	a5,t6,0x30
                            if (tmp>clipval) {
    379e:	08c85963          	bge	a6,a2,3830 <matrix_sum+0x174>
                                    ret+=10;
    37a2:	00a78f9b          	addiw	t6,a5,10
                            cur=C[i*N+j];
    37a6:	0046a283          	lw	t0,4(a3)
                                    ret+=10;
    37aa:	010f979b          	slliw	a5,t6,0x10
    37ae:	4107d71b          	sraiw	a4,a5,0x10
                                    tmp=0;
    37b2:	4601                	li	a2,0
                                    ret+=10;
    37b4:	03071f13          	slli	t5,a4,0x30
                            tmp+=cur;
    37b8:	0056073b          	addw	a4,a2,t0
                                    ret+=10;
    37bc:	030f5f93          	srli	t6,t5,0x30
                            if (tmp>clipval) {
    37c0:	08e85a63          	bge	a6,a4,3854 <matrix_sum+0x198>
                                    ret+=10;
    37c4:	00af8f1b          	addiw	t5,t6,10
    37c8:	010f1f9b          	slliw	t6,t5,0x10
    37cc:	410fd79b          	sraiw	a5,t6,0x10
                            cur=C[i*N+j];
    37d0:	0086af83          	lw	t6,8(a3)
                                    tmp=0;
    37d4:	4701                	li	a4,0
                                    ret+=10;
    37d6:	03079393          	slli	t2,a5,0x30
                            tmp+=cur;
    37da:	01f7073b          	addw	a4,a4,t6
                                    ret+=10;
    37de:	0303d613          	srli	a2,t2,0x30
                            if (tmp>clipval) {
    37e2:	08e85b63          	bge	a6,a4,3878 <matrix_sum+0x1bc>
                                    ret+=10;
    37e6:	00a60f1b          	addiw	t5,a2,10
    37ea:	010f139b          	slliw	t2,t5,0x10
    37ee:	4103d51b          	sraiw	a0,t2,0x10
                                    tmp=0;
    37f2:	4701                	li	a4,0
                    for (j=0; j<N; j++) {
    37f4:	06b1                	addi	a3,a3,12
    37f6:	f6d58ee3          	beq	a1,a3,3772 <matrix_sum+0xb6>
                            cur=C[i*N+j];
    37fa:	0006a283          	lw	t0,0(a3)
                                    ret+=10;
    37fe:	1542                	slli	a0,a0,0x30
    3800:	03055393          	srli	t2,a0,0x30
                            tmp+=cur;
    3804:	0057073b          	addw	a4,a4,t0
                            if (tmp>clipval) {
    3808:	f6e85ae3          	bge	a6,a4,377c <matrix_sum+0xc0>
                                    ret+=10;
    380c:	00a3871b          	addiw	a4,t2,10
                            cur=C[i*N+j];
    3810:	0046a383          	lw	t2,4(a3)
                                    ret+=10;
    3814:	01071f1b          	slliw	t5,a4,0x10
    3818:	410f551b          	sraiw	a0,t5,0x10
                                    tmp=0;
    381c:	4701                	li	a4,0
                                    ret+=10;
    381e:	03051f93          	slli	t6,a0,0x30
                            tmp+=cur;
    3822:	0077063b          	addw	a2,a4,t2
                    for (j=0; j<N; j++) {
    3826:	0691                	addi	a3,a3,4
                                    ret+=10;
    3828:	030fd793          	srli	a5,t6,0x30
                            if (tmp>clipval) {
    382c:	f6c84be3          	blt	a6,a2,37a2 <matrix_sum+0xe6>
                                        ret += (cur>prev) ? 1 : 0;
    3830:	0072a2b3          	slt	t0,t0,t2
    3834:	00f28f3b          	addw	t5,t0,a5
                            cur=C[i*N+j];
    3838:	0046a283          	lw	t0,4(a3)
                                        ret += (cur>prev) ? 1 : 0;
    383c:	010f151b          	slliw	a0,t5,0x10
    3840:	4105571b          	sraiw	a4,a0,0x10
                                    ret+=10;
    3844:	03071f13          	slli	t5,a4,0x30
                            tmp+=cur;
    3848:	0056073b          	addw	a4,a2,t0
                                    ret+=10;
    384c:	030f5f93          	srli	t6,t5,0x30
                            if (tmp>clipval) {
    3850:	f6e84ae3          	blt	a6,a4,37c4 <matrix_sum+0x108>
                                        ret += (cur>prev) ? 1 : 0;
    3854:	0053a3b3          	slt	t2,t2,t0
    3858:	01f3863b          	addw	a2,t2,t6
                            cur=C[i*N+j];
    385c:	0086af83          	lw	t6,8(a3)
                                        ret += (cur>prev) ? 1 : 0;
    3860:	0106151b          	slliw	a0,a2,0x10
    3864:	4105579b          	sraiw	a5,a0,0x10
                                    ret+=10;
    3868:	03079393          	slli	t2,a5,0x30
                            tmp+=cur;
    386c:	01f7073b          	addw	a4,a4,t6
                                    ret+=10;
    3870:	0303d613          	srli	a2,t2,0x30
                            if (tmp>clipval) {
    3874:	f6e849e3          	blt	a6,a4,37e6 <matrix_sum+0x12a>
                                        ret += (cur>prev) ? 1 : 0;
    3878:	01f2a2b3          	slt	t0,t0,t6
    387c:	00c2853b          	addw	a0,t0,a2
    3880:	0105179b          	slliw	a5,a0,0x10
    3884:	4107d51b          	sraiw	a0,a5,0x10
    3888:	b7b5                	j	37f4 <matrix_sum+0x138>
    388a:	01ff27b3          	slt	a5,t5,t6
    388e:	005783bb          	addw	t2,a5,t0
    3892:	0103961b          	slliw	a2,t2,0x10
    3896:	4106551b          	sraiw	a0,a2,0x10
    389a:	bdc9                	j	376c <matrix_sum+0xb0>
    389c:	01f627b3          	slt	a5,a2,t6
    38a0:	01e782bb          	addw	t0,a5,t5
    38a4:	0102939b          	slliw	t2,t0,0x10
    38a8:	4103d51b          	sraiw	a0,t2,0x10
    38ac:	bd71                	j	3748 <matrix_sum+0x8c>
    38ae:	01f3af33          	slt	t5,t2,t6
    38b2:	00cf07bb          	addw	a5,t5,a2
    38b6:	0107929b          	slliw	t0,a5,0x10
    38ba:	4102d51b          	sraiw	a0,t0,0x10
    38be:	b59d                	j	3724 <matrix_sum+0x68>
            ee_s16 ret=0;
    38c0:	4501                	li	a0,0
    }
    38c2:	8082                	ret

00000000000038c4 <matrix_mul_const>:
            for (i=0; i<N; i++) {
    38c4:	14050c63          	beqz	a0,3a1c <matrix_mul_const+0x158>
    void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
    38c8:	1101                	addi	sp,sp,-32
    38ca:	00151393          	slli	t2,a0,0x1
    38ce:	40a002b3          	neg	t0,a0
    38d2:	ec22                	sd	s0,24(sp)
    38d4:	e826                	sd	s1,16(sp)
    38d6:	e44a                	sd	s2,8(sp)
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    38d8:	0006881b          	sext.w	a6,a3
    38dc:	961e                	add	a2,a2,t2
    38de:	0286                	slli	t0,t0,0x1
    38e0:	4f01                	li	t5,0
            for (i=0; i<N; i++) {
    38e2:	4f81                	li	t6,0
                    for (j=0; j<N; j++) {
    38e4:	40500733          	neg	a4,t0
    38e8:	ffe70313          	addi	t1,a4,-2
    38ec:	00135413          	srli	s0,t1,0x1
    38f0:	00140493          	addi	s1,s0,1
    38f4:	002f1793          	slli	a5,t5,0x2
    38f8:	0074f913          	andi	s2,s1,7
    38fc:	00c286b3          	add	a3,t0,a2
    3900:	97ae                	add	a5,a5,a1
    3902:	08090e63          	beqz	s2,399e <matrix_mul_const+0xda>
    3906:	4885                	li	a7,1
    3908:	09190163          	beq	s2,a7,398a <matrix_mul_const+0xc6>
    390c:	4e09                	li	t3,2
    390e:	07c90663          	beq	s2,t3,397a <matrix_mul_const+0xb6>
    3912:	4e8d                	li	t4,3
    3914:	05d90b63          	beq	s2,t4,396a <matrix_mul_const+0xa6>
    3918:	4711                	li	a4,4
    391a:	04e90063          	beq	s2,a4,395a <matrix_mul_const+0x96>
    391e:	4315                	li	t1,5
    3920:	02690563          	beq	s2,t1,394a <matrix_mul_const+0x86>
    3924:	4419                	li	s0,6
    3926:	00890a63          	beq	s2,s0,393a <matrix_mul_const+0x76>
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    392a:	00069483          	lh	s1,0(a3)
                    for (j=0; j<N; j++) {
    392e:	0791                	addi	a5,a5,4
    3930:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3932:	0304893b          	mulw	s2,s1,a6
    3936:	ff27ae23          	sw	s2,-4(a5)
    393a:	00069883          	lh	a7,0(a3)
                    for (j=0; j<N; j++) {
    393e:	0791                	addi	a5,a5,4
    3940:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3942:	03088e3b          	mulw	t3,a7,a6
    3946:	ffc7ae23          	sw	t3,-4(a5)
    394a:	00069e83          	lh	t4,0(a3)
                    for (j=0; j<N; j++) {
    394e:	0791                	addi	a5,a5,4
    3950:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3952:	030e873b          	mulw	a4,t4,a6
    3956:	fee7ae23          	sw	a4,-4(a5)
    395a:	00069303          	lh	t1,0(a3)
                    for (j=0; j<N; j++) {
    395e:	0791                	addi	a5,a5,4
    3960:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3962:	0303043b          	mulw	s0,t1,a6
    3966:	fe87ae23          	sw	s0,-4(a5)
    396a:	00069483          	lh	s1,0(a3)
                    for (j=0; j<N; j++) {
    396e:	0791                	addi	a5,a5,4
    3970:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3972:	0304893b          	mulw	s2,s1,a6
    3976:	ff27ae23          	sw	s2,-4(a5)
    397a:	00069883          	lh	a7,0(a3)
                    for (j=0; j<N; j++) {
    397e:	0791                	addi	a5,a5,4
    3980:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3982:	03088e3b          	mulw	t3,a7,a6
    3986:	ffc7ae23          	sw	t3,-4(a5)
    398a:	00069e83          	lh	t4,0(a3)
                    for (j=0; j<N; j++) {
    398e:	0791                	addi	a5,a5,4
    3990:	0689                	addi	a3,a3,2
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    3992:	030e873b          	mulw	a4,t4,a6
    3996:	fee7ae23          	sw	a4,-4(a5)
                    for (j=0; j<N; j++) {
    399a:	06d60763          	beq	a2,a3,3a08 <matrix_mul_const+0x144>
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    399e:	00069903          	lh	s2,0(a3)
    39a2:	00269483          	lh	s1,2(a3)
    39a6:	00469403          	lh	s0,4(a3)
    39aa:	00669e83          	lh	t4,6(a3)
    39ae:	00869e03          	lh	t3,8(a3)
    39b2:	00a69303          	lh	t1,10(a3)
    39b6:	00c69883          	lh	a7,12(a3)
    39ba:	00e69703          	lh	a4,14(a3)
    39be:	0309093b          	mulw	s2,s2,a6
                    for (j=0; j<N; j++) {
    39c2:	06c1                	addi	a3,a3,16
    39c4:	02078793          	addi	a5,a5,32
                            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    39c8:	030484bb          	mulw	s1,s1,a6
    39cc:	ff27a023          	sw	s2,-32(a5)
    39d0:	0304043b          	mulw	s0,s0,a6
    39d4:	fe97a223          	sw	s1,-28(a5)
    39d8:	030e8ebb          	mulw	t4,t4,a6
    39dc:	fe87a423          	sw	s0,-24(a5)
    39e0:	030e0e3b          	mulw	t3,t3,a6
    39e4:	ffd7a623          	sw	t4,-20(a5)
    39e8:	0303033b          	mulw	t1,t1,a6
    39ec:	ffc7a823          	sw	t3,-16(a5)
    39f0:	030888bb          	mulw	a7,a7,a6
    39f4:	fe67aa23          	sw	t1,-12(a5)
    39f8:	0307073b          	mulw	a4,a4,a6
    39fc:	ff17ac23          	sw	a7,-8(a5)
    3a00:	fee7ae23          	sw	a4,-4(a5)
                    for (j=0; j<N; j++) {
    3a04:	f8d61de3          	bne	a2,a3,399e <matrix_mul_const+0xda>
            for (i=0; i<N; i++) {
    3a08:	0f85                	addi	t6,t6,1
    3a0a:	9f2a                	add	t5,t5,a0
    3a0c:	961e                	add	a2,a2,t2
    3a0e:	edf51be3          	bne	a0,t6,38e4 <matrix_mul_const+0x20>
    }
    3a12:	6462                	ld	s0,24(sp)
    3a14:	64c2                	ld	s1,16(sp)
    3a16:	6922                	ld	s2,8(sp)
    3a18:	6105                	addi	sp,sp,32
    3a1a:	8082                	ret
    3a1c:	8082                	ret

0000000000003a1e <matrix_add_const>:
            for (i=0; i<N; i++) {
    3a1e:	3a050663          	beqz	a0,3dca <matrix_add_const+0x3ac>
    void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    3a22:	7175                	addi	sp,sp,-144
    3a24:	ecda                	sd	s6,88(sp)
                            A[i*N+j] += val;
    3a26:	03061b13          	slli	s6,a2,0x30
    3a2a:	030b5b13          	srli	s6,s6,0x30
    3a2e:	010b1693          	slli	a3,s6,0x10
    3a32:	67a5                	lui	a5,0x9
    3a34:	00db62b3          	or	t0,s6,a3
    3a38:	8507b603          	ld	a2,-1968(a5) # 8850 <_end>
    void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    3a3c:	e522                	sd	s0,136(sp)
    3a3e:	020b1713          	slli	a4,s6,0x20
    3a42:	6425                	lui	s0,0x9
    3a44:	030b1313          	slli	t1,s6,0x30
    3a48:	00e2e3b3          	or	t2,t0,a4
                            A[i*N+j] += val;
    3a4c:	85843803          	ld	a6,-1960(s0) # 8858 <_end+0x8>
    3a50:	0063e6b3          	or	a3,t2,t1
    void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    3a54:	e126                	sd	s1,128(sp)
    3a56:	f0d6                	sd	s5,96(sp)
    3a58:	00151493          	slli	s1,a0,0x1
    3a5c:	8aae                	mv	s5,a1
    3a5e:	8e2e                	mv	t3,a1
    3a60:	fff50593          	addi	a1,a0,-1
    3a64:	fcca                	sd	s2,120(sp)
    3a66:	ec2e                	sd	a1,24(sp)
    3a68:	f8ce                	sd	s3,112(sp)
    3a6a:	f4d2                	sd	s4,104(sp)
    3a6c:	e8de                	sd	s7,80(sp)
    3a6e:	e4e2                	sd	s8,72(sp)
    3a70:	e0e6                	sd	s9,64(sp)
    3a72:	fc6a                	sd	s10,56(sp)
    3a74:	f86e                	sd	s11,48(sp)
    3a76:	e826                	sd	s1,16(sp)
                            A[i*N+j] += val;
    3a78:	4301                	li	t1,0
            for (i=0; i<N; i++) {
    3a7a:	4901                	li	s2,0
                            A[i*N+j] += val;
    3a7c:	00c6f5b3          	and	a1,a3,a2
                    for (j=0; j<N; j++) {
    3a80:	001e5893          	srli	a7,t3,0x1
    3a84:	411009b3          	neg	s3,a7
    3a88:	0039fa13          	andi	s4,s3,3
    3a8c:	003a0c13          	addi	s8,s4,3
    3a90:	4b95                	li	s7,5
    3a92:	017c7363          	bgeu	s8,s7,3a98 <matrix_add_const+0x7a>
    3a96:	4c15                	li	s8,5
    3a98:	6ce2                	ld	s9,24(sp)
    3a9a:	338ce663          	bltu	s9,s8,3dc6 <matrix_add_const+0x3a8>
    3a9e:	4701                	li	a4,0
    3aa0:	020a0c63          	beqz	s4,3ad8 <matrix_add_const+0xba>
                            A[i*N+j] += val;
    3aa4:	000e5d03          	lhu	s10,0(t3)
                    for (j=0; j<N; j++) {
    3aa8:	4705                	li	a4,1
                            A[i*N+j] += val;
    3aaa:	016d0dbb          	addw	s11,s10,s6
    3aae:	01be1023          	sh	s11,0(t3)
                    for (j=0; j<N; j++) {
    3ab2:	02ea0363          	beq	s4,a4,3ad8 <matrix_add_const+0xba>
                            A[i*N+j] += val;
    3ab6:	002e5f03          	lhu	t5,2(t3)
    3aba:	4e8d                	li	t4,3
                    for (j=0; j<N; j++) {
    3abc:	4709                	li	a4,2
                            A[i*N+j] += val;
    3abe:	016f0fbb          	addw	t6,t5,s6
    3ac2:	01fe1123          	sh	t6,2(t3)
                    for (j=0; j<N; j++) {
    3ac6:	01da1963          	bne	s4,t4,3ad8 <matrix_add_const+0xba>
                            A[i*N+j] += val;
    3aca:	004e5783          	lhu	a5,4(t3)
                    for (j=0; j<N; j++) {
    3ace:	470d                	li	a4,3
                            A[i*N+j] += val;
    3ad0:	016782bb          	addw	t0,a5,s6
    3ad4:	005e1223          	sh	t0,4(t3)
                    for (j=0; j<N; j++) {
    3ad8:	414509b3          	sub	s3,a0,s4
    3adc:	0029d393          	srli	t2,s3,0x2
    3ae0:	00339413          	slli	s0,t2,0x3
    3ae4:	9a1a                	add	s4,s4,t1
    3ae6:	ff840493          	addi	s1,s0,-8
    3aea:	001a1b93          	slli	s7,s4,0x1
    3aee:	0034d893          	srli	a7,s1,0x3
    3af2:	017a87b3          	add	a5,s5,s7
    3af6:	00188c13          	addi	s8,a7,1
    3afa:	00f40d33          	add	s10,s0,a5
    3afe:	007c7c93          	andi	s9,s8,7
    3b02:	e46a                	sd	s10,8(sp)
    3b04:	0e0c8f63          	beqz	s9,3c02 <matrix_add_const+0x1e4>
    3b08:	4d85                	li	s11,1
    3b0a:	0dbc8a63          	beq	s9,s11,3bde <matrix_add_const+0x1c0>
    3b0e:	4f09                	li	t5,2
    3b10:	0bec8863          	beq	s9,t5,3bc0 <matrix_add_const+0x1a2>
    3b14:	4e8d                	li	t4,3
    3b16:	09dc8663          	beq	s9,t4,3ba2 <matrix_add_const+0x184>
    3b1a:	4f91                	li	t6,4
    3b1c:	07fc8463          	beq	s9,t6,3b84 <matrix_add_const+0x166>
    3b20:	4295                	li	t0,5
    3b22:	045c8263          	beq	s9,t0,3b66 <matrix_add_const+0x148>
    3b26:	4399                	li	t2,6
    3b28:	027c8063          	beq	s9,t2,3b48 <matrix_add_const+0x12a>
                            A[i*N+j] += val;
    3b2c:	6380                	ld	s0,0(a5)
    3b2e:	07a1                	addi	a5,a5,8
    3b30:	00c474b3          	and	s1,s0,a2
    3b34:	0086ca33          	xor	s4,a3,s0
    3b38:	00958bb3          	add	s7,a1,s1
    3b3c:	010a78b3          	and	a7,s4,a6
    3b40:	011bcc33          	xor	s8,s7,a7
    3b44:	ff87bc23          	sd	s8,-8(a5)
    3b48:	0007bc83          	ld	s9,0(a5)
    3b4c:	07a1                	addi	a5,a5,8
    3b4e:	00ccfd33          	and	s10,s9,a2
    3b52:	0196cdb3          	xor	s11,a3,s9
    3b56:	01a58f33          	add	t5,a1,s10
    3b5a:	010dfeb3          	and	t4,s11,a6
    3b5e:	01df4fb3          	xor	t6,t5,t4
    3b62:	fff7bc23          	sd	t6,-8(a5)
    3b66:	0007b283          	ld	t0,0(a5)
    3b6a:	07a1                	addi	a5,a5,8
    3b6c:	00c2f3b3          	and	t2,t0,a2
    3b70:	0056c433          	xor	s0,a3,t0
    3b74:	007584b3          	add	s1,a1,t2
    3b78:	01047a33          	and	s4,s0,a6
    3b7c:	0144cbb3          	xor	s7,s1,s4
    3b80:	ff77bc23          	sd	s7,-8(a5)
    3b84:	0007b883          	ld	a7,0(a5)
    3b88:	07a1                	addi	a5,a5,8
    3b8a:	00c8fc33          	and	s8,a7,a2
    3b8e:	0116ccb3          	xor	s9,a3,a7
    3b92:	01858d33          	add	s10,a1,s8
    3b96:	010cfdb3          	and	s11,s9,a6
    3b9a:	01bd4f33          	xor	t5,s10,s11
    3b9e:	ffe7bc23          	sd	t5,-8(a5)
    3ba2:	0007bf83          	ld	t6,0(a5)
    3ba6:	07a1                	addi	a5,a5,8
    3ba8:	00cffeb3          	and	t4,t6,a2
    3bac:	01f6c2b3          	xor	t0,a3,t6
    3bb0:	01d583b3          	add	t2,a1,t4
    3bb4:	0102f433          	and	s0,t0,a6
    3bb8:	0083c4b3          	xor	s1,t2,s0
    3bbc:	fe97bc23          	sd	s1,-8(a5)
    3bc0:	0007ba03          	ld	s4,0(a5)
    3bc4:	07a1                	addi	a5,a5,8
    3bc6:	00ca7bb3          	and	s7,s4,a2
    3bca:	0146c8b3          	xor	a7,a3,s4
    3bce:	01758c33          	add	s8,a1,s7
    3bd2:	0108fcb3          	and	s9,a7,a6
    3bd6:	019c4d33          	xor	s10,s8,s9
    3bda:	ffa7bc23          	sd	s10,-8(a5)
    3bde:	0007bd83          	ld	s11,0(a5)
    3be2:	6422                	ld	s0,8(sp)
    3be4:	07a1                	addi	a5,a5,8
    3be6:	00cdff33          	and	t5,s11,a2
    3bea:	01b6cfb3          	xor	t6,a3,s11
    3bee:	01e58eb3          	add	t4,a1,t5
    3bf2:	010ff2b3          	and	t0,t6,a6
    3bf6:	005ec3b3          	xor	t2,t4,t0
    3bfa:	fe77bc23          	sd	t2,-8(a5)
                    for (j=0; j<N; j++) {
    3bfe:	0c878f63          	beq	a5,s0,3cdc <matrix_add_const+0x2be>
    3c02:	f03a                	sd	a4,32(sp)
    3c04:	f41a                	sd	t1,40(sp)
                            A[i*N+j] += val;
    3c06:	6384                	ld	s1,0(a5)
    3c08:	0107ba03          	ld	s4,16(a5)
    3c0c:	0087b303          	ld	t1,8(a5)
    3c10:	0207bf83          	ld	t6,32(a5)
    3c14:	6f98                	ld	a4,24(a5)
    3c16:	0287bf03          	ld	t5,40(a5)
    3c1a:	0307be83          	ld	t4,48(a5)
    3c1e:	0387bc03          	ld	s8,56(a5)
    3c22:	00c4fbb3          	and	s7,s1,a2
    3c26:	0096c2b3          	xor	t0,a3,s1
    3c2a:	00c37db3          	and	s11,t1,a2
    3c2e:	00ca7d33          	and	s10,s4,a2
    3c32:	0146c8b3          	xor	a7,a3,s4
    3c36:	0066c333          	xor	t1,a3,t1
    3c3a:	00cffa33          	and	s4,t6,a2
    3c3e:	01f6cfb3          	xor	t6,a3,t6
    3c42:	00c77cb3          	and	s9,a4,a2
    3c46:	00cf74b3          	and	s1,t5,a2
    3c4a:	00cef433          	and	s0,t4,a2
    3c4e:	00cc73b3          	and	t2,s8,a2
    3c52:	0102f2b3          	and	t0,t0,a6
    3c56:	9dae                	add	s11,s11,a1
    3c58:	01037333          	and	t1,t1,a6
    3c5c:	9d2e                	add	s10,s10,a1
    3c5e:	0108f8b3          	and	a7,a7,a6
    3c62:	9a2e                	add	s4,s4,a1
    3c64:	8f35                	xor	a4,a4,a3
    3c66:	01e6cf33          	xor	t5,a3,t5
    3c6a:	01d6ceb3          	xor	t4,a3,t4
    3c6e:	0186cc33          	xor	s8,a3,s8
    3c72:	9bae                	add	s7,s7,a1
    3c74:	010fffb3          	and	t6,t6,a6
    3c78:	9cae                	add	s9,s9,a1
    3c7a:	01077733          	and	a4,a4,a6
    3c7e:	005bcbb3          	xor	s7,s7,t0
    3c82:	94ae                	add	s1,s1,a1
    3c84:	006dc2b3          	xor	t0,s11,t1
    3c88:	010f7f33          	and	t5,t5,a6
    3c8c:	011d4db3          	xor	s11,s10,a7
    3c90:	942e                	add	s0,s0,a1
    3c92:	01fa4d33          	xor	s10,s4,t6
    3c96:	010efeb3          	and	t4,t4,a6
    3c9a:	93ae                	add	t2,t2,a1
    3c9c:	010c7c33          	and	s8,s8,a6
    3ca0:	6a22                	ld	s4,8(sp)
    3ca2:	00ecc333          	xor	t1,s9,a4
    3ca6:	01e4c8b3          	xor	a7,s1,t5
    3caa:	01d44cb3          	xor	s9,s0,t4
    3cae:	0183c733          	xor	a4,t2,s8
    3cb2:	0177b023          	sd	s7,0(a5)
    3cb6:	0057b423          	sd	t0,8(a5)
    3cba:	01b7b823          	sd	s11,16(a5)
    3cbe:	0067bc23          	sd	t1,24(a5)
    3cc2:	03a7b023          	sd	s10,32(a5)
    3cc6:	0317b423          	sd	a7,40(a5)
    3cca:	0397b823          	sd	s9,48(a5)
    3cce:	ff98                	sd	a4,56(a5)
                    for (j=0; j<N; j++) {
    3cd0:	04078793          	addi	a5,a5,64
    3cd4:	f34799e3          	bne	a5,s4,3c06 <matrix_add_const+0x1e8>
    3cd8:	7702                	ld	a4,32(sp)
    3cda:	7322                	ld	t1,40(sp)
    3cdc:	ffc9f793          	andi	a5,s3,-4
    3ce0:	00f70fb3          	add	t6,a4,a5
    3ce4:	0af98d63          	beq	s3,a5,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3ce8:	01f309b3          	add	s3,t1,t6
    3cec:	00199493          	slli	s1,s3,0x1
    3cf0:	009a8f33          	add	t5,s5,s1
    3cf4:	000f5403          	lhu	s0,0(t5)
                    for (j=0; j<N; j++) {
    3cf8:	001f8393          	addi	t2,t6,1
                            A[i*N+j] += val;
    3cfc:	01640ebb          	addw	t4,s0,s6
    3d00:	01df1023          	sh	t4,0(t5)
                    for (j=0; j<N; j++) {
    3d04:	08a3fd63          	bgeu	t2,a0,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3d08:	00730c33          	add	s8,t1,t2
    3d0c:	001c1b93          	slli	s7,s8,0x1
    3d10:	017a82b3          	add	t0,s5,s7
    3d14:	0002dd83          	lhu	s11,0(t0)
                    for (j=0; j<N; j++) {
    3d18:	002f8d13          	addi	s10,t6,2
                            A[i*N+j] += val;
    3d1c:	016d88bb          	addw	a7,s11,s6
    3d20:	01129023          	sh	a7,0(t0)
                    for (j=0; j<N; j++) {
    3d24:	06ad7d63          	bgeu	s10,a0,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3d28:	01a30cb3          	add	s9,t1,s10
    3d2c:	001c9713          	slli	a4,s9,0x1
    3d30:	00ea8a33          	add	s4,s5,a4
    3d34:	000a5983          	lhu	s3,0(s4)
                    for (j=0; j<N; j++) {
    3d38:	003f8793          	addi	a5,t6,3
                            A[i*N+j] += val;
    3d3c:	016984bb          	addw	s1,s3,s6
    3d40:	009a1023          	sh	s1,0(s4)
                    for (j=0; j<N; j++) {
    3d44:	04a7fd63          	bgeu	a5,a0,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3d48:	00f30f33          	add	t5,t1,a5
    3d4c:	001f1413          	slli	s0,t5,0x1
    3d50:	008a83b3          	add	t2,s5,s0
    3d54:	0003de83          	lhu	t4,0(t2)
                    for (j=0; j<N; j++) {
    3d58:	004f8c13          	addi	s8,t6,4
                            A[i*N+j] += val;
    3d5c:	016e8bbb          	addw	s7,t4,s6
    3d60:	01739023          	sh	s7,0(t2)
                    for (j=0; j<N; j++) {
    3d64:	02ac7d63          	bgeu	s8,a0,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3d68:	018302b3          	add	t0,t1,s8
    3d6c:	00129d93          	slli	s11,t0,0x1
    3d70:	01ba8d33          	add	s10,s5,s11
    3d74:	000d5883          	lhu	a7,0(s10)
                    for (j=0; j<N; j++) {
    3d78:	0f95                	addi	t6,t6,5
                            A[i*N+j] += val;
    3d7a:	01688cbb          	addw	s9,a7,s6
    3d7e:	019d1023          	sh	s9,0(s10)
                    for (j=0; j<N; j++) {
    3d82:	00affe63          	bgeu	t6,a0,3d9e <matrix_add_const+0x380>
                            A[i*N+j] += val;
    3d86:	01f30733          	add	a4,t1,t6
    3d8a:	00171a13          	slli	s4,a4,0x1
    3d8e:	014a89b3          	add	s3,s5,s4
    3d92:	0009d783          	lhu	a5,0(s3)
    3d96:	016784bb          	addw	s1,a5,s6
    3d9a:	00999023          	sh	s1,0(s3)
            for (i=0; i<N; i++) {
    3d9e:	6f42                	ld	t5,16(sp)
    3da0:	0905                	addi	s2,s2,1
    3da2:	932a                	add	t1,t1,a0
    3da4:	9e7a                	add	t3,t3,t5
    3da6:	cd251de3          	bne	a0,s2,3a80 <matrix_add_const+0x62>
    }
    3daa:	642a                	ld	s0,136(sp)
    3dac:	648a                	ld	s1,128(sp)
    3dae:	7966                	ld	s2,120(sp)
    3db0:	79c6                	ld	s3,112(sp)
    3db2:	7a26                	ld	s4,104(sp)
    3db4:	7a86                	ld	s5,96(sp)
    3db6:	6b66                	ld	s6,88(sp)
    3db8:	6bc6                	ld	s7,80(sp)
    3dba:	6c26                	ld	s8,72(sp)
    3dbc:	6c86                	ld	s9,64(sp)
    3dbe:	7d62                	ld	s10,56(sp)
    3dc0:	7dc2                	ld	s11,48(sp)
    3dc2:	6149                	addi	sp,sp,144
    3dc4:	8082                	ret
                    for (j=0; j<N; j++) {
    3dc6:	4f81                	li	t6,0
    3dc8:	b705                	j	3ce8 <matrix_add_const+0x2ca>
    3dca:	8082                	ret

0000000000003dcc <matrix_mul_vect>:
            for (i=0; i<N; i++) {
    3dcc:	1a050f63          	beqz	a0,3f8a <matrix_mul_vect+0x1be>
    void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    3dd0:	711d                	addi	sp,sp,-96
    3dd2:	e4a6                	sd	s1,72(sp)
    3dd4:	84aa                	mv	s1,a0
    3dd6:	fc4e                	sd	s3,56(sp)
                    C[i]=0;
    3dd8:	00249993          	slli	s3,s1,0x2
    void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    3ddc:	e0ca                	sd	s2,64(sp)
    3dde:	852e                	mv	a0,a1
    3de0:	8932                	mv	s2,a2
                    C[i]=0;
    3de2:	4581                	li	a1,0
    3de4:	864e                	mv	a2,s3
    void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    3de6:	e8a2                	sd	s0,80(sp)
    3de8:	ec86                	sd	ra,88(sp)
    3dea:	8436                	mv	s0,a3
    3dec:	f852                	sd	s4,48(sp)
    3dee:	f456                	sd	s5,40(sp)
    3df0:	f05a                	sd	s6,32(sp)
    3df2:	ec5e                	sd	s7,24(sp)
    3df4:	e862                	sd	s8,16(sp)
    3df6:	e466                	sd	s9,8(sp)
                    C[i]=0;
    3df8:	519030ef          	jal	ra,7b10 <memset>
    3dfc:	00149693          	slli	a3,s1,0x1
    3e00:	85aa                	mv	a1,a0
    3e02:	96a2                	add	a3,a3,s0
    3e04:	954e                	add	a0,a0,s3
    3e06:	4601                	li	a2,0
                    for (j=0; j<N; j++) {
    3e08:	40868833          	sub	a6,a3,s0
    3e0c:	ffe80093          	addi	ra,a6,-2
    3e10:	0010d293          	srli	t0,ra,0x1
    3e14:	00128313          	addi	t1,t0,1
    3e18:	00161793          	slli	a5,a2,0x1
    3e1c:	00737393          	andi	t2,t1,7
    3e20:	97ca                	add	a5,a5,s2
                    C[i]=0;
    3e22:	8722                	mv	a4,s0
    3e24:	4881                	li	a7,0
    3e26:	0a038b63          	beqz	t2,3edc <matrix_mul_vect+0x110>
    3e2a:	4a05                	li	s4,1
    3e2c:	09438c63          	beq	t2,s4,3ec4 <matrix_mul_vect+0xf8>
    3e30:	4a89                	li	s5,2
    3e32:	07538f63          	beq	t2,s5,3eb0 <matrix_mul_vect+0xe4>
    3e36:	4b0d                	li	s6,3
    3e38:	07638263          	beq	t2,s6,3e9c <matrix_mul_vect+0xd0>
    3e3c:	4b91                	li	s7,4
    3e3e:	05738563          	beq	t2,s7,3e88 <matrix_mul_vect+0xbc>
    3e42:	4c15                	li	s8,5
    3e44:	03838863          	beq	t2,s8,3e74 <matrix_mul_vect+0xa8>
    3e48:	4c99                	li	s9,6
    3e4a:	01938b63          	beq	t2,s9,3e60 <matrix_mul_vect+0x94>
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3e4e:	00079883          	lh	a7,0(a5)
    3e52:	00041e03          	lh	t3,0(s0)
                    for (j=0; j<N; j++) {
    3e56:	0789                	addi	a5,a5,2
    3e58:	00240713          	addi	a4,s0,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3e5c:	03c888bb          	mulw	a7,a7,t3
    3e60:	00079e83          	lh	t4,0(a5)
    3e64:	00071f03          	lh	t5,0(a4)
                    for (j=0; j<N; j++) {
    3e68:	0789                	addi	a5,a5,2
    3e6a:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3e6c:	03ee8fbb          	mulw	t6,t4,t5
    3e70:	011f88bb          	addw	a7,t6,a7
    3e74:	00079983          	lh	s3,0(a5)
    3e78:	00071803          	lh	a6,0(a4)
                    for (j=0; j<N; j++) {
    3e7c:	0789                	addi	a5,a5,2
    3e7e:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3e80:	030980bb          	mulw	ra,s3,a6
    3e84:	011088bb          	addw	a7,ra,a7
    3e88:	00079283          	lh	t0,0(a5)
    3e8c:	00071303          	lh	t1,0(a4)
                    for (j=0; j<N; j++) {
    3e90:	0789                	addi	a5,a5,2
    3e92:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3e94:	026283bb          	mulw	t2,t0,t1
    3e98:	011388bb          	addw	a7,t2,a7
    3e9c:	00079a03          	lh	s4,0(a5)
    3ea0:	00071a83          	lh	s5,0(a4)
                    for (j=0; j<N; j++) {
    3ea4:	0789                	addi	a5,a5,2
    3ea6:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3ea8:	035a0b3b          	mulw	s6,s4,s5
    3eac:	011b08bb          	addw	a7,s6,a7
    3eb0:	00079b83          	lh	s7,0(a5)
    3eb4:	00071c03          	lh	s8,0(a4)
                    for (j=0; j<N; j++) {
    3eb8:	0789                	addi	a5,a5,2
    3eba:	0709                	addi	a4,a4,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3ebc:	038b8cbb          	mulw	s9,s7,s8
    3ec0:	011c88bb          	addw	a7,s9,a7
    3ec4:	00079e03          	lh	t3,0(a5)
    3ec8:	00071e83          	lh	t4,0(a4)
                    for (j=0; j<N; j++) {
    3ecc:	0709                	addi	a4,a4,2
    3ece:	0789                	addi	a5,a5,2
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3ed0:	03de0f3b          	mulw	t5,t3,t4
    3ed4:	011f08bb          	addw	a7,t5,a7
                    for (j=0; j<N; j++) {
    3ed8:	08e68663          	beq	a3,a4,3f64 <matrix_mul_vect+0x198>
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3edc:	00079983          	lh	s3,0(a5)
    3ee0:	00071803          	lh	a6,0(a4)
    3ee4:	00271083          	lh	ra,2(a4)
    3ee8:	00279f83          	lh	t6,2(a5)
    3eec:	03098b3b          	mulw	s6,s3,a6
    3ef0:	00479c83          	lh	s9,4(a5)
    3ef4:	00471c03          	lh	s8,4(a4)
    3ef8:	00679e83          	lh	t4,6(a5)
    3efc:	00671b83          	lh	s7,6(a4)
    3f00:	00879e03          	lh	t3,8(a5)
    3f04:	00871a83          	lh	s5,8(a4)
    3f08:	00a79303          	lh	t1,10(a5)
    3f0c:	00a71a03          	lh	s4,10(a4)
    3f10:	00c79803          	lh	a6,12(a5)
    3f14:	021f8fbb          	mulw	t6,t6,ra
    3f18:	00c71983          	lh	s3,12(a4)
    3f1c:	00e79283          	lh	t0,14(a5)
    3f20:	00e71383          	lh	t2,14(a4)
    3f24:	011b08bb          	addw	a7,s6,a7
                    for (j=0; j<N; j++) {
    3f28:	0741                	addi	a4,a4,16
    3f2a:	07c1                	addi	a5,a5,16
                            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    3f2c:	038c8f3b          	mulw	t5,s9,s8
    3f30:	011f80bb          	addw	ra,t6,a7
    3f34:	037e8cbb          	mulw	s9,t4,s7
    3f38:	001f0c3b          	addw	s8,t5,ra
    3f3c:	035e0bbb          	mulw	s7,t3,s5
    3f40:	018c8ebb          	addw	t4,s9,s8
    3f44:	03430b3b          	mulw	s6,t1,s4
    3f48:	01db8e3b          	addw	t3,s7,t4
    3f4c:	03380abb          	mulw	s5,a6,s3
    3f50:	01cb033b          	addw	t1,s6,t3
    3f54:	02728a3b          	mulw	s4,t0,t2
    3f58:	006a883b          	addw	a6,s5,t1
    3f5c:	010a08bb          	addw	a7,s4,a6
                    for (j=0; j<N; j++) {
    3f60:	f6e69ee3          	bne	a3,a4,3edc <matrix_mul_vect+0x110>
    3f64:	0115a023          	sw	a7,0(a1)
            for (i=0; i<N; i++) {
    3f68:	0591                	addi	a1,a1,4
    3f6a:	9626                	add	a2,a2,s1
    3f6c:	e8b51ee3          	bne	a0,a1,3e08 <matrix_mul_vect+0x3c>
    }
    3f70:	60e6                	ld	ra,88(sp)
    3f72:	6446                	ld	s0,80(sp)
    3f74:	64a6                	ld	s1,72(sp)
    3f76:	6906                	ld	s2,64(sp)
    3f78:	79e2                	ld	s3,56(sp)
    3f7a:	7a42                	ld	s4,48(sp)
    3f7c:	7aa2                	ld	s5,40(sp)
    3f7e:	7b02                	ld	s6,32(sp)
    3f80:	6be2                	ld	s7,24(sp)
    3f82:	6c42                	ld	s8,16(sp)
    3f84:	6ca2                	ld	s9,8(sp)
    3f86:	6125                	addi	sp,sp,96
    3f88:	8082                	ret
    3f8a:	8082                	ret

0000000000003f8c <matrix_mul_matrix>:
    void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    3f8c:	7119                	addi	sp,sp,-128
    3f8e:	fc86                	sd	ra,120(sp)
    3f90:	f8a2                	sd	s0,112(sp)
    3f92:	f4a6                	sd	s1,104(sp)
    3f94:	f0ca                	sd	s2,96(sp)
    3f96:	ecce                	sd	s3,88(sp)
    3f98:	e8d2                	sd	s4,80(sp)
    3f9a:	e4d6                	sd	s5,72(sp)
    3f9c:	e0da                	sd	s6,64(sp)
    3f9e:	fc5e                	sd	s7,56(sp)
    3fa0:	f862                	sd	s8,48(sp)
    3fa2:	f466                	sd	s9,40(sp)
    3fa4:	f06a                	sd	s10,32(sp)
    3fa6:	ec6e                	sd	s11,24(sp)
    3fa8:	e02e                	sd	a1,0(sp)
    3faa:	e436                	sd	a3,8(sp)
            for (i=0; i<N; i++) {
    3fac:	1c050563          	beqz	a0,4176 <matrix_mul_matrix+0x1ea>
    3fb0:	00151413          	slli	s0,a0,0x1
    3fb4:	8aaa                	mv	s5,a0
    3fb6:	89b2                	mv	s3,a2
    3fb8:	00860933          	add	s2,a2,s0
                            C[i*N+j]=0;
    3fbc:	00251493          	slli	s1,a0,0x2
    3fc0:	4b01                	li	s6,0
            for (i=0; i<N; i++) {
    3fc2:	4b81                	li	s7,0
                    for (j=0; j<N; j++) {
    3fc4:	6782                	ld	a5,0(sp)
    3fc6:	002b1f13          	slli	t5,s6,0x2
                            C[i*N+j]=0;
    3fca:	8626                	mv	a2,s1
    3fcc:	01e78533          	add	a0,a5,t5
    3fd0:	4581                	li	a1,0
    3fd2:	33f030ef          	jal	ra,7b10 <memset>
    3fd6:	6622                	ld	a2,8(sp)
    3fd8:	8f2a                	mv	t5,a0
                    for (j=0; j<N; j++) {
    3fda:	4f81                	li	t6,0
                            for(k=0;k<N;k++)
    3fdc:	413905b3          	sub	a1,s2,s3
    3fe0:	ffe58093          	addi	ra,a1,-2
    3fe4:	0010d293          	srli	t0,ra,0x1
    3fe8:	00128313          	addi	t1,t0,1
    3fec:	00737393          	andi	t2,t1,7
    3ff0:	8732                	mv	a4,a2
    3ff2:	87ce                	mv	a5,s3
    3ff4:	4681                	li	a3,0
    3ff6:	0a038a63          	beqz	t2,40aa <matrix_mul_matrix+0x11e>
    3ffa:	4805                	li	a6,1
    3ffc:	09038c63          	beq	t2,a6,4094 <matrix_mul_matrix+0x108>
    4000:	4889                	li	a7,2
    4002:	07138f63          	beq	t2,a7,4080 <matrix_mul_matrix+0xf4>
    4006:	4a0d                	li	s4,3
    4008:	07438263          	beq	t2,s4,406c <matrix_mul_matrix+0xe0>
    400c:	4c11                	li	s8,4
    400e:	05838563          	beq	t2,s8,4058 <matrix_mul_matrix+0xcc>
    4012:	4c95                	li	s9,5
    4014:	03938863          	beq	t2,s9,4044 <matrix_mul_matrix+0xb8>
    4018:	4d19                	li	s10,6
    401a:	01a38c63          	beq	t2,s10,4032 <matrix_mul_matrix+0xa6>
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    401e:	00099d83          	lh	s11,0(s3)
    4022:	00061683          	lh	a3,0(a2)
                            for(k=0;k<N;k++)
    4026:	00298793          	addi	a5,s3,2
    402a:	00860733          	add	a4,a2,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    402e:	02dd86bb          	mulw	a3,s11,a3
    4032:	00079e03          	lh	t3,0(a5)
    4036:	00071e83          	lh	t4,0(a4)
                            for(k=0;k<N;k++)
    403a:	0789                	addi	a5,a5,2
    403c:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    403e:	03de053b          	mulw	a0,t3,t4
    4042:	9ea9                	addw	a3,a3,a0
    4044:	00079583          	lh	a1,0(a5)
    4048:	00071083          	lh	ra,0(a4)
                            for(k=0;k<N;k++)
    404c:	0789                	addi	a5,a5,2
    404e:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4050:	021582bb          	mulw	t0,a1,ra
    4054:	00d286bb          	addw	a3,t0,a3
    4058:	00079303          	lh	t1,0(a5)
    405c:	00071383          	lh	t2,0(a4)
                            for(k=0;k<N;k++)
    4060:	0789                	addi	a5,a5,2
    4062:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4064:	0273083b          	mulw	a6,t1,t2
    4068:	00d806bb          	addw	a3,a6,a3
    406c:	00079883          	lh	a7,0(a5)
    4070:	00071a03          	lh	s4,0(a4)
                            for(k=0;k<N;k++)
    4074:	0789                	addi	a5,a5,2
    4076:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4078:	03488c3b          	mulw	s8,a7,s4
    407c:	00dc06bb          	addw	a3,s8,a3
    4080:	00079c83          	lh	s9,0(a5)
    4084:	00071d03          	lh	s10,0(a4)
                            for(k=0;k<N;k++)
    4088:	0789                	addi	a5,a5,2
    408a:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    408c:	03ac8dbb          	mulw	s11,s9,s10
    4090:	00dd86bb          	addw	a3,s11,a3
    4094:	00079e03          	lh	t3,0(a5)
    4098:	00071e83          	lh	t4,0(a4)
                            for(k=0;k<N;k++)
    409c:	0789                	addi	a5,a5,2
    409e:	9722                	add	a4,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40a0:	03de053b          	mulw	a0,t3,t4
    40a4:	9ea9                	addw	a3,a3,a0
                            for(k=0;k<N;k++)
    40a6:	0af90563          	beq	s2,a5,4150 <matrix_mul_matrix+0x1c4>
    40aa:	008700b3          	add	ra,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40ae:	00079283          	lh	t0,0(a5)
    40b2:	00071383          	lh	t2,0(a4)
                            for(k=0;k<N;k++)
    40b6:	008085b3          	add	a1,ra,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40ba:	00009e83          	lh	t4,0(ra)
    40be:	00279c03          	lh	s8,2(a5)
                            for(k=0;k<N;k++)
    40c2:	00858833          	add	a6,a1,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40c6:	00059d03          	lh	s10,0(a1)
    40ca:	00479303          	lh	t1,4(a5)
    40ce:	02728dbb          	mulw	s11,t0,t2
    40d2:	00081c83          	lh	s9,0(a6)
                            for(k=0;k<N;k++)
    40d6:	00880a33          	add	s4,a6,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40da:	00679883          	lh	a7,6(a5)
                            for(k=0;k<N;k++)
    40de:	008a0733          	add	a4,s4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40e2:	00879083          	lh	ra,8(a5)
    40e6:	000a1803          	lh	a6,0(s4)
                            for(k=0;k<N;k++)
    40ea:	00870e33          	add	t3,a4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40ee:	00071383          	lh	t2,0(a4)
    40f2:	00a79503          	lh	a0,10(a5)
    40f6:	03dc0c3b          	mulw	s8,s8,t4
                            for(k=0;k<N;k++)
    40fa:	008e0a33          	add	s4,t3,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    40fe:	00c79583          	lh	a1,12(a5)
    4102:	000e1283          	lh	t0,0(t3)
    4106:	000a1e83          	lh	t4,0(s4)
    410a:	00e79e03          	lh	t3,14(a5)
                            for(k=0;k<N;k++)
    410e:	008a0733          	add	a4,s4,s0
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4112:	00dd86bb          	addw	a3,s11,a3
                            for(k=0;k<N;k++)
    4116:	07c1                	addi	a5,a5,16
                                        C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4118:	03a3033b          	mulw	t1,t1,s10
    411c:	00dc0d3b          	addw	s10,s8,a3
    4120:	039888bb          	mulw	a7,a7,s9
    4124:	01a30dbb          	addw	s11,t1,s10
    4128:	03008cbb          	mulw	s9,ra,a6
    412c:	01b880bb          	addw	ra,a7,s11
    4130:	0275053b          	mulw	a0,a0,t2
    4134:	001c883b          	addw	a6,s9,ra
    4138:	025583bb          	mulw	t2,a1,t0
    413c:	010505bb          	addw	a1,a0,a6
    4140:	03de0a3b          	mulw	s4,t3,t4
    4144:	00b38c3b          	addw	s8,t2,a1
    4148:	018a06bb          	addw	a3,s4,s8
                            for(k=0;k<N;k++)
    414c:	f4f91fe3          	bne	s2,a5,40aa <matrix_mul_matrix+0x11e>
    4150:	00df2023          	sw	a3,0(t5)
                    for (j=0; j<N; j++) {
    4154:	001f8793          	addi	a5,t6,1
    4158:	0f11                	addi	t5,t5,4
    415a:	0609                	addi	a2,a2,2
    415c:	00fa8463          	beq	s5,a5,4164 <matrix_mul_matrix+0x1d8>
    4160:	8fbe                	mv	t6,a5
    4162:	bdad                	j	3fdc <matrix_mul_matrix+0x50>
            for (i=0; i<N; i++) {
    4164:	001b8f13          	addi	t5,s7,1
    4168:	99a2                	add	s3,s3,s0
    416a:	9b56                	add	s6,s6,s5
    416c:	9922                	add	s2,s2,s0
    416e:	01fb8463          	beq	s7,t6,4176 <matrix_mul_matrix+0x1ea>
    4172:	8bfa                	mv	s7,t5
    4174:	bd81                	j	3fc4 <matrix_mul_matrix+0x38>
    }
    4176:	70e6                	ld	ra,120(sp)
    4178:	7446                	ld	s0,112(sp)
    417a:	74a6                	ld	s1,104(sp)
    417c:	7906                	ld	s2,96(sp)
    417e:	69e6                	ld	s3,88(sp)
    4180:	6a46                	ld	s4,80(sp)
    4182:	6aa6                	ld	s5,72(sp)
    4184:	6b06                	ld	s6,64(sp)
    4186:	7be2                	ld	s7,56(sp)
    4188:	7c42                	ld	s8,48(sp)
    418a:	7ca2                	ld	s9,40(sp)
    418c:	7d02                	ld	s10,32(sp)
    418e:	6de2                	ld	s11,24(sp)
    4190:	6109                	addi	sp,sp,128
    4192:	8082                	ret

0000000000004194 <matrix_mul_matrix_bitextract>:
            for (i=0; i<N; i++) {
    4194:	1c050763          	beqz	a0,4362 <matrix_mul_matrix_bitextract+0x1ce>
    void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    4198:	715d                	addi	sp,sp,-80
    419a:	f44e                	sd	s3,40(sp)
    419c:	00151993          	slli	s3,a0,0x1
    41a0:	e0a2                	sd	s0,64(sp)
    41a2:	fc26                	sd	s1,56(sp)
    41a4:	f84a                	sd	s2,48(sp)
    41a6:	f052                	sd	s4,32(sp)
    41a8:	ec56                	sd	s5,24(sp)
    41aa:	e85a                	sd	s6,16(sp)
    41ac:	e45e                	sd	s7,8(sp)
    41ae:	e062                	sd	s8,0(sp)
    41b0:	e486                	sd	ra,72(sp)
    41b2:	8b2a                	mv	s6,a0
    41b4:	842e                	mv	s0,a1
    41b6:	84b6                	mv	s1,a3
    41b8:	8ab2                	mv	s5,a2
    41ba:	01360a33          	add	s4,a2,s3
                            C[i*N+j]=0;
    41be:	00251913          	slli	s2,a0,0x2
    41c2:	4b81                	li	s7,0
            for (i=0; i<N; i++) {
    41c4:	4c01                	li	s8,0
                    for (j=0; j<N; j++) {
    41c6:	002b9813          	slli	a6,s7,0x2
    41ca:	01040533          	add	a0,s0,a6
                            C[i*N+j]=0;
    41ce:	864a                	mv	a2,s2
    41d0:	4581                	li	a1,0
    41d2:	13f030ef          	jal	ra,7b10 <memset>
    41d6:	83aa                	mv	t2,a0
    41d8:	88a6                	mv	a7,s1
                    for (j=0; j<N; j++) {
    41da:	4301                	li	t1,0
                            for(k=0;k<N;k++)
    41dc:	415a0733          	sub	a4,s4,s5
    41e0:	ffe70093          	addi	ra,a4,-2
    41e4:	0010d293          	srli	t0,ra,0x1
    41e8:	00128593          	addi	a1,t0,1
    41ec:	0035fe13          	andi	t3,a1,3
    41f0:	8646                	mv	a2,a7
    41f2:	87d6                	mv	a5,s5
    41f4:	4501                	li	a0,0
    41f6:	080e0563          	beqz	t3,4280 <matrix_mul_matrix_bitextract+0xec>
    41fa:	4685                	li	a3,1
    41fc:	04de0c63          	beq	t3,a3,4254 <matrix_mul_matrix_bitextract+0xc0>
    4200:	4e89                	li	t4,2
    4202:	03de0663          	beq	t3,t4,422e <matrix_mul_matrix_bitextract+0x9a>
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4206:	000a9f03          	lh	t5,0(s5)
    420a:	00089f83          	lh	t6,0(a7)
                            for(k=0;k<N;k++)
    420e:	002a8793          	addi	a5,s5,2
    4212:	01388633          	add	a2,a7,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4216:	03ff083b          	mulw	a6,t5,t6
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    421a:	4028551b          	sraiw	a0,a6,0x2
    421e:	4058571b          	sraiw	a4,a6,0x5
    4222:	00f57093          	andi	ra,a0,15
    4226:	07f77293          	andi	t0,a4,127
    422a:	02508533          	mul	a0,ra,t0
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    422e:	00079583          	lh	a1,0(a5)
    4232:	00061e03          	lh	t3,0(a2)
                            for(k=0;k<N;k++)
    4236:	0789                	addi	a5,a5,2
    4238:	964e                	add	a2,a2,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    423a:	03c58ebb          	mulw	t4,a1,t3
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    423e:	402ed69b          	sraiw	a3,t4,0x2
    4242:	405edf1b          	sraiw	t5,t4,0x5
    4246:	00f6ff93          	andi	t6,a3,15
    424a:	07ff7813          	andi	a6,t5,127
    424e:	030f873b          	mulw	a4,t6,a6
    4252:	9d39                	addw	a0,a0,a4
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4254:	00079083          	lh	ra,0(a5)
    4258:	00061283          	lh	t0,0(a2)
                            for(k=0;k<N;k++)
    425c:	0789                	addi	a5,a5,2
    425e:	964e                	add	a2,a2,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4260:	025085bb          	mulw	a1,ra,t0
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    4264:	4025de1b          	sraiw	t3,a1,0x2
    4268:	4055de9b          	sraiw	t4,a1,0x5
    426c:	00fe7693          	andi	a3,t3,15
    4270:	07feff13          	andi	t5,t4,127
    4274:	03e68fbb          	mulw	t6,a3,t5
    4278:	00af853b          	addw	a0,t6,a0
                            for(k=0;k<N;k++)
    427c:	0afa0463          	beq	s4,a5,4324 <matrix_mul_matrix_bitextract+0x190>
    4280:	01360833          	add	a6,a2,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4284:	00079083          	lh	ra,0(a5)
    4288:	00061e03          	lh	t3,0(a2)
                            for(k=0;k<N;k++)
    428c:	01380733          	add	a4,a6,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    4290:	00081e83          	lh	t4,0(a6)
    4294:	00279583          	lh	a1,2(a5)
    4298:	00071283          	lh	t0,0(a4)
                            for(k=0;k<N;k++)
    429c:	01370633          	add	a2,a4,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    42a0:	00479683          	lh	a3,4(a5)
    42a4:	03c0883b          	mulw	a6,ra,t3
    42a8:	00061f83          	lh	t6,0(a2)
    42ac:	00679083          	lh	ra,6(a5)
                            for(k=0;k<N;k++)
    42b0:	07a1                	addi	a5,a5,8
    42b2:	964e                	add	a2,a2,s3
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    42b4:	03d585bb          	mulw	a1,a1,t4
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    42b8:	40585e1b          	sraiw	t3,a6,0x5
    42bc:	40285f1b          	sraiw	t5,a6,0x2
    42c0:	07fe7e93          	andi	t4,t3,127
    42c4:	00ff7813          	andi	a6,t5,15
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    42c8:	025686bb          	mulw	a3,a3,t0
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    42cc:	4025d71b          	sraiw	a4,a1,0x2
    42d0:	4055d29b          	sraiw	t0,a1,0x5
    42d4:	07f2f593          	andi	a1,t0,127
    42d8:	00f77f13          	andi	t5,a4,15
                                        MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    42dc:	03f080bb          	mulw	ra,ra,t6
                                        C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    42e0:	4056de1b          	sraiw	t3,a3,0x5
    42e4:	4026df9b          	sraiw	t6,a3,0x2
    42e8:	00ffff93          	andi	t6,t6,15
    42ec:	07fe7693          	andi	a3,t3,127
    42f0:	03d8083b          	mulw	a6,a6,t4
    42f4:	4050d71b          	sraiw	a4,ra,0x5
    42f8:	4020de9b          	sraiw	t4,ra,0x2
    42fc:	00fef293          	andi	t0,t4,15
    4300:	07f77093          	andi	ra,a4,127
    4304:	02bf0f3b          	mulw	t5,t5,a1
    4308:	00a8053b          	addw	a0,a6,a0
    430c:	02df85bb          	mulw	a1,t6,a3
    4310:	00af0e3b          	addw	t3,t5,a0
    4314:	02128fbb          	mulw	t6,t0,ra
    4318:	01c586bb          	addw	a3,a1,t3
    431c:	00df853b          	addw	a0,t6,a3
                            for(k=0;k<N;k++)
    4320:	f6fa10e3          	bne	s4,a5,4280 <matrix_mul_matrix_bitextract+0xec>
    4324:	00a3a023          	sw	a0,0(t2)
                    for (j=0; j<N; j++) {
    4328:	00130793          	addi	a5,t1,1
    432c:	0391                	addi	t2,t2,4
    432e:	0889                	addi	a7,a7,2
    4330:	00fb0463          	beq	s6,a5,4338 <matrix_mul_matrix_bitextract+0x1a4>
    4334:	833e                	mv	t1,a5
    4336:	b55d                	j	41dc <matrix_mul_matrix_bitextract+0x48>
            for (i=0; i<N; i++) {
    4338:	001c0393          	addi	t2,s8,1
    433c:	9ace                	add	s5,s5,s3
    433e:	9bda                	add	s7,s7,s6
    4340:	9a4e                	add	s4,s4,s3
    4342:	006c0463          	beq	s8,t1,434a <matrix_mul_matrix_bitextract+0x1b6>
    4346:	8c1e                	mv	s8,t2
    4348:	bdbd                	j	41c6 <matrix_mul_matrix_bitextract+0x32>
    }
    434a:	60a6                	ld	ra,72(sp)
    434c:	6406                	ld	s0,64(sp)
    434e:	74e2                	ld	s1,56(sp)
    4350:	7942                	ld	s2,48(sp)
    4352:	79a2                	ld	s3,40(sp)
    4354:	7a02                	ld	s4,32(sp)
    4356:	6ae2                	ld	s5,24(sp)
    4358:	6b42                	ld	s6,16(sp)
    435a:	6ba2                	ld	s7,8(sp)
    435c:	6c02                	ld	s8,0(sp)
    435e:	6161                	addi	sp,sp,80
    4360:	8082                	ret
    4362:	8082                	ret

0000000000004364 <core_init_state>:
        size--;
    4364:	fff50313          	addi	t1,a0,-1
        while ((total+next+1)<size) {
    4368:	4785                	li	a5,1
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    436a:	88b2                	mv	a7,a2
        while ((total+next+1)<size) {
    436c:	1667f863          	bgeu	a5,t1,44dc <core_init_state+0x178>
    4370:	2585                	addiw	a1,a1,1
    4372:	03059693          	slli	a3,a1,0x30
    4376:	92c1                	srli	a3,a3,0x30
    4378:	6641                	lui	a2,0x10
                                buf=intpat[(seed>>3) & 0x3];
    437a:	0036d393          	srli	t2,a3,0x3
                switch (seed & 0x7) {
    437e:	4e9d                	li	t4,7
    4380:	0076f293          	andi	t0,a3,7
        ee_u32 total=0,next=0,i;
    4384:	4701                	li	a4,0
    4386:	0b860613          	addi	a2,a2,184 # 100b8 <intpat>
                            next=8;
    438a:	4fa1                	li	t6,8
                switch (seed & 0x7) {
    438c:	4811                	li	a6,4
    438e:	4e05                	li	t3,1
                        *(p+total+i)=',';
    4390:	02c00f13          	li	t5,44
                                buf=intpat[(seed>>3) & 0x3];
    4394:	0033f793          	andi	a5,t2,3
                switch (seed & 0x7) {
    4398:	11d28c63          	beq	t0,t4,44b0 <core_init_state+0x14c>
    439c:	12586863          	bltu	a6,t0,44cc <core_init_state+0x168>
    43a0:	ffd2839b          	addiw	t2,t0,-3
    43a4:	03039293          	slli	t0,t2,0x30
                                buf=floatpat[(seed>>3) & 0x3];
    43a8:	078e                	slli	a5,a5,0x3
                switch (seed & 0x7) {
    43aa:	0302d593          	srli	a1,t0,0x30
                                buf=floatpat[(seed>>3) & 0x3];
    43ae:	00f603b3          	add	t2,a2,a5
                switch (seed & 0x7) {
    43b2:	10be6863          	bltu	t3,a1,44c2 <core_init_state+0x15e>
                                buf=floatpat[(seed>>3) & 0x3];
    43b6:	0203b583          	ld	a1,32(t2)
                        break;
    43ba:	47a5                	li	a5,9
                            next=8;
    43bc:	43a1                	li	t2,8
        while ((total+next+1)<size) {
    43be:	00f702b3          	add	t0,a4,a5
    43c2:	1262f563          	bgeu	t0,t1,44ec <core_init_state+0x188>
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    43c6:	1141                	addi	sp,sp,-16
    43c8:	e422                	sd	s0,8(sp)
    43ca:	a035                	j	43f6 <core_init_state+0x92>
                switch (seed & 0x7) {
    43cc:	0c586663          	bltu	a6,t0,4498 <core_init_state+0x134>
    43d0:	ffd2879b          	addiw	a5,t0,-3
    43d4:	03079413          	slli	s0,a5,0x30
                                buf=floatpat[(seed>>3) & 0x3];
    43d8:	00339593          	slli	a1,t2,0x3
                switch (seed & 0x7) {
    43dc:	03045293          	srli	t0,s0,0x30
                                buf=floatpat[(seed>>3) & 0x3];
    43e0:	00b603b3          	add	t2,a2,a1
                switch (seed & 0x7) {
    43e4:	0a5e6563          	bltu	t3,t0,448e <core_init_state+0x12a>
                                buf=floatpat[(seed>>3) & 0x3];
    43e8:	0203b583          	ld	a1,32(t2)
                        break;
    43ec:	42a5                	li	t0,9
                            next=8;
    43ee:	43a1                	li	t2,8
        while ((total+next+1)<size) {
    43f0:	92ba                	add	t0,t0,a4
    43f2:	0862f363          	bgeu	t0,t1,4478 <core_init_state+0x114>
                                *(p+total+i)=buf[i];
    43f6:	0005c403          	lbu	s0,0(a1)
    43fa:	00e887b3          	add	a5,a7,a4
    43fe:	00878023          	sb	s0,0(a5)
    4402:	0015c703          	lbu	a4,1(a1)
    4406:	00e780a3          	sb	a4,1(a5)
    440a:	0025c403          	lbu	s0,2(a1)
    440e:	00878123          	sb	s0,2(a5)
    4412:	0035c703          	lbu	a4,3(a1)
    4416:	00e781a3          	sb	a4,3(a5)
                        for(i=0;i<next;i++)
    441a:	03038463          	beq	t2,a6,4442 <core_init_state+0xde>
                                *(p+total+i)=buf[i];
    441e:	0045c403          	lbu	s0,4(a1)
    4422:	00878223          	sb	s0,4(a5)
    4426:	0055c703          	lbu	a4,5(a1)
    442a:	00e782a3          	sb	a4,5(a5)
    442e:	0065c403          	lbu	s0,6(a1)
    4432:	00878323          	sb	s0,6(a5)
                        for(i=0;i<next;i++)
    4436:	01f39663          	bne	t2,t6,4442 <core_init_state+0xde>
                                *(p+total+i)=buf[i];
    443a:	0075c583          	lbu	a1,7(a1)
    443e:	00b783a3          	sb	a1,7(a5)
                        *(p+total+i)=',';
    4442:	2685                	addiw	a3,a3,1
    4444:	93be                	add	t2,t2,a5
    4446:	03069793          	slli	a5,a3,0x30
    444a:	0307d693          	srli	a3,a5,0x30
    444e:	01e38023          	sb	t5,0(t2)
    4452:	8716                	mv	a4,t0
                                buf=intpat[(seed>>3) & 0x3];
    4454:	0036d413          	srli	s0,a3,0x3
                switch (seed & 0x7) {
    4458:	0076f293          	andi	t0,a3,7
                                buf=intpat[(seed>>3) & 0x3];
    445c:	00347393          	andi	t2,s0,3
                switch (seed & 0x7) {
    4460:	f7d296e3          	bne	t0,t4,43cc <core_init_state+0x68>
                                buf=errpat[(seed>>3) & 0x3];
    4464:	00339793          	slli	a5,t2,0x3
                        break;
    4468:	42a5                	li	t0,9
                                buf=errpat[(seed>>3) & 0x3];
    446a:	00f60433          	add	s0,a2,a5
        while ((total+next+1)<size) {
    446e:	92ba                	add	t0,t0,a4
                                buf=errpat[(seed>>3) & 0x3];
    4470:	702c                	ld	a1,96(s0)
                            next=8;
    4472:	43a1                	li	t2,8
        while ((total+next+1)<size) {
    4474:	f862e1e3          	bltu	t0,t1,43f6 <core_init_state+0x92>
        while (total<size) { /* fill the rest with 0 */
    4478:	02a77963          	bgeu	a4,a0,44aa <core_init_state+0x146>
}
    447c:	6422                	ld	s0,8(sp)
                *(p+total)=0;
    447e:	40e50633          	sub	a2,a0,a4
    4482:	4581                	li	a1,0
    4484:	00e88533          	add	a0,a7,a4
}
    4488:	0141                	addi	sp,sp,16
                *(p+total)=0;
    448a:	6860306f          	j	7b10 <memset>
                                buf=intpat[(seed>>3) & 0x3];
    448e:	0003b583          	ld	a1,0(t2)
                        break;
    4492:	4295                	li	t0,5
                            next=4;
    4494:	4391                	li	t2,4
                        break;
    4496:	bfa9                	j	43f0 <core_init_state+0x8c>
                                buf=scipat[(seed>>3) & 0x3];
    4498:	00339593          	slli	a1,t2,0x3
    449c:	00b603b3          	add	t2,a2,a1
    44a0:	0403b583          	ld	a1,64(t2)
                        break;
    44a4:	42a5                	li	t0,9
                            next=8;
    44a6:	43a1                	li	t2,8
                        break;
    44a8:	b7a1                	j	43f0 <core_init_state+0x8c>
}
    44aa:	6422                	ld	s0,8(sp)
    44ac:	0141                	addi	sp,sp,16
    44ae:	8082                	ret
                                buf=errpat[(seed>>3) & 0x3];
    44b0:	00379393          	slli	t2,a5,0x3
    44b4:	007602b3          	add	t0,a2,t2
    44b8:	0602b583          	ld	a1,96(t0)
                        break;
    44bc:	47a5                	li	a5,9
                            next=8;
    44be:	43a1                	li	t2,8
    44c0:	bdfd                	j	43be <core_init_state+0x5a>
                                buf=intpat[(seed>>3) & 0x3];
    44c2:	0003b583          	ld	a1,0(t2)
                        break;
    44c6:	4795                	li	a5,5
                            next=4;
    44c8:	4391                	li	t2,4
    44ca:	bdd5                	j	43be <core_init_state+0x5a>
                                buf=scipat[(seed>>3) & 0x3];
    44cc:	00379293          	slli	t0,a5,0x3
    44d0:	005605b3          	add	a1,a2,t0
    44d4:	61ac                	ld	a1,64(a1)
                        break;
    44d6:	47a5                	li	a5,9
                            next=8;
    44d8:	43a1                	li	t2,8
    44da:	b5d5                	j	43be <core_init_state+0x5a>
        ee_u32 total=0,next=0,i;
    44dc:	4701                	li	a4,0
                *(p+total)=0;
    44de:	40e50633          	sub	a2,a0,a4
    44e2:	4581                	li	a1,0
    44e4:	00e88533          	add	a0,a7,a4
    44e8:	6280306f          	j	7b10 <memset>
        while (total<size) { /* fill the rest with 0 */
    44ec:	fea769e3          	bltu	a4,a0,44de <core_init_state+0x17a>
    44f0:	8082                	ret

00000000000044f2 <core_state_transition>:
        ee_u8 *str=*instr;
    44f2:	611c                	ld	a5,0(a0)
enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    44f4:	882a                	mv	a6,a0
        enum CORE_STATE state=CORE_START;
    44f6:	4501                	li	a0,0
        for( ; *str && state != CORE_INVALID; str++ ) {
    44f8:	0007c683          	lbu	a3,0(a5)
    44fc:	873e                	mv	a4,a5
    44fe:	cedd                	beqz	a3,45bc <core_state_transition+0xca>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4500:	02c00513          	li	a0,44
        for( ; *str && state != CORE_INVALID; str++ ) {
    4504:	00178713          	addi	a4,a5,1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4508:	24a68463          	beq	a3,a0,4750 <core_state_transition+0x25e>
                        transition_count[CORE_START]++;
    450c:	0005b883          	ld	a7,0(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4510:	fd06861b          	addiw	a2,a3,-48
    4514:	0ff67293          	andi	t0,a2,255
    4518:	4325                	li	t1,9
                        transition_count[CORE_START]++;
    451a:	00188393          	addi	t2,a7,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    451e:	0a536263          	bltu	t1,t0,45c2 <core_state_transition+0xd0>
                        transition_count[CORE_START]++;
    4522:	0075b023          	sd	t2,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4526:	0017c303          	lbu	t1,1(a5)
    452a:	12030763          	beqz	t1,4658 <core_state_transition+0x166>
                        str++;
    452e:	0789                	addi	a5,a5,2
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4530:	12a30363          	beq	t1,a0,4656 <core_state_transition+0x164>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4534:	fd03061b          	addiw	a2,t1,-48
                            if( NEXT_SYMBOL == '.' ) {
    4538:	02e00f13          	li	t5,46
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    453c:	4fa5                	li	t6,9
                if (NEXT_SYMBOL==',') /* end of this input */ {
    453e:	02c00893          	li	a7,44
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4542:	0ff67293          	andi	t0,a2,255
                            if( NEXT_SYMBOL == '.' ) {
    4546:	03e30463          	beq	t1,t5,456e <core_state_transition+0x7c>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    454a:	0a5fe363          	bltu	t6,t0,45f0 <core_state_transition+0xfe>
        for( ; *str && state != CORE_INVALID; str++ ) {
    454e:	00174303          	lbu	t1,1(a4)
    4552:	00178513          	addi	a0,a5,1
    4556:	873e                	mv	a4,a5
    4558:	0e030f63          	beqz	t1,4656 <core_state_transition+0x164>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    455c:	21130963          	beq	t1,a7,476e <core_state_transition+0x27c>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4560:	fd03061b          	addiw	a2,t1,-48
        for( ; *str && state != CORE_INVALID; str++ ) {
    4564:	87aa                	mv	a5,a0
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4566:	0ff67293          	andi	t0,a2,255
                            if( NEXT_SYMBOL == '.' ) {
    456a:	ffe310e3          	bne	t1,t5,454a <core_state_transition+0x58>
                                    transition_count[CORE_INT]++;
    456e:	0205b383          	ld	t2,32(a1)
                                    state = CORE_FLOAT;
    4572:	4515                	li	a0,5
                                    transition_count[CORE_INT]++;
    4574:	00138e13          	addi	t3,t2,1
    4578:	03c5b023          	sd	t3,32(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    457c:	00174303          	lbu	t1,1(a4)
    4580:	873e                	mv	a4,a5
    4582:	02030d63          	beqz	t1,45bc <core_state_transition+0xca>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4586:	02c00713          	li	a4,44
                        str++;
    458a:	00178393          	addi	t2,a5,1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    458e:	1ae30e63          	beq	t1,a4,474a <core_state_transition+0x258>
                            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    4592:	04500e93          	li	t4,69
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4596:	4f25                	li	t5,9
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4598:	02c00f93          	li	t6,44
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    459c:	fd03089b          	addiw	a7,t1,-48
                            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    45a0:	0df37293          	andi	t0,t1,223
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    45a4:	0ff8f693          	andi	a3,a7,255
                            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    45a8:	0bd28a63          	beq	t0,t4,465c <core_state_transition+0x16a>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    45ac:	14df7c63          	bgeu	t5,a3,4704 <core_state_transition+0x212>
                                transition_count[CORE_FLOAT]++;
    45b0:	759c                	ld	a5,40(a1)
    45b2:	871e                	mv	a4,t2
                                state = CORE_INVALID;
    45b4:	4505                	li	a0,1
                                transition_count[CORE_FLOAT]++;
    45b6:	00178613          	addi	a2,a5,1
    45ba:	f590                	sd	a2,40(a1)
        *instr=str;
    45bc:	00e83023          	sd	a4,0(a6)
}
    45c0:	8082                	ret
                        else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    45c2:	02b00e13          	li	t3,43
    45c6:	03c68e63          	beq	a3,t3,4602 <core_state_transition+0x110>
    45ca:	02d00e93          	li	t4,45
    45ce:	03d68a63          	beq	a3,t4,4602 <core_state_transition+0x110>
                        else if( NEXT_SYMBOL == '.' ) {
    45d2:	02e00f13          	li	t5,46
    45d6:	15e68263          	beq	a3,t5,471a <core_state_transition+0x228>
                                transition_count[CORE_INVALID]++;
    45da:	0085bf83          	ld	t6,8(a1)
                        transition_count[CORE_START]++;
    45de:	0075b023          	sd	t2,0(a1)
                                state = CORE_INVALID;
    45e2:	4505                	li	a0,1
                                transition_count[CORE_INVALID]++;
    45e4:	001f8793          	addi	a5,t6,1
    45e8:	e59c                	sd	a5,8(a1)
        *instr=str;
    45ea:	00e83023          	sd	a4,0(a6)
}
    45ee:	8082                	ret
                                transition_count[CORE_INT]++;
    45f0:	7194                	ld	a3,32(a1)
    45f2:	873e                	mv	a4,a5
                                state = CORE_INVALID;
    45f4:	4505                	li	a0,1
                                transition_count[CORE_INT]++;
    45f6:	00168793          	addi	a5,a3,1
    45fa:	f19c                	sd	a5,32(a1)
        *instr=str;
    45fc:	00e83023          	sd	a4,0(a6)
}
    4600:	8082                	ret
                        transition_count[CORE_START]++;
    4602:	0075b023          	sd	t2,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4606:	0017c883          	lbu	a7,1(a5)
    460a:	14088d63          	beqz	a7,4764 <core_state_transition+0x272>
                        str++;
    460e:	00278713          	addi	a4,a5,2
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4612:	14a88963          	beq	a7,a0,4764 <core_state_transition+0x272>
                                transition_count[CORE_S1]++;
    4616:	6990                	ld	a2,16(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4618:	fd08869b          	addiw	a3,a7,-48
    461c:	0ff6f293          	andi	t0,a3,255
    4620:	4525                	li	a0,9
                                transition_count[CORE_S1]++;
    4622:	00160313          	addi	t1,a2,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    4626:	00557c63          	bgeu	a0,t0,463e <core_state_transition+0x14c>
                        else if( NEXT_SYMBOL == '.' ) {
    462a:	02e00393          	li	t2,46
    462e:	10788263          	beq	a7,t2,4732 <core_state_transition+0x240>
                                transition_count[CORE_S1]++;
    4632:	0065b823          	sd	t1,16(a1)
                                state = CORE_INVALID;
    4636:	4505                	li	a0,1
        *instr=str;
    4638:	00e83023          	sd	a4,0(a6)
}
    463c:	8082                	ret
                                    transition_count[CORE_S1]++;
    463e:	0065b823          	sd	t1,16(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4642:	0027c303          	lbu	t1,2(a5)
    4646:	00030963          	beqz	t1,4658 <core_state_transition+0x166>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    464a:	02c00e93          	li	t4,44
                        str++;
    464e:	00170793          	addi	a5,a4,1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4652:	efd311e3          	bne	t1,t4,4534 <core_state_transition+0x42>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4656:	873e                	mv	a4,a5
    4658:	4511                	li	a0,4
    465a:	b78d                	j	45bc <core_state_transition+0xca>
                                    transition_count[CORE_FLOAT]++;
    465c:	7588                	ld	a0,40(a1)
    465e:	00150e13          	addi	t3,a0,1
    4662:	03c5b423          	sd	t3,40(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4666:	0017ce83          	lbu	t4,1(a5)
    466a:	0e0e8863          	beqz	t4,475a <core_state_transition+0x268>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    466e:	02c00f13          	li	t5,44
                        str++;
    4672:	00138713          	addi	a4,t2,1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4676:	0fee8363          	beq	t4,t5,475c <core_state_transition+0x26a>
                                    transition_count[CORE_S2]++;
    467a:	0185bf83          	ld	t6,24(a1)
                            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    467e:	fd5e889b          	addiw	a7,t4,-43
    4682:	0fd8f293          	andi	t0,a7,253
                                    transition_count[CORE_S2]++;
    4686:	001f8693          	addi	a3,t6,1
    468a:	ed94                	sd	a3,24(a1)
                            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    468c:	00028663          	beqz	t0,4698 <core_state_transition+0x1a6>
                                state = CORE_INVALID;
    4690:	4505                	li	a0,1
        *instr=str;
    4692:	00e83023          	sd	a4,0(a6)
}
    4696:	8082                	ret
        for( ; *str && state != CORE_INVALID; str++ ) {
    4698:	0013c603          	lbu	a2,1(t2)
    469c:	c271                	beqz	a2,4760 <core_state_transition+0x26e>
                        str++;
    469e:	00238713          	addi	a4,t2,2
                if (NEXT_SYMBOL==',') /* end of this input */ {
    46a2:	0be60f63          	beq	a2,t5,4760 <core_state_transition+0x26e>
                                transition_count[CORE_EXPONENT]++;
    46a6:	0305b303          	ld	t1,48(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    46aa:	fd06079b          	addiw	a5,a2,-48
    46ae:	0ff7f513          	andi	a0,a5,255
                                transition_count[CORE_EXPONENT]++;
    46b2:	00130e93          	addi	t4,t1,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    46b6:	4e25                	li	t3,9
                                    transition_count[CORE_EXPONENT]++;
    46b8:	03d5b823          	sd	t4,48(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    46bc:	fcae6ae3          	bltu	t3,a0,4690 <core_state_transition+0x19e>
        for( ; *str && state != CORE_INVALID; str++ ) {
    46c0:	0023c603          	lbu	a2,2(t2)
    46c4:	ca49                	beqz	a2,4756 <core_state_transition+0x264>
                        str++;
    46c6:	00338513          	addi	a0,t2,3
                if (NEXT_SYMBOL==',') /* end of this input */ {
    46ca:	09e60563          	beq	a2,t5,4754 <core_state_transition+0x262>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    46ce:	43a5                	li	t2,9
                if (NEXT_SYMBOL==',') /* end of this input */ {
    46d0:	02c00f13          	li	t5,44
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
    46d4:	fd060f9b          	addiw	t6,a2,-48
    46d8:	0ffff893          	andi	a7,t6,255
    46dc:	0113fa63          	bgeu	t2,a7,46f0 <core_state_transition+0x1fe>
                                    transition_count[CORE_INVALID]++;
    46e0:	0085b283          	ld	t0,8(a1)
    46e4:	872a                	mv	a4,a0
                                    state = CORE_INVALID;
    46e6:	4505                	li	a0,1
                                    transition_count[CORE_INVALID]++;
    46e8:	00128693          	addi	a3,t0,1
    46ec:	e594                	sd	a3,8(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    46ee:	b5f9                	j	45bc <core_state_transition+0xca>
    46f0:	00174603          	lbu	a2,1(a4)
    46f4:	00150313          	addi	t1,a0,1
    46f8:	872a                	mv	a4,a0
    46fa:	ce29                	beqz	a2,4754 <core_state_transition+0x262>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    46fc:	07e60663          	beq	a2,t5,4768 <core_state_transition+0x276>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4700:	851a                	mv	a0,t1
    4702:	bfc9                	j	46d4 <core_state_transition+0x1e2>
    4704:	0017c303          	lbu	t1,1(a5)
    4708:	00138713          	addi	a4,t2,1
    470c:	879e                	mv	a5,t2
    470e:	02030e63          	beqz	t1,474a <core_state_transition+0x258>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4712:	03f30d63          	beq	t1,t6,474c <core_state_transition+0x25a>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4716:	83ba                	mv	t2,a4
    4718:	b551                	j	459c <core_state_transition+0xaa>
                        transition_count[CORE_START]++;
    471a:	0075b023          	sd	t2,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    471e:	0017c303          	lbu	t1,1(a5)
    4722:	02030563          	beqz	t1,474c <core_state_transition+0x25a>
                        str++;
    4726:	00278393          	addi	t2,a5,2
                if (NEXT_SYMBOL==',') /* end of this input */ {
    472a:	02a30063          	beq	t1,a0,474a <core_state_transition+0x258>
        for( ; *str && state != CORE_INVALID; str++ ) {
    472e:	87ba                	mv	a5,a4
    4730:	b58d                	j	4592 <core_state_transition+0xa0>
                                transition_count[CORE_S1]++;
    4732:	0065b823          	sd	t1,16(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
    4736:	0027c303          	lbu	t1,2(a5)
    473a:	00030963          	beqz	t1,474c <core_state_transition+0x25a>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    473e:	02c00e13          	li	t3,44
                        str++;
    4742:	00170393          	addi	t2,a4,1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4746:	ffc314e3          	bne	t1,t3,472e <core_state_transition+0x23c>
        for( ; *str && state != CORE_INVALID; str++ ) {
    474a:	871e                	mv	a4,t2
    474c:	4515                	li	a0,5
    474e:	b5bd                	j	45bc <core_state_transition+0xca>
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4750:	4501                	li	a0,0
                        break;
    4752:	b5ad                	j	45bc <core_state_transition+0xca>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4754:	872a                	mv	a4,a0
    4756:	451d                	li	a0,7
    4758:	b595                	j	45bc <core_state_transition+0xca>
    475a:	871e                	mv	a4,t2
                                    state = CORE_S2;
    475c:	450d                	li	a0,3
    475e:	bdb9                	j	45bc <core_state_transition+0xca>
                                    state = CORE_EXPONENT;
    4760:	4519                	li	a0,6
    4762:	bda9                	j	45bc <core_state_transition+0xca>
                                state = CORE_S1;
    4764:	4509                	li	a0,2
    4766:	bd99                	j	45bc <core_state_transition+0xca>
        for( ; *str && state != CORE_INVALID; str++ ) {
    4768:	871a                	mv	a4,t1
                if (NEXT_SYMBOL==',') /* end of this input */ {
    476a:	451d                	li	a0,7
    476c:	bd81                	j	45bc <core_state_transition+0xca>
        for( ; *str && state != CORE_INVALID; str++ ) {
    476e:	872a                	mv	a4,a0
                if (NEXT_SYMBOL==',') /* end of this input */ {
    4770:	4511                	li	a0,4
    4772:	b5a9                	j	45bc <core_state_transition+0xca>

0000000000004774 <core_bench_state>:
    {
    4774:	7115                	addi	sp,sp,-224
    4776:	e9a2                	sd	s0,208(sp)
    4778:	e5a6                	sd	s1,200(sp)
    477a:	e1ca                	sd	s2,192(sp)
    477c:	f952                	sd	s4,176(sp)
    477e:	f556                	sd	s5,168(sp)
    4780:	f15a                	sd	s6,160(sp)
    4782:	ed5e                	sd	s7,152(sp)
    4784:	ed86                	sd	ra,216(sp)
    4786:	fd4e                	sd	s3,184(sp)
    4788:	892e                	mv	s2,a1
                while (*p!=0) {
    478a:	0005c583          	lbu	a1,0(a1)
            ee_u8 *p=memblock;
    478e:	e44a                	sd	s2,8(sp)
                    final_counts[i]=track_counts[i]=0;
    4790:	e882                	sd	zero,80(sp)
    4792:	e802                	sd	zero,16(sp)
    4794:	ec82                	sd	zero,88(sp)
    4796:	f082                	sd	zero,96(sp)
    4798:	f482                	sd	zero,104(sp)
    479a:	f882                	sd	zero,112(sp)
    479c:	fc82                	sd	zero,120(sp)
    479e:	e102                	sd	zero,128(sp)
    47a0:	e502                	sd	zero,136(sp)
    47a2:	ec02                	sd	zero,24(sp)
    47a4:	f002                	sd	zero,32(sp)
    47a6:	f402                	sd	zero,40(sp)
    47a8:	f802                	sd	zero,48(sp)
    47aa:	fc02                	sd	zero,56(sp)
    47ac:	e082                	sd	zero,64(sp)
    47ae:	e482                	sd	zero,72(sp)
    47b0:	0884                	addi	s1,sp,80
    {
    47b2:	8a2a                	mv	s4,a0
    47b4:	8bb2                	mv	s7,a2
    47b6:	8b36                	mv	s6,a3
    47b8:	8aba                	mv	s5,a4
    47ba:	843e                	mv	s0,a5
                while (*p!=0) {
    47bc:	22058de3          	beqz	a1,51f6 <core_bench_state+0xa82>
    47c0:	00810993          	addi	s3,sp,8
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    47c4:	85a6                	mv	a1,s1
    47c6:	854e                	mv	a0,s3
    47c8:	d2bff0ef          	jal	ra,44f2 <core_state_transition>
    47cc:	87aa                	mv	a5,a0
                        final_counts[fstate]++;
    47ce:	02079713          	slli	a4,a5,0x20
    47d2:	01d75293          	srli	t0,a4,0x1d
    47d6:	09010313          	addi	t1,sp,144
    47da:	005303b3          	add	t2,t1,t0
                while (*p!=0) {
    47de:	66a2                	ld	a3,8(sp)
                        final_counts[fstate]++;
    47e0:	f803b603          	ld	a2,-128(t2)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    47e4:	85a6                	mv	a1,s1
                while (*p!=0) {
    47e6:	0006c803          	lbu	a6,0(a3)
                        final_counts[fstate]++;
    47ea:	00160893          	addi	a7,a2,1
    47ee:	f913b023          	sd	a7,-128(t2)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    47f2:	854e                	mv	a0,s3
                while (*p!=0) {
    47f4:	08080463          	beqz	a6,487c <core_bench_state+0x108>
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    47f8:	cfbff0ef          	jal	ra,44f2 <core_state_transition>
    47fc:	8e2a                	mv	t3,a0
                        final_counts[fstate]++;
    47fe:	020e1e93          	slli	t4,t3,0x20
    4802:	01dedf13          	srli	t5,t4,0x1d
    4806:	09010f93          	addi	t6,sp,144
    480a:	01ef87b3          	add	a5,t6,t5
                while (*p!=0) {
    480e:	62a2                	ld	t0,8(sp)
                        final_counts[fstate]++;
    4810:	f807b703          	ld	a4,-128(a5)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4814:	85a6                	mv	a1,s1
                while (*p!=0) {
    4816:	0002c303          	lbu	t1,0(t0)
                        final_counts[fstate]++;
    481a:	00170393          	addi	t2,a4,1
    481e:	f877b023          	sd	t2,-128(a5)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4822:	854e                	mv	a0,s3
                while (*p!=0) {
    4824:	04030c63          	beqz	t1,487c <core_bench_state+0x108>
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4828:	ccbff0ef          	jal	ra,44f2 <core_state_transition>
    482c:	862a                	mv	a2,a0
                        final_counts[fstate]++;
    482e:	02061693          	slli	a3,a2,0x20
    4832:	01d6d813          	srli	a6,a3,0x1d
    4836:	09010893          	addi	a7,sp,144
    483a:	01088e33          	add	t3,a7,a6
                while (*p!=0) {
    483e:	6f22                	ld	t5,8(sp)
                        final_counts[fstate]++;
    4840:	f80e3e83          	ld	t4,-128(t3)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4844:	85a6                	mv	a1,s1
                while (*p!=0) {
    4846:	000f4f83          	lbu	t6,0(t5)
                        final_counts[fstate]++;
    484a:	001e8793          	addi	a5,t4,1
    484e:	f8fe3023          	sd	a5,-128(t3)
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4852:	854e                	mv	a0,s3
                while (*p!=0) {
    4854:	020f8463          	beqz	t6,487c <core_bench_state+0x108>
                        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4858:	c9bff0ef          	jal	ra,44f2 <core_state_transition>
                        final_counts[fstate]++;
    485c:	1502                	slli	a0,a0,0x20
    485e:	01d55593          	srli	a1,a0,0x1d
    4862:	0918                	addi	a4,sp,144
    4864:	00b702b3          	add	t0,a4,a1
                while (*p!=0) {
    4868:	63a2                	ld	t2,8(sp)
                        final_counts[fstate]++;
    486a:	f802b303          	ld	t1,-128(t0)
                while (*p!=0) {
    486e:	0003c603          	lbu	a2,0(t2)
                        final_counts[fstate]++;
    4872:	00130693          	addi	a3,t1,1
    4876:	f8d2b023          	sd	a3,-128(t0)
                while (*p!=0) {
    487a:	f629                	bnez	a2,47c4 <core_bench_state+0x50>
        p=memblock;
    487c:	e44a                	sd	s2,8(sp)
        while (p < (memblock+blksize)) { /* insert some corruption */
    487e:	9a4a                	add	s4,s4,s2
            while (*p!=0) {
    4880:	00094583          	lbu	a1,0(s2)
        while (p < (memblock+blksize)) { /* insert some corruption */
    4884:	17497fe3          	bgeu	s2,s4,5202 <core_bench_state+0xa8e>
                if (*p!=',')
    4888:	02c00093          	li	ra,44
                p+=step;
    488c:	884a                	mv	a6,s2
                        *p^=(ee_u8)seed1;
    488e:	0175c9b3          	xor	s3,a1,s7
                if (*p!=',')
    4892:	02158063          	beq	a1,ra,48b2 <core_bench_state+0x13e>
                        *p^=(ee_u8)seed1;
    4896:	01380023          	sb	s3,0(a6)
                p+=step;
    489a:	68a2                	ld	a7,8(sp)
    489c:	01588833          	add	a6,a7,s5
    48a0:	e442                	sd	a6,8(sp)
        while (p < (memblock+blksize)) { /* insert some corruption */
    48a2:	01487c63          	bgeu	a6,s4,48ba <core_bench_state+0x146>
                if (*p!=',')
    48a6:	00084583          	lbu	a1,0(a6)
                        *p^=(ee_u8)seed1;
    48aa:	0175c9b3          	xor	s3,a1,s7
                if (*p!=',')
    48ae:	fe1594e3          	bne	a1,ra,4896 <core_bench_state+0x122>
                p+=step;
    48b2:	9856                	add	a6,a6,s5
    48b4:	e442                	sd	a6,8(sp)
        while (p < (memblock+blksize)) { /* insert some corruption */
    48b6:	ff4868e3          	bltu	a6,s4,48a6 <core_bench_state+0x132>
            while (*p!=0) {
    48ba:	00094b83          	lbu	s7,0(s2)
        p=memblock;
    48be:	e44a                	sd	s2,8(sp)
            while (*p!=0) {
    48c0:	00810993          	addi	s3,sp,8
    48c4:	0c0b8363          	beqz	s7,498a <core_bench_state+0x216>
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    48c8:	85a6                	mv	a1,s1
    48ca:	854e                	mv	a0,s3
    48cc:	c27ff0ef          	jal	ra,44f2 <core_state_transition>
    48d0:	8e2a                	mv	t3,a0
                    final_counts[fstate]++;
    48d2:	020e1e93          	slli	t4,t3,0x20
    48d6:	01dedf13          	srli	t5,t4,0x1d
    48da:	09010f93          	addi	t6,sp,144
    48de:	01ef87b3          	add	a5,t6,t5
            while (*p!=0) {
    48e2:	62a2                	ld	t0,8(sp)
                    final_counts[fstate]++;
    48e4:	f807b703          	ld	a4,-128(a5)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    48e8:	85a6                	mv	a1,s1
            while (*p!=0) {
    48ea:	0002c303          	lbu	t1,0(t0)
                    final_counts[fstate]++;
    48ee:	00170393          	addi	t2,a4,1
    48f2:	f877b023          	sd	t2,-128(a5)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    48f6:	854e                	mv	a0,s3
            while (*p!=0) {
    48f8:	08030663          	beqz	t1,4984 <core_bench_state+0x210>
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    48fc:	bf7ff0ef          	jal	ra,44f2 <core_state_transition>
    4900:	862a                	mv	a2,a0
                    final_counts[fstate]++;
    4902:	02061693          	slli	a3,a2,0x20
    4906:	01d6d813          	srli	a6,a3,0x1d
    490a:	09010893          	addi	a7,sp,144
    490e:	01088bb3          	add	s7,a7,a6
            while (*p!=0) {
    4912:	6ea2                	ld	t4,8(sp)
                    final_counts[fstate]++;
    4914:	f80bbe03          	ld	t3,-128(s7)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4918:	85a6                	mv	a1,s1
            while (*p!=0) {
    491a:	000ecf03          	lbu	t5,0(t4)
                    final_counts[fstate]++;
    491e:	001e0f93          	addi	t6,t3,1
    4922:	f9fbb023          	sd	t6,-128(s7)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4926:	854e                	mv	a0,s3
            while (*p!=0) {
    4928:	040f0e63          	beqz	t5,4984 <core_bench_state+0x210>
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    492c:	bc7ff0ef          	jal	ra,44f2 <core_state_transition>
    4930:	87aa                	mv	a5,a0
                    final_counts[fstate]++;
    4932:	02079713          	slli	a4,a5,0x20
    4936:	01d75293          	srli	t0,a4,0x1d
    493a:	09010313          	addi	t1,sp,144
    493e:	005303b3          	add	t2,t1,t0
            while (*p!=0) {
    4942:	66a2                	ld	a3,8(sp)
                    final_counts[fstate]++;
    4944:	f803b603          	ld	a2,-128(t2)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4948:	85a6                	mv	a1,s1
            while (*p!=0) {
    494a:	0006c803          	lbu	a6,0(a3)
                    final_counts[fstate]++;
    494e:	00160893          	addi	a7,a2,1
    4952:	f913b023          	sd	a7,-128(t2)
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    4956:	854e                	mv	a0,s3
            while (*p!=0) {
    4958:	02080663          	beqz	a6,4984 <core_bench_state+0x210>
                    enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    495c:	b97ff0ef          	jal	ra,44f2 <core_state_transition>
                    final_counts[fstate]++;
    4960:	1502                	slli	a0,a0,0x20
    4962:	01d55593          	srli	a1,a0,0x1d
    4966:	09010b93          	addi	s7,sp,144
    496a:	00bb8e33          	add	t3,s7,a1
            while (*p!=0) {
    496e:	6f22                	ld	t5,8(sp)
                    final_counts[fstate]++;
    4970:	f80e3e83          	ld	t4,-128(t3)
            while (*p!=0) {
    4974:	000f4f83          	lbu	t6,0(t5)
                    final_counts[fstate]++;
    4978:	001e8793          	addi	a5,t4,1
    497c:	f8fe3023          	sd	a5,-128(t3)
            while (*p!=0) {
    4980:	f40f94e3          	bnez	t6,48c8 <core_bench_state+0x154>
        p=memblock;
    4984:	e44a                	sd	s2,8(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    4986:	03497263          	bgeu	s2,s4,49aa <core_bench_state+0x236>
                if (*p!=',')
    498a:	02c00093          	li	ra,44
    498e:	00094983          	lbu	s3,0(s2)
                        *p^=(ee_u8)seed2;
    4992:	0169c733          	xor	a4,s3,s6
                if (*p!=',')
    4996:	04198ae3          	beq	s3,ra,51ea <core_bench_state+0xa76>
                        *p^=(ee_u8)seed2;
    499a:	00e90023          	sb	a4,0(s2)
                p+=step;
    499e:	62a2                	ld	t0,8(sp)
    49a0:	01528933          	add	s2,t0,s5
    49a4:	e44a                	sd	s2,8(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    49a6:	ff4964e3          	bltu	s2,s4,498e <core_bench_state+0x21a>
                         crc |= 0x8000;
    49aa:	7a69                	lui	s4,0xffffa
    49ac:	0814                	addi	a3,sp,16
    49ae:	8626                	mv	a2,s1
    49b0:	001a0393          	addi	t2,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
                    crc=crcu32(final_counts[i],crc);
    49b4:	628c                	ld	a1,0(a3)
                    crc >>= 1;
    49b6:	00145f13          	srli	t5,s0,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    49ba:	8c2d                	xor	s0,s0,a1
        crc=crcu8( (ee_u8) (newval)               ,crc);
    49bc:	0ff5f513          	andi	a0,a1,255
        return crcu16((ee_u16)newval, crc);
    49c0:	03059313          	slli	t1,a1,0x30
                    if (x16 == 1)
    49c4:	00147893          	andi	a7,s0,1
        return crcu16((ee_u16)newval, crc);
    49c8:	03035813          	srli	a6,t1,0x30
                    data >>= 1;
    49cc:	00155b93          	srli	s7,a0,0x1
                    if (x16 == 1)
    49d0:	00088863          	beqz	a7,49e0 <core_bench_state+0x26c>
                         crc |= 0x8000;
    49d4:	007f4e33          	xor	t3,t5,t2
    49d8:	030e1e93          	slli	t4,t3,0x30
    49dc:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    49e0:	01ebcfb3          	xor	t6,s7,t5
                    if (x16 == 1)
    49e4:	001ffa93          	andi	s5,t6,1
                    data >>= 1;
    49e8:	00255b13          	srli	s6,a0,0x2
                    if (x16 == 1)
    49ec:	001f5993          	srli	s3,t5,0x1
    49f0:	000a8863          	beqz	s5,4a00 <core_bench_state+0x28c>
                         crc |= 0x8000;
    49f4:	0079c7b3          	xor	a5,s3,t2
    49f8:	03079093          	slli	ra,a5,0x30
    49fc:	0300d993          	srli	s3,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4a00:	013b4733          	xor	a4,s6,s3
                    if (x16 == 1)
    4a04:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4a08:	00355293          	srli	t0,a0,0x3
                    if (x16 == 1)
    4a0c:	0019db93          	srli	s7,s3,0x1
    4a10:	00090863          	beqz	s2,4a20 <core_bench_state+0x2ac>
                         crc |= 0x8000;
    4a14:	007bca33          	xor	s4,s7,t2
    4a18:	030a1413          	slli	s0,s4,0x30
    4a1c:	03045b93          	srli	s7,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4a20:	0172c8b3          	xor	a7,t0,s7
                    if (x16 == 1)
    4a24:	0018f313          	andi	t1,a7,1
                    data >>= 1;
    4a28:	00455e13          	srli	t3,a0,0x4
                    if (x16 == 1)
    4a2c:	001bdf93          	srli	t6,s7,0x1
    4a30:	00030863          	beqz	t1,4a40 <core_bench_state+0x2cc>
                         crc |= 0x8000;
    4a34:	007fceb3          	xor	t4,t6,t2
    4a38:	030e9f13          	slli	t5,t4,0x30
    4a3c:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4a40:	01cfcab3          	xor	s5,t6,t3
                    if (x16 == 1)
    4a44:	001afb13          	andi	s6,s5,1
                    data >>= 1;
    4a48:	00555093          	srli	ra,a0,0x5
                    if (x16 == 1)
    4a4c:	001fd713          	srli	a4,t6,0x1
    4a50:	000b0863          	beqz	s6,4a60 <core_bench_state+0x2ec>
                         crc |= 0x8000;
    4a54:	007747b3          	xor	a5,a4,t2
    4a58:	03079993          	slli	s3,a5,0x30
    4a5c:	0309d713          	srli	a4,s3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4a60:	00174933          	xor	s2,a4,ra
                    if (x16 == 1)
    4a64:	00197293          	andi	t0,s2,1
                    data >>= 1;
    4a68:	00655a13          	srli	s4,a0,0x6
                    if (x16 == 1)
    4a6c:	00175313          	srli	t1,a4,0x1
    4a70:	00028863          	beqz	t0,4a80 <core_bench_state+0x30c>
                         crc |= 0x8000;
    4a74:	00734433          	xor	s0,t1,t2
    4a78:	03041b93          	slli	s7,s0,0x30
    4a7c:	030bd313          	srli	t1,s7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4a80:	006a48b3          	xor	a7,s4,t1
                    if (x16 == 1)
    4a84:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    4a88:	811d                	srli	a0,a0,0x7
                    if (x16 == 1)
    4a8a:	00135f93          	srli	t6,t1,0x1
    4a8e:	000e0863          	beqz	t3,4a9e <core_bench_state+0x32a>
                         crc |= 0x8000;
    4a92:	007fceb3          	xor	t4,t6,t2
    4a96:	030e9f13          	slli	t5,t4,0x30
    4a9a:	030f5f93          	srli	t6,t5,0x30
                    if (x16 == 1)
    4a9e:	001ffa93          	andi	s5,t6,1
    4aa2:	001fd793          	srli	a5,t6,0x1
    4aa6:	00aa8863          	beq	s5,a0,4ab6 <core_bench_state+0x342>
                         crc |= 0x8000;
    4aaa:	0077cb33          	xor	s6,a5,t2
    4aae:	030b1093          	slli	ra,s6,0x30
    4ab2:	0300d793          	srli	a5,ra,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4ab6:	00885993          	srli	s3,a6,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4aba:	00f9c733          	xor	a4,s3,a5
                    if (x16 == 1)
    4abe:	00177913          	andi	s2,a4,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4ac2:	00885293          	srli	t0,a6,0x8
                    data >>= 1;
    4ac6:	0017db93          	srli	s7,a5,0x1
    4aca:	00985813          	srli	a6,a6,0x9
                    if (x16 == 1)
    4ace:	00090863          	beqz	s2,4ade <core_bench_state+0x36a>
                         crc |= 0x8000;
    4ad2:	007bca33          	xor	s4,s7,t2
    4ad6:	030a1413          	slli	s0,s4,0x30
    4ada:	03045b93          	srli	s7,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4ade:	01784333          	xor	t1,a6,s7
                    if (x16 == 1)
    4ae2:	00137e13          	andi	t3,t1,1
                    data >>= 1;
    4ae6:	0022d893          	srli	a7,t0,0x2
                    if (x16 == 1)
    4aea:	001bdf13          	srli	t5,s7,0x1
    4aee:	000e0863          	beqz	t3,4afe <core_bench_state+0x38a>
                         crc |= 0x8000;
    4af2:	007f4533          	xor	a0,t5,t2
    4af6:	03051e93          	slli	t4,a0,0x30
    4afa:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4afe:	01e8cfb3          	xor	t6,a7,t5
                    if (x16 == 1)
    4b02:	001ffa93          	andi	s5,t6,1
                    data >>= 1;
    4b06:	0032db13          	srli	s6,t0,0x3
                    if (x16 == 1)
    4b0a:	001f5993          	srli	s3,t5,0x1
    4b0e:	000a8863          	beqz	s5,4b1e <core_bench_state+0x3aa>
                         crc |= 0x8000;
    4b12:	0079c0b3          	xor	ra,s3,t2
    4b16:	03009793          	slli	a5,ra,0x30
    4b1a:	0307d993          	srli	s3,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4b1e:	013b4733          	xor	a4,s6,s3
                    if (x16 == 1)
    4b22:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4b26:	0042d813          	srli	a6,t0,0x4
                    if (x16 == 1)
    4b2a:	0019db93          	srli	s7,s3,0x1
    4b2e:	00090863          	beqz	s2,4b3e <core_bench_state+0x3ca>
                         crc |= 0x8000;
    4b32:	007bca33          	xor	s4,s7,t2
    4b36:	030a1413          	slli	s0,s4,0x30
    4b3a:	03045b93          	srli	s7,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4b3e:	01784333          	xor	t1,a6,s7
                    if (x16 == 1)
    4b42:	00137e13          	andi	t3,t1,1
                    data >>= 1;
    4b46:	0052d893          	srli	a7,t0,0x5
                    if (x16 == 1)
    4b4a:	001bdf13          	srli	t5,s7,0x1
    4b4e:	000e0863          	beqz	t3,4b5e <core_bench_state+0x3ea>
                         crc |= 0x8000;
    4b52:	007f4533          	xor	a0,t5,t2
    4b56:	03051e93          	slli	t4,a0,0x30
    4b5a:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4b5e:	01e8cfb3          	xor	t6,a7,t5
                    if (x16 == 1)
    4b62:	001ffa93          	andi	s5,t6,1
                    data >>= 1;
    4b66:	0062db13          	srli	s6,t0,0x6
                    if (x16 == 1)
    4b6a:	001f5993          	srli	s3,t5,0x1
    4b6e:	000a8863          	beqz	s5,4b7e <core_bench_state+0x40a>
                         crc |= 0x8000;
    4b72:	0079c0b3          	xor	ra,s3,t2
    4b76:	03009793          	slli	a5,ra,0x30
    4b7a:	0307d993          	srli	s3,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4b7e:	013b4733          	xor	a4,s6,s3
                    if (x16 == 1)
    4b82:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4b86:	0072d293          	srli	t0,t0,0x7
                    if (x16 == 1)
    4b8a:	0019d413          	srli	s0,s3,0x1
    4b8e:	00090863          	beqz	s2,4b9e <core_bench_state+0x42a>
                         crc |= 0x8000;
    4b92:	00744833          	xor	a6,s0,t2
    4b96:	03081a13          	slli	s4,a6,0x30
    4b9a:	030a5413          	srli	s0,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4b9e:	0082cbb3          	xor	s7,t0,s0
                    if (x16 == 1)
    4ba2:	001bf313          	andi	t1,s7,1
    4ba6:	00145e93          	srli	t4,s0,0x1
    4baa:	00030863          	beqz	t1,4bba <core_bench_state+0x446>
                         crc |= 0x8000;
    4bae:	007ece33          	xor	t3,t4,t2
    4bb2:	030e1893          	slli	a7,t3,0x30
    4bb6:	0308de93          	srli	t4,a7,0x30
        crc=crc16((ee_s16) (newval>>16) ,crc);
    4bba:	0105d513          	srli	a0,a1,0x10
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4bbe:	01d54f33          	xor	t5,a0,t4
        crc=crcu8( (ee_u8) (newval)               ,crc);
    4bc2:	0ff57f93          	andi	t6,a0,255
                    if (x16 == 1)
    4bc6:	001f7a93          	andi	s5,t5,1
        return crcu16((ee_u16)newval, crc);
    4bca:	0105d59b          	srliw	a1,a1,0x10
                    data >>= 1;
    4bce:	001fdb13          	srli	s6,t6,0x1
                    if (x16 == 1)
    4bd2:	001ed993          	srli	s3,t4,0x1
    4bd6:	000a8863          	beqz	s5,4be6 <core_bench_state+0x472>
                         crc |= 0x8000;
    4bda:	0079c0b3          	xor	ra,s3,t2
    4bde:	03009793          	slli	a5,ra,0x30
    4be2:	0307d993          	srli	s3,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4be6:	013b4733          	xor	a4,s6,s3
                    if (x16 == 1)
    4bea:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4bee:	002fd293          	srli	t0,t6,0x2
                    if (x16 == 1)
    4bf2:	0019d413          	srli	s0,s3,0x1
    4bf6:	00090863          	beqz	s2,4c06 <core_bench_state+0x492>
                         crc |= 0x8000;
    4bfa:	00744833          	xor	a6,s0,t2
    4bfe:	03081a13          	slli	s4,a6,0x30
    4c02:	030a5413          	srli	s0,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4c06:	0082cbb3          	xor	s7,t0,s0
                    if (x16 == 1)
    4c0a:	001bf313          	andi	t1,s7,1
                    data >>= 1;
    4c0e:	003fde13          	srli	t3,t6,0x3
                    if (x16 == 1)
    4c12:	00145513          	srli	a0,s0,0x1
    4c16:	00030863          	beqz	t1,4c26 <core_bench_state+0x4b2>
                         crc |= 0x8000;
    4c1a:	007548b3          	xor	a7,a0,t2
    4c1e:	03089e93          	slli	t4,a7,0x30
    4c22:	030ed513          	srli	a0,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4c26:	00ae4f33          	xor	t5,t3,a0
                    if (x16 == 1)
    4c2a:	001f7a93          	andi	s5,t5,1
                    data >>= 1;
    4c2e:	004fdb13          	srli	s6,t6,0x4
                    if (x16 == 1)
    4c32:	00155993          	srli	s3,a0,0x1
    4c36:	000a8863          	beqz	s5,4c46 <core_bench_state+0x4d2>
                         crc |= 0x8000;
    4c3a:	0079c0b3          	xor	ra,s3,t2
    4c3e:	03009793          	slli	a5,ra,0x30
    4c42:	0307d993          	srli	s3,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4c46:	013b4733          	xor	a4,s6,s3
                    if (x16 == 1)
    4c4a:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4c4e:	005fd293          	srli	t0,t6,0x5
                    if (x16 == 1)
    4c52:	0019d413          	srli	s0,s3,0x1
    4c56:	00090863          	beqz	s2,4c66 <core_bench_state+0x4f2>
                         crc |= 0x8000;
    4c5a:	00744833          	xor	a6,s0,t2
    4c5e:	03081a13          	slli	s4,a6,0x30
    4c62:	030a5413          	srli	s0,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4c66:	0082cbb3          	xor	s7,t0,s0
                    if (x16 == 1)
    4c6a:	001bf313          	andi	t1,s7,1
                    data >>= 1;
    4c6e:	006fde13          	srli	t3,t6,0x6
                    if (x16 == 1)
    4c72:	00145f13          	srli	t5,s0,0x1
    4c76:	00030863          	beqz	t1,4c86 <core_bench_state+0x512>
                         crc |= 0x8000;
    4c7a:	007f48b3          	xor	a7,t5,t2
    4c7e:	03089e93          	slli	t4,a7,0x30
    4c82:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4c86:	01ee4533          	xor	a0,t3,t5
                    if (x16 == 1)
    4c8a:	00157a93          	andi	s5,a0,1
                    data >>= 1;
    4c8e:	007fdf93          	srli	t6,t6,0x7
                    if (x16 == 1)
    4c92:	001f5793          	srli	a5,t5,0x1
    4c96:	000a8863          	beqz	s5,4ca6 <core_bench_state+0x532>
                         crc |= 0x8000;
    4c9a:	0077cb33          	xor	s6,a5,t2
    4c9e:	030b1093          	slli	ra,s6,0x30
    4ca2:	0300d793          	srli	a5,ra,0x30
                    if (x16 == 1)
    4ca6:	0017f993          	andi	s3,a5,1
    4caa:	0017d293          	srli	t0,a5,0x1
    4cae:	01f98863          	beq	s3,t6,4cbe <core_bench_state+0x54a>
                         crc |= 0x8000;
    4cb2:	0072c733          	xor	a4,t0,t2
    4cb6:	03071913          	slli	s2,a4,0x30
    4cba:	03095293          	srli	t0,s2,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4cbe:	0085d813          	srli	a6,a1,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4cc2:	00584a33          	xor	s4,a6,t0
                    if (x16 == 1)
    4cc6:	001a7413          	andi	s0,s4,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4cca:	0085db93          	srli	s7,a1,0x8
                    data >>= 1;
    4cce:	0012d893          	srli	a7,t0,0x1
    4cd2:	81a5                	srli	a1,a1,0x9
                    if (x16 == 1)
    4cd4:	c419                	beqz	s0,4ce2 <core_bench_state+0x56e>
                         crc |= 0x8000;
    4cd6:	0078c333          	xor	t1,a7,t2
    4cda:	03031e13          	slli	t3,t1,0x30
    4cde:	030e5893          	srli	a7,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4ce2:	0115ceb3          	xor	t4,a1,a7
                    if (x16 == 1)
    4ce6:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    4cea:	002bd513          	srli	a0,s7,0x2
                    if (x16 == 1)
    4cee:	0018db13          	srli	s6,a7,0x1
    4cf2:	000f0863          	beqz	t5,4d02 <core_bench_state+0x58e>
                         crc |= 0x8000;
    4cf6:	007b4ab3          	xor	s5,s6,t2
    4cfa:	030a9f93          	slli	t6,s5,0x30
    4cfe:	030fdb13          	srli	s6,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4d02:	016540b3          	xor	ra,a0,s6
                    if (x16 == 1)
    4d06:	0010f993          	andi	s3,ra,1
                    data >>= 1;
    4d0a:	003bd713          	srli	a4,s7,0x3
                    if (x16 == 1)
    4d0e:	001b5293          	srli	t0,s6,0x1
    4d12:	00098863          	beqz	s3,4d22 <core_bench_state+0x5ae>
                         crc |= 0x8000;
    4d16:	0072c7b3          	xor	a5,t0,t2
    4d1a:	03079913          	slli	s2,a5,0x30
    4d1e:	03095293          	srli	t0,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4d22:	00574833          	xor	a6,a4,t0
                    if (x16 == 1)
    4d26:	00187a13          	andi	s4,a6,1
                    data >>= 1;
    4d2a:	004bd413          	srli	s0,s7,0x4
                    if (x16 == 1)
    4d2e:	0012de13          	srli	t3,t0,0x1
    4d32:	000a0863          	beqz	s4,4d42 <core_bench_state+0x5ce>
                         crc |= 0x8000;
    4d36:	007e45b3          	xor	a1,t3,t2
    4d3a:	03059313          	slli	t1,a1,0x30
    4d3e:	03035e13          	srli	t3,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4d42:	01c448b3          	xor	a7,s0,t3
                    if (x16 == 1)
    4d46:	0018fe93          	andi	t4,a7,1
                    data >>= 1;
    4d4a:	005bdf13          	srli	t5,s7,0x5
                    if (x16 == 1)
    4d4e:	001e5f93          	srli	t6,t3,0x1
    4d52:	000e8863          	beqz	t4,4d62 <core_bench_state+0x5ee>
                         crc |= 0x8000;
    4d56:	007fc533          	xor	a0,t6,t2
    4d5a:	03051a93          	slli	s5,a0,0x30
    4d5e:	030adf93          	srli	t6,s5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4d62:	01ff4b33          	xor	s6,t5,t6
                    if (x16 == 1)
    4d66:	001b7093          	andi	ra,s6,1
                    data >>= 1;
    4d6a:	006bd993          	srli	s3,s7,0x6
                    if (x16 == 1)
    4d6e:	001fd913          	srli	s2,t6,0x1
    4d72:	00008863          	beqz	ra,4d82 <core_bench_state+0x60e>
                         crc |= 0x8000;
    4d76:	00794733          	xor	a4,s2,t2
    4d7a:	03071793          	slli	a5,a4,0x30
    4d7e:	0307d913          	srli	s2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4d82:	0129c2b3          	xor	t0,s3,s2
                    if (x16 == 1)
    4d86:	0012f813          	andi	a6,t0,1
                    data >>= 1;
    4d8a:	007bdb93          	srli	s7,s7,0x7
                    if (x16 == 1)
    4d8e:	00195593          	srli	a1,s2,0x1
    4d92:	00080863          	beqz	a6,4da2 <core_bench_state+0x62e>
                         crc |= 0x8000;
    4d96:	0075ca33          	xor	s4,a1,t2
    4d9a:	030a1413          	slli	s0,s4,0x30
    4d9e:	03045593          	srli	a1,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4da2:	00bbc333          	xor	t1,s7,a1
                    if (x16 == 1)
    4da6:	00137e13          	andi	t3,t1,1
    4daa:	0015df13          	srli	t5,a1,0x1
    4dae:	000e0863          	beqz	t3,4dbe <core_bench_state+0x64a>
                         crc |= 0x8000;
    4db2:	007f48b3          	xor	a7,t5,t2
    4db6:	03089e93          	slli	t4,a7,0x30
    4dba:	030edf13          	srli	t5,t4,0x30
                    crc=crcu32(track_counts[i],crc);
    4dbe:	00063a83          	ld	s5,0(a2)
        return crcu16((ee_u16)newval, crc);
    4dc2:	001f5293          	srli	t0,t5,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4dc6:	01eac533          	xor	a0,s5,t5
        crc=crcu8( (ee_u8) (newval)               ,crc);
    4dca:	0ffaff93          	andi	t6,s5,255
        return crcu16((ee_u16)newval, crc);
    4dce:	030a9093          	slli	ra,s5,0x30
                    if (x16 == 1)
    4dd2:	00157b13          	andi	s6,a0,1
        return crcu16((ee_u16)newval, crc);
    4dd6:	0300d993          	srli	s3,ra,0x30
                    data >>= 1;
    4dda:	001fd713          	srli	a4,t6,0x1
                    if (x16 == 1)
    4dde:	000b0863          	beqz	s6,4dee <core_bench_state+0x67a>
                         crc |= 0x8000;
    4de2:	0072c7b3          	xor	a5,t0,t2
    4de6:	03079913          	slli	s2,a5,0x30
    4dea:	03095293          	srli	t0,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4dee:	00574833          	xor	a6,a4,t0
                    if (x16 == 1)
    4df2:	00187b93          	andi	s7,a6,1
                    data >>= 1;
    4df6:	002fda13          	srli	s4,t6,0x2
                    if (x16 == 1)
    4dfa:	0012d313          	srli	t1,t0,0x1
    4dfe:	000b8863          	beqz	s7,4e0e <core_bench_state+0x69a>
                         crc |= 0x8000;
    4e02:	00734433          	xor	s0,t1,t2
    4e06:	03041593          	slli	a1,s0,0x30
    4e0a:	0305d313          	srli	t1,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4e0e:	006a4e33          	xor	t3,s4,t1
                    if (x16 == 1)
    4e12:	001e7893          	andi	a7,t3,1
                    data >>= 1;
    4e16:	003fde93          	srli	t4,t6,0x3
                    if (x16 == 1)
    4e1a:	00135b13          	srli	s6,t1,0x1
    4e1e:	00088863          	beqz	a7,4e2e <core_bench_state+0x6ba>
                         crc |= 0x8000;
    4e22:	007b4f33          	xor	t5,s6,t2
    4e26:	030f1513          	slli	a0,t5,0x30
    4e2a:	03055b13          	srli	s6,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4e2e:	016ec0b3          	xor	ra,t4,s6
                    if (x16 == 1)
    4e32:	0010f713          	andi	a4,ra,1
                    data >>= 1;
    4e36:	004fd793          	srli	a5,t6,0x4
                    if (x16 == 1)
    4e3a:	001b5813          	srli	a6,s6,0x1
    4e3e:	c719                	beqz	a4,4e4c <core_bench_state+0x6d8>
                         crc |= 0x8000;
    4e40:	00784933          	xor	s2,a6,t2
    4e44:	03091293          	slli	t0,s2,0x30
    4e48:	0302d813          	srli	a6,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4e4c:	0107cbb3          	xor	s7,a5,a6
                    if (x16 == 1)
    4e50:	001bfa13          	andi	s4,s7,1
                    data >>= 1;
    4e54:	005fd593          	srli	a1,t6,0x5
                    if (x16 == 1)
    4e58:	00185e13          	srli	t3,a6,0x1
    4e5c:	000a0863          	beqz	s4,4e6c <core_bench_state+0x6f8>
                         crc |= 0x8000;
    4e60:	007e4433          	xor	s0,t3,t2
    4e64:	03041313          	slli	t1,s0,0x30
    4e68:	03035e13          	srli	t3,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4e6c:	01c5c8b3          	xor	a7,a1,t3
                    if (x16 == 1)
    4e70:	0018fe93          	andi	t4,a7,1
                    data >>= 1;
    4e74:	006fdf13          	srli	t5,t6,0x6
                    if (x16 == 1)
    4e78:	001e5093          	srli	ra,t3,0x1
    4e7c:	000e8863          	beqz	t4,4e8c <core_bench_state+0x718>
                         crc |= 0x8000;
    4e80:	0070c533          	xor	a0,ra,t2
    4e84:	03051b13          	slli	s6,a0,0x30
    4e88:	030b5093          	srli	ra,s6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4e8c:	001f4733          	xor	a4,t5,ra
                    if (x16 == 1)
    4e90:	00177913          	andi	s2,a4,1
                    data >>= 1;
    4e94:	007fdf93          	srli	t6,t6,0x7
                    if (x16 == 1)
    4e98:	0010db93          	srli	s7,ra,0x1
    4e9c:	00090863          	beqz	s2,4eac <core_bench_state+0x738>
                         crc |= 0x8000;
    4ea0:	007bc7b3          	xor	a5,s7,t2
    4ea4:	03079293          	slli	t0,a5,0x30
    4ea8:	0302db93          	srli	s7,t0,0x30
                    if (x16 == 1)
    4eac:	001bf813          	andi	a6,s7,1
    4eb0:	001bd413          	srli	s0,s7,0x1
    4eb4:	01f80863          	beq	a6,t6,4ec4 <core_bench_state+0x750>
                         crc |= 0x8000;
    4eb8:	00744a33          	xor	s4,s0,t2
    4ebc:	030a1593          	slli	a1,s4,0x30
    4ec0:	0305d413          	srli	s0,a1,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4ec4:	0089d313          	srli	t1,s3,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4ec8:	00834e33          	xor	t3,t1,s0
                    if (x16 == 1)
    4ecc:	001e7893          	andi	a7,t3,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    4ed0:	0089de93          	srli	t4,s3,0x8
                    data >>= 1;
    4ed4:	00145b13          	srli	s6,s0,0x1
    4ed8:	0099d993          	srli	s3,s3,0x9
                    if (x16 == 1)
    4edc:	00088863          	beqz	a7,4eec <core_bench_state+0x778>
                         crc |= 0x8000;
    4ee0:	007b4f33          	xor	t5,s6,t2
    4ee4:	030f1513          	slli	a0,t5,0x30
    4ee8:	03055b13          	srli	s6,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4eec:	0169c0b3          	xor	ra,s3,s6
                    if (x16 == 1)
    4ef0:	0010f713          	andi	a4,ra,1
                    data >>= 1;
    4ef4:	002ed913          	srli	s2,t4,0x2
                    if (x16 == 1)
    4ef8:	001b5293          	srli	t0,s6,0x1
    4efc:	c719                	beqz	a4,4f0a <core_bench_state+0x796>
                         crc |= 0x8000;
    4efe:	0072cfb3          	xor	t6,t0,t2
    4f02:	030f9793          	slli	a5,t6,0x30
    4f06:	0307d293          	srli	t0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f0a:	00594bb3          	xor	s7,s2,t0
                    if (x16 == 1)
    4f0e:	001bfa13          	andi	s4,s7,1
                    data >>= 1;
    4f12:	003ed813          	srli	a6,t4,0x3
                    if (x16 == 1)
    4f16:	0012d313          	srli	t1,t0,0x1
    4f1a:	000a0863          	beqz	s4,4f2a <core_bench_state+0x7b6>
                         crc |= 0x8000;
    4f1e:	007345b3          	xor	a1,t1,t2
    4f22:	03059413          	slli	s0,a1,0x30
    4f26:	03045313          	srli	t1,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f2a:	00684e33          	xor	t3,a6,t1
                    if (x16 == 1)
    4f2e:	001e7893          	andi	a7,t3,1
                    data >>= 1;
    4f32:	004ed993          	srli	s3,t4,0x4
                    if (x16 == 1)
    4f36:	00135b13          	srli	s6,t1,0x1
    4f3a:	00088863          	beqz	a7,4f4a <core_bench_state+0x7d6>
                         crc |= 0x8000;
    4f3e:	007b4f33          	xor	t5,s6,t2
    4f42:	030f1513          	slli	a0,t5,0x30
    4f46:	03055b13          	srli	s6,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f4a:	0169c0b3          	xor	ra,s3,s6
                    if (x16 == 1)
    4f4e:	0010f713          	andi	a4,ra,1
                    data >>= 1;
    4f52:	005ed913          	srli	s2,t4,0x5
                    if (x16 == 1)
    4f56:	001b5293          	srli	t0,s6,0x1
    4f5a:	c719                	beqz	a4,4f68 <core_bench_state+0x7f4>
                         crc |= 0x8000;
    4f5c:	0072cfb3          	xor	t6,t0,t2
    4f60:	030f9793          	slli	a5,t6,0x30
    4f64:	0307d293          	srli	t0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f68:	00594bb3          	xor	s7,s2,t0
                    if (x16 == 1)
    4f6c:	001bfa13          	andi	s4,s7,1
                    data >>= 1;
    4f70:	006ed813          	srli	a6,t4,0x6
                    if (x16 == 1)
    4f74:	0012d313          	srli	t1,t0,0x1
    4f78:	000a0863          	beqz	s4,4f88 <core_bench_state+0x814>
                         crc |= 0x8000;
    4f7c:	007345b3          	xor	a1,t1,t2
    4f80:	03059413          	slli	s0,a1,0x30
    4f84:	03045313          	srli	t1,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4f88:	00684e33          	xor	t3,a6,t1
                    if (x16 == 1)
    4f8c:	001e7893          	andi	a7,t3,1
                    data >>= 1;
    4f90:	007ede93          	srli	t4,t4,0x7
                    if (x16 == 1)
    4f94:	00135513          	srli	a0,t1,0x1
    4f98:	00088863          	beqz	a7,4fa8 <core_bench_state+0x834>
                         crc |= 0x8000;
    4f9c:	007549b3          	xor	s3,a0,t2
    4fa0:	03099f13          	slli	t5,s3,0x30
    4fa4:	030f5513          	srli	a0,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4fa8:	00aecb33          	xor	s6,t4,a0
                    if (x16 == 1)
    4fac:	001b7093          	andi	ra,s6,1
    4fb0:	00155f93          	srli	t6,a0,0x1
    4fb4:	00008863          	beqz	ra,4fc4 <core_bench_state+0x850>
                         crc |= 0x8000;
    4fb8:	007fc733          	xor	a4,t6,t2
    4fbc:	03071913          	slli	s2,a4,0x30
    4fc0:	03095f93          	srli	t6,s2,0x30
        crc=crc16((ee_s16) (newval>>16) ,crc);
    4fc4:	010ad793          	srli	a5,s5,0x10
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4fc8:	01f7c2b3          	xor	t0,a5,t6
        crc=crcu8( (ee_u8) (newval)               ,crc);
    4fcc:	0ff7fb93          	andi	s7,a5,255
                    if (x16 == 1)
    4fd0:	0012fa13          	andi	s4,t0,1
        return crcu16((ee_u16)newval, crc);
    4fd4:	010ada9b          	srliw	s5,s5,0x10
                    data >>= 1;
    4fd8:	001bd813          	srli	a6,s7,0x1
                    if (x16 == 1)
    4fdc:	001fd313          	srli	t1,t6,0x1
    4fe0:	000a0863          	beqz	s4,4ff0 <core_bench_state+0x87c>
                         crc |= 0x8000;
    4fe4:	007345b3          	xor	a1,t1,t2
    4fe8:	03059413          	slli	s0,a1,0x30
    4fec:	03045313          	srli	t1,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    4ff0:	00684e33          	xor	t3,a6,t1
                    if (x16 == 1)
    4ff4:	001e7893          	andi	a7,t3,1
                    data >>= 1;
    4ff8:	002bde93          	srli	t4,s7,0x2
                    if (x16 == 1)
    4ffc:	00135b13          	srli	s6,t1,0x1
    5000:	00088863          	beqz	a7,5010 <core_bench_state+0x89c>
                         crc |= 0x8000;
    5004:	007b49b3          	xor	s3,s6,t2
    5008:	03099f13          	slli	t5,s3,0x30
    500c:	030f5b13          	srli	s6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5010:	016ec533          	xor	a0,t4,s6
                    if (x16 == 1)
    5014:	00157093          	andi	ra,a0,1
                    data >>= 1;
    5018:	003bd713          	srli	a4,s7,0x3
                    if (x16 == 1)
    501c:	001b5793          	srli	a5,s6,0x1
    5020:	00008863          	beqz	ra,5030 <core_bench_state+0x8bc>
                         crc |= 0x8000;
    5024:	0077c933          	xor	s2,a5,t2
    5028:	03091f93          	slli	t6,s2,0x30
    502c:	030fd793          	srli	a5,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5030:	00f742b3          	xor	t0,a4,a5
                    if (x16 == 1)
    5034:	0012fa13          	andi	s4,t0,1
                    data >>= 1;
    5038:	004bd813          	srli	a6,s7,0x4
                    if (x16 == 1)
    503c:	0017d313          	srli	t1,a5,0x1
    5040:	000a0863          	beqz	s4,5050 <core_bench_state+0x8dc>
                         crc |= 0x8000;
    5044:	007345b3          	xor	a1,t1,t2
    5048:	03059413          	slli	s0,a1,0x30
    504c:	03045313          	srli	t1,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5050:	00684e33          	xor	t3,a6,t1
                    if (x16 == 1)
    5054:	001e7893          	andi	a7,t3,1
                    data >>= 1;
    5058:	005bde93          	srli	t4,s7,0x5
                    if (x16 == 1)
    505c:	00135b13          	srli	s6,t1,0x1
    5060:	00088863          	beqz	a7,5070 <core_bench_state+0x8fc>
                         crc |= 0x8000;
    5064:	007b49b3          	xor	s3,s6,t2
    5068:	03099f13          	slli	t5,s3,0x30
    506c:	030f5b13          	srli	s6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5070:	016ec533          	xor	a0,t4,s6
                    if (x16 == 1)
    5074:	00157093          	andi	ra,a0,1
                    data >>= 1;
    5078:	006bd713          	srli	a4,s7,0x6
                    if (x16 == 1)
    507c:	001b5293          	srli	t0,s6,0x1
    5080:	00008863          	beqz	ra,5090 <core_bench_state+0x91c>
                         crc |= 0x8000;
    5084:	0072c933          	xor	s2,t0,t2
    5088:	03091f93          	slli	t6,s2,0x30
    508c:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5090:	005747b3          	xor	a5,a4,t0
                    if (x16 == 1)
    5094:	0017fa13          	andi	s4,a5,1
                    data >>= 1;
    5098:	007bdb93          	srli	s7,s7,0x7
                    if (x16 == 1)
    509c:	0012d413          	srli	s0,t0,0x1
    50a0:	000a0863          	beqz	s4,50b0 <core_bench_state+0x93c>
                         crc |= 0x8000;
    50a4:	00744833          	xor	a6,s0,t2
    50a8:	03081593          	slli	a1,a6,0x30
    50ac:	0305d413          	srli	s0,a1,0x30
                    if (x16 == 1)
    50b0:	00147313          	andi	t1,s0,1
    50b4:	00145e93          	srli	t4,s0,0x1
    50b8:	01730863          	beq	t1,s7,50c8 <core_bench_state+0x954>
                         crc |= 0x8000;
    50bc:	007ece33          	xor	t3,t4,t2
    50c0:	030e1893          	slli	a7,t3,0x30
    50c4:	0308de93          	srli	t4,a7,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    50c8:	008ad993          	srli	s3,s5,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    50cc:	01d9cf33          	xor	t5,s3,t4
                    if (x16 == 1)
    50d0:	001f7b13          	andi	s6,t5,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    50d4:	008ad093          	srli	ra,s5,0x8
                    data >>= 1;
    50d8:	001ed913          	srli	s2,t4,0x1
    50dc:	009ada93          	srli	s5,s5,0x9
                    if (x16 == 1)
    50e0:	000b0863          	beqz	s6,50f0 <core_bench_state+0x97c>
                         crc |= 0x8000;
    50e4:	00794533          	xor	a0,s2,t2
    50e8:	03051713          	slli	a4,a0,0x30
    50ec:	03075913          	srli	s2,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    50f0:	012acfb3          	xor	t6,s5,s2
                    if (x16 == 1)
    50f4:	001ff293          	andi	t0,t6,1
                    data >>= 1;
    50f8:	0020d793          	srli	a5,ra,0x2
                    if (x16 == 1)
    50fc:	00195813          	srli	a6,s2,0x1
    5100:	00028863          	beqz	t0,5110 <core_bench_state+0x99c>
                         crc |= 0x8000;
    5104:	00784a33          	xor	s4,a6,t2
    5108:	030a1b93          	slli	s7,s4,0x30
    510c:	030bd813          	srli	a6,s7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5110:	0107c5b3          	xor	a1,a5,a6
                    if (x16 == 1)
    5114:	0015f313          	andi	t1,a1,1
                    data >>= 1;
    5118:	0030de13          	srli	t3,ra,0x3
                    if (x16 == 1)
    511c:	00185e93          	srli	t4,a6,0x1
    5120:	00030863          	beqz	t1,5130 <core_bench_state+0x9bc>
                         crc |= 0x8000;
    5124:	007ec433          	xor	s0,t4,t2
    5128:	03041893          	slli	a7,s0,0x30
    512c:	0308de93          	srli	t4,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5130:	01de49b3          	xor	s3,t3,t4
                    if (x16 == 1)
    5134:	0019ff13          	andi	t5,s3,1
                    data >>= 1;
    5138:	0040db13          	srli	s6,ra,0x4
                    if (x16 == 1)
    513c:	001ed713          	srli	a4,t4,0x1
    5140:	000f0863          	beqz	t5,5150 <core_bench_state+0x9dc>
                         crc |= 0x8000;
    5144:	00774ab3          	xor	s5,a4,t2
    5148:	030a9513          	slli	a0,s5,0x30
    514c:	03055713          	srli	a4,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5150:	00eb4933          	xor	s2,s6,a4
                    if (x16 == 1)
    5154:	00197f93          	andi	t6,s2,1
                    data >>= 1;
    5158:	0050d293          	srli	t0,ra,0x5
                    if (x16 == 1)
    515c:	00175b93          	srli	s7,a4,0x1
    5160:	000f8863          	beqz	t6,5170 <core_bench_state+0x9fc>
                         crc |= 0x8000;
    5164:	007bc7b3          	xor	a5,s7,t2
    5168:	03079a13          	slli	s4,a5,0x30
    516c:	030a5b93          	srli	s7,s4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5170:	0172c833          	xor	a6,t0,s7
                    if (x16 == 1)
    5174:	00187313          	andi	t1,a6,1
                    data >>= 1;
    5178:	0060d593          	srli	a1,ra,0x6
                    if (x16 == 1)
    517c:	001bd893          	srli	a7,s7,0x1
    5180:	00030863          	beqz	t1,5190 <core_bench_state+0xa1c>
                         crc |= 0x8000;
    5184:	0078ce33          	xor	t3,a7,t2
    5188:	030e1413          	slli	s0,t3,0x30
    518c:	03045893          	srli	a7,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5190:	0115ceb3          	xor	t4,a1,a7
                    if (x16 == 1)
    5194:	001ef993          	andi	s3,t4,1
                    data >>= 1;
    5198:	0070d093          	srli	ra,ra,0x7
                    if (x16 == 1)
    519c:	0018da93          	srli	s5,a7,0x1
    51a0:	00098863          	beqz	s3,51b0 <core_bench_state+0xa3c>
                         crc |= 0x8000;
    51a4:	007acf33          	xor	t5,s5,t2
    51a8:	030f1b13          	slli	s6,t5,0x30
    51ac:	030b5a93          	srli	s5,s6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    51b0:	0150c533          	xor	a0,ra,s5
                    if (x16 == 1)
    51b4:	00157713          	andi	a4,a0,1
    51b8:	001ad413          	srli	s0,s5,0x1
    51bc:	c719                	beqz	a4,51ca <core_bench_state+0xa56>
                         crc |= 0x8000;
    51be:	00744933          	xor	s2,s0,t2
    51c2:	03091f93          	slli	t6,s2,0x30
    51c6:	030fd413          	srli	s0,t6,0x30
            for (i=0; i<NUM_CORE_STATES; i++) {
    51ca:	06a1                	addi	a3,a3,8
    51cc:	0621                	addi	a2,a2,8
    51ce:	fed49363          	bne	s1,a3,49b4 <core_bench_state+0x240>
            }
    51d2:	60ee                	ld	ra,216(sp)
    51d4:	8522                	mv	a0,s0
    51d6:	644e                	ld	s0,208(sp)
    51d8:	64ae                	ld	s1,200(sp)
    51da:	690e                	ld	s2,192(sp)
    51dc:	79ea                	ld	s3,184(sp)
    51de:	7a4a                	ld	s4,176(sp)
    51e0:	7aaa                	ld	s5,168(sp)
    51e2:	7b0a                	ld	s6,160(sp)
    51e4:	6bea                	ld	s7,152(sp)
    51e6:	612d                	addi	sp,sp,224
    51e8:	8082                	ret
                p+=step;
    51ea:	9956                	add	s2,s2,s5
    51ec:	e44a                	sd	s2,8(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    51ee:	fb496063          	bltu	s2,s4,498e <core_bench_state+0x21a>
    51f2:	fb8ff06f          	j	49aa <core_bench_state+0x236>
        while (p < (memblock+blksize)) { /* insert some corruption */
    51f6:	00a90a33          	add	s4,s2,a0
    51fa:	e9496763          	bltu	s2,s4,4888 <core_bench_state+0x114>
    51fe:	facff06f          	j	49aa <core_bench_state+0x236>
            while (*p!=0) {
    5202:	ec059363          	bnez	a1,48c8 <core_bench_state+0x154>
    5206:	fa4ff06f          	j	49aa <core_bench_state+0x236>

000000000000520a <calc_func>:
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    520a:	7179                	addi	sp,sp,-48
    520c:	ec26                	sd	s1,24(sp)
        ee_s16 data=*pdata;
    520e:	00051483          	lh	s1,0(a0)
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    5212:	f406                	sd	ra,40(sp)
    5214:	f022                	sd	s0,32(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    5216:	4074d79b          	sraiw	a5,s1,0x7
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
    521a:	e84a                	sd	s2,16(sp)
    521c:	e44e                	sd	s3,8(sp)
        if (optype) /* if cached, use cache */
    521e:	0017f093          	andi	ra,a5,1
    5222:	00008b63          	beqz	ra,5238 <calc_func+0x2e>
}
    5226:	70a2                	ld	ra,40(sp)
    5228:	7402                	ld	s0,32(sp)
    522a:	6942                	ld	s2,16(sp)
    522c:	69a2                	ld	s3,8(sp)
                return (data & 0x007f);
    522e:	07f4f513          	andi	a0,s1,127
}
    5232:	64e2                	ld	s1,24(sp)
    5234:	6145                	addi	sp,sp,48
    5236:	8082                	ret
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    5238:	4034d71b          	sraiw	a4,s1,0x3
    523c:	00f77293          	andi	t0,a4,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5240:	00429313          	slli	t1,t0,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    5244:	0074f693          	andi	a3,s1,7
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5248:	0685d403          	lhu	s0,104(a1)
    524c:	89aa                	mv	s3,a0
    524e:	892e                	mv	s2,a1
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5250:	00536733          	or	a4,t1,t0
                switch (flag) {
    5254:	50068963          	beqz	a3,5766 <calc_func+0x55c>
    5258:	4505                	li	a0,1
    525a:	50a69063          	bne	a3,a0,575a <calc_func+0x550>
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    525e:	6db4                	ld	a3,88(a1)
    5260:	69b0                	ld	a2,80(a1)
    5262:	04892503          	lw	a0,72(s2)
    5266:	71ac                	ld	a1,96(a1)
    5268:	f89fb0ef          	jal	ra,11f0 <matrix_test>
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    526c:	00a445b3          	xor	a1,s0,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    5270:	0ff57893          	andi	a7,a0,255
        return crcu16((ee_u16)newval, crc);
    5274:	03051e93          	slli	t4,a0,0x30
                    if (x16 == 1)
    5278:	0015fe13          	andi	t3,a1,1
        return crcu16((ee_u16)newval, crc);
    527c:	030edf13          	srli	t5,t4,0x30
                    data >>= 1;
    5280:	0018df93          	srli	t6,a7,0x1
                    crc >>= 1;
    5284:	00145313          	srli	t1,s0,0x1
                    if (x16 == 1)
    5288:	000e0b63          	beqz	t3,529e <calc_func+0x94>
                         crc |= 0x8000;
    528c:	70e9                	lui	ra,0xffffa
    528e:	00108713          	addi	a4,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5292:	00e347b3          	xor	a5,t1,a4
    5296:	03079293          	slli	t0,a5,0x30
    529a:	0302d313          	srli	t1,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    529e:	01f346b3          	xor	a3,t1,t6
                    if (x16 == 1)
    52a2:	0016f393          	andi	t2,a3,1
                    data >>= 1;
    52a6:	0028d813          	srli	a6,a7,0x2
                    crc >>= 1;
    52aa:	00135e13          	srli	t3,t1,0x1
                    if (x16 == 1)
    52ae:	00038b63          	beqz	t2,52c4 <calc_func+0xba>
                         crc |= 0x8000;
    52b2:	7669                	lui	a2,0xffffa
    52b4:	00160413          	addi	s0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    52b8:	008e4533          	xor	a0,t3,s0
    52bc:	03051593          	slli	a1,a0,0x30
    52c0:	0305de13          	srli	t3,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    52c4:	010e4eb3          	xor	t4,t3,a6
                    if (x16 == 1)
    52c8:	001eff93          	andi	t6,t4,1
                    data >>= 1;
    52cc:	0038d093          	srli	ra,a7,0x3
                    crc >>= 1;
    52d0:	001e5693          	srli	a3,t3,0x1
                    if (x16 == 1)
    52d4:	000f8b63          	beqz	t6,52ea <calc_func+0xe0>
                         crc |= 0x8000;
    52d8:	7769                	lui	a4,0xffffa
    52da:	00170293          	addi	t0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    52de:	0056c7b3          	xor	a5,a3,t0
    52e2:	03079313          	slli	t1,a5,0x30
    52e6:	03035693          	srli	a3,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    52ea:	0016c3b3          	xor	t2,a3,ra
                    if (x16 == 1)
    52ee:	0013f813          	andi	a6,t2,1
                    data >>= 1;
    52f2:	0048d613          	srli	a2,a7,0x4
                    crc >>= 1;
    52f6:	0016de93          	srli	t4,a3,0x1
                    if (x16 == 1)
    52fa:	00080b63          	beqz	a6,5310 <calc_func+0x106>
                         crc |= 0x8000;
    52fe:	7469                	lui	s0,0xffffa
    5300:	00140513          	addi	a0,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5304:	00aec5b3          	xor	a1,t4,a0
    5308:	03059e13          	slli	t3,a1,0x30
    530c:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5310:	00cecfb3          	xor	t6,t4,a2
                    if (x16 == 1)
    5314:	001ff093          	andi	ra,t6,1
                    data >>= 1;
    5318:	0058d713          	srli	a4,a7,0x5
                    crc >>= 1;
    531c:	001ed393          	srli	t2,t4,0x1
                    if (x16 == 1)
    5320:	00008b63          	beqz	ra,5336 <calc_func+0x12c>
                         crc |= 0x8000;
    5324:	72e9                	lui	t0,0xffffa
    5326:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    532a:	0063c7b3          	xor	a5,t2,t1
    532e:	03079693          	slli	a3,a5,0x30
    5332:	0306d393          	srli	t2,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5336:	00e3c833          	xor	a6,t2,a4
                    if (x16 == 1)
    533a:	00187413          	andi	s0,a6,1
                    data >>= 1;
    533e:	0068d613          	srli	a2,a7,0x6
                    crc >>= 1;
    5342:	0013df93          	srli	t6,t2,0x1
                    if (x16 == 1)
    5346:	c811                	beqz	s0,535a <calc_func+0x150>
                         crc |= 0x8000;
    5348:	7569                	lui	a0,0xffffa
    534a:	00150593          	addi	a1,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    534e:	00bfce33          	xor	t3,t6,a1
    5352:	030e1e93          	slli	t4,t3,0x30
    5356:	030edf93          	srli	t6,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    535a:	00cfc0b3          	xor	ra,t6,a2
                    if (x16 == 1)
    535e:	0010f713          	andi	a4,ra,1
                    data >>= 1;
    5362:	0078d893          	srli	a7,a7,0x7
                    crc >>= 1;
    5366:	001fd393          	srli	t2,t6,0x1
                    if (x16 == 1)
    536a:	cb11                	beqz	a4,537e <calc_func+0x174>
                         crc |= 0x8000;
    536c:	72e9                	lui	t0,0xffffa
    536e:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5372:	0063c7b3          	xor	a5,t2,t1
    5376:	03079693          	slli	a3,a5,0x30
    537a:	0306d393          	srli	t2,a3,0x30
                    if (x16 == 1)
    537e:	0013f813          	andi	a6,t2,1
                    crc >>= 1;
    5382:	0013de13          	srli	t3,t2,0x1
                    if (x16 == 1)
    5386:	01180b63          	beq	a6,a7,539c <calc_func+0x192>
                         crc |= 0x8000;
    538a:	7469                	lui	s0,0xffffa
    538c:	00140613          	addi	a2,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5390:	00ce4533          	xor	a0,t3,a2
    5394:	03051593          	slli	a1,a0,0x30
    5398:	0305de13          	srli	t3,a1,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    539c:	008f5e93          	srli	t4,t5,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53a0:	01de4fb3          	xor	t6,t3,t4
                    if (x16 == 1)
    53a4:	001ff093          	andi	ra,t6,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    53a8:	008f5893          	srli	a7,t5,0x8
                    data >>= 1;
    53ac:	001e5393          	srli	t2,t3,0x1
    53b0:	009f5f13          	srli	t5,t5,0x9
                    if (x16 == 1)
    53b4:	00008b63          	beqz	ra,53ca <calc_func+0x1c0>
                         crc |= 0x8000;
    53b8:	7769                	lui	a4,0xffffa
    53ba:	00170293          	addi	t0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    53be:	0053c333          	xor	t1,t2,t0
    53c2:	03031793          	slli	a5,t1,0x30
    53c6:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53ca:	01e3c6b3          	xor	a3,t2,t5
                    if (x16 == 1)
    53ce:	0016f813          	andi	a6,a3,1
                    data >>= 1;
    53d2:	0028d413          	srli	s0,a7,0x2
                    if (x16 == 1)
    53d6:	0013de93          	srli	t4,t2,0x1
    53da:	00080b63          	beqz	a6,53f0 <calc_func+0x1e6>
                         crc |= 0x8000;
    53de:	7669                	lui	a2,0xffffa
    53e0:	00160513          	addi	a0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    53e4:	00aec5b3          	xor	a1,t4,a0
    53e8:	03059e13          	slli	t3,a1,0x30
    53ec:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    53f0:	008ecfb3          	xor	t6,t4,s0
                    if (x16 == 1)
    53f4:	001ff093          	andi	ra,t6,1
                    data >>= 1;
    53f8:	0038df13          	srli	t5,a7,0x3
                    if (x16 == 1)
    53fc:	001ed393          	srli	t2,t4,0x1
    5400:	00008b63          	beqz	ra,5416 <calc_func+0x20c>
                         crc |= 0x8000;
    5404:	7769                	lui	a4,0xffffa
    5406:	00170293          	addi	t0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    540a:	0053c333          	xor	t1,t2,t0
    540e:	03031793          	slli	a5,t1,0x30
    5412:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5416:	01e3c6b3          	xor	a3,t2,t5
                    if (x16 == 1)
    541a:	0016f813          	andi	a6,a3,1
                    data >>= 1;
    541e:	0048d413          	srli	s0,a7,0x4
                    if (x16 == 1)
    5422:	0013de93          	srli	t4,t2,0x1
    5426:	00080b63          	beqz	a6,543c <calc_func+0x232>
                         crc |= 0x8000;
    542a:	7669                	lui	a2,0xffffa
    542c:	00160513          	addi	a0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5430:	00aec5b3          	xor	a1,t4,a0
    5434:	03059e13          	slli	t3,a1,0x30
    5438:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    543c:	008ecfb3          	xor	t6,t4,s0
                    if (x16 == 1)
    5440:	001ff093          	andi	ra,t6,1
                    data >>= 1;
    5444:	0058df13          	srli	t5,a7,0x5
                    if (x16 == 1)
    5448:	001ed393          	srli	t2,t4,0x1
    544c:	00008b63          	beqz	ra,5462 <calc_func+0x258>
                         crc |= 0x8000;
    5450:	7769                	lui	a4,0xffffa
    5452:	00170293          	addi	t0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5456:	0053c333          	xor	t1,t2,t0
    545a:	03031793          	slli	a5,t1,0x30
    545e:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5462:	01e3c6b3          	xor	a3,t2,t5
                    if (x16 == 1)
    5466:	0016f813          	andi	a6,a3,1
                    data >>= 1;
    546a:	0068d413          	srli	s0,a7,0x6
                    if (x16 == 1)
    546e:	0013de93          	srli	t4,t2,0x1
    5472:	00080b63          	beqz	a6,5488 <calc_func+0x27e>
                         crc |= 0x8000;
    5476:	7669                	lui	a2,0xffffa
    5478:	00160513          	addi	a0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    547c:	00aec5b3          	xor	a1,t4,a0
    5480:	03059e13          	slli	t3,a1,0x30
    5484:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5488:	008ecfb3          	xor	t6,t4,s0
                    if (x16 == 1)
    548c:	001ff093          	andi	ra,t6,1
                    data >>= 1;
    5490:	0078d893          	srli	a7,a7,0x7
                    if (x16 == 1)
    5494:	001ed793          	srli	a5,t4,0x1
    5498:	00008b63          	beqz	ra,54ae <calc_func+0x2a4>
                         crc |= 0x8000;
    549c:	7f69                	lui	t5,0xffffa
    549e:	001f0713          	addi	a4,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    54a2:	00e7c2b3          	xor	t0,a5,a4
    54a6:	03029313          	slli	t1,t0,0x30
    54aa:	03035793          	srli	a5,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    54ae:	00f8c3b3          	xor	t2,a7,a5
                    if (x16 == 1)
    54b2:	0013f693          	andi	a3,t2,1
    54b6:	0017d513          	srli	a0,a5,0x1
    54ba:	ca89                	beqz	a3,54cc <calc_func+0x2c2>
                         crc |= 0x8000;
    54bc:	7869                	lui	a6,0xffffa
    54be:	00180413          	addi	s0,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    54c2:	00854633          	xor	a2,a0,s0
    54c6:	03061513          	slli	a0,a2,0x30
    54ca:	9141                	srli	a0,a0,0x30
                            if (res->crcmatrix==0)
    54cc:	06c95583          	lhu	a1,108(s2)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    54d0:	01051e1b          	slliw	t3,a0,0x10
                res->crc=crcu16(retval,res->crc);
    54d4:	06895403          	lhu	s0,104(s2)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    54d8:	410e5e9b          	sraiw	t4,t3,0x10
                            if (res->crcmatrix==0)
    54dc:	e199                	bnez	a1,54e2 <calc_func+0x2d8>
                                    res->crcmatrix=retval;
    54de:	06a91623          	sh	a0,108(s2)
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    54e2:	008ec0b3          	xor	ra,t4,s0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    54e6:	0ffef893          	andi	a7,t4,255
                    if (x16 == 1)
    54ea:	0010ff13          	andi	t5,ra,1
                    data >>= 1;
    54ee:	0018d713          	srli	a4,a7,0x1
                    if (x16 == 1)
    54f2:	00145813          	srli	a6,s0,0x1
    54f6:	000f0b63          	beqz	t5,550c <calc_func+0x302>
                         crc |= 0x8000;
    54fa:	72e9                	lui	t0,0xffffa
    54fc:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5500:	006847b3          	xor	a5,a6,t1
    5504:	03079393          	slli	t2,a5,0x30
    5508:	0303d813          	srli	a6,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    550c:	010746b3          	xor	a3,a4,a6
                    if (x16 == 1)
    5510:	0016f613          	andi	a2,a3,1
                    data >>= 1;
    5514:	0028d413          	srli	s0,a7,0x2
                    if (x16 == 1)
    5518:	00185f13          	srli	t5,a6,0x1
    551c:	ca11                	beqz	a2,5530 <calc_func+0x326>
                         crc |= 0x8000;
    551e:	75e9                	lui	a1,0xffffa
    5520:	00158e13          	addi	t3,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5524:	01cf4fb3          	xor	t6,t5,t3
    5528:	030f9093          	slli	ra,t6,0x30
    552c:	0300df13          	srli	t5,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5530:	01e44733          	xor	a4,s0,t5
                    if (x16 == 1)
    5534:	00177293          	andi	t0,a4,1
                    data >>= 1;
    5538:	0038d313          	srli	t1,a7,0x3
                    if (x16 == 1)
    553c:	001f5613          	srli	a2,t5,0x1
    5540:	00028b63          	beqz	t0,5556 <calc_func+0x34c>
                         crc |= 0x8000;
    5544:	73e9                	lui	t2,0xffffa
    5546:	00138813          	addi	a6,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    554a:	010647b3          	xor	a5,a2,a6
    554e:	03079693          	slli	a3,a5,0x30
    5552:	0306d613          	srli	a2,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5556:	00c34433          	xor	s0,t1,a2
                    if (x16 == 1)
    555a:	00147593          	andi	a1,s0,1
                    data >>= 1;
    555e:	0048de13          	srli	t3,a7,0x4
                    if (x16 == 1)
    5562:	00165293          	srli	t0,a2,0x1
    5566:	c991                	beqz	a1,557a <calc_func+0x370>
                         crc |= 0x8000;
    5568:	7fe9                	lui	t6,0xffffa
    556a:	001f8093          	addi	ra,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    556e:	0012cf33          	xor	t5,t0,ra
    5572:	030f1713          	slli	a4,t5,0x30
    5576:	03075293          	srli	t0,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    557a:	005e4333          	xor	t1,t3,t0
                    if (x16 == 1)
    557e:	00137393          	andi	t2,t1,1
                    data >>= 1;
    5582:	0058d813          	srli	a6,a7,0x5
                    if (x16 == 1)
    5586:	0012de13          	srli	t3,t0,0x1
    558a:	00038b63          	beqz	t2,55a0 <calc_func+0x396>
                         crc |= 0x8000;
    558e:	76e9                	lui	a3,0xffffa
    5590:	00168613          	addi	a2,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5594:	00ce47b3          	xor	a5,t3,a2
    5598:	03079413          	slli	s0,a5,0x30
    559c:	03045e13          	srli	t3,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    55a0:	010e45b3          	xor	a1,t3,a6
                    if (x16 == 1)
    55a4:	0015ff93          	andi	t6,a1,1
                    data >>= 1;
    55a8:	0068d093          	srli	ra,a7,0x6
                    if (x16 == 1)
    55ac:	001e5393          	srli	t2,t3,0x1
    55b0:	000f8b63          	beqz	t6,55c6 <calc_func+0x3bc>
                         crc |= 0x8000;
    55b4:	7f69                	lui	t5,0xffffa
    55b6:	001f0713          	addi	a4,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    55ba:	00e3c2b3          	xor	t0,t2,a4
    55be:	03029313          	slli	t1,t0,0x30
    55c2:	03035393          	srli	t2,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    55c6:	0013c833          	xor	a6,t2,ra
                    if (x16 == 1)
    55ca:	00187693          	andi	a3,a6,1
                    data >>= 1;
    55ce:	0078d893          	srli	a7,a7,0x7
                    if (x16 == 1)
    55d2:	0013d593          	srli	a1,t2,0x1
    55d6:	ca91                	beqz	a3,55ea <calc_func+0x3e0>
                         crc |= 0x8000;
    55d8:	7669                	lui	a2,0xffffa
    55da:	00160413          	addi	s0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    55de:	0085c7b3          	xor	a5,a1,s0
    55e2:	03079e13          	slli	t3,a5,0x30
    55e6:	030e5593          	srli	a1,t3,0x30
                    if (x16 == 1)
    55ea:	0015ff93          	andi	t6,a1,1
    55ee:	0015d313          	srli	t1,a1,0x1
    55f2:	011f8b63          	beq	t6,a7,5608 <calc_func+0x3fe>
                         crc |= 0x8000;
    55f6:	70e9                	lui	ra,0xffffa
    55f8:	00108f13          	addi	t5,ra,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    55fc:	01e34733          	xor	a4,t1,t5
    5600:	03071293          	slli	t0,a4,0x30
    5604:	0302d313          	srli	t1,t0,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5608:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    560c:	00a343b3          	xor	t2,t1,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5610:	0ff57813          	andi	a6,a0,255
                    if (x16 == 1)
    5614:	0013f693          	andi	a3,t2,1
                    data >>= 1;
    5618:	00185893          	srli	a7,a6,0x1
                    if (x16 == 1)
    561c:	00135f93          	srli	t6,t1,0x1
    5620:	ca91                	beqz	a3,5634 <calc_func+0x42a>
                         crc |= 0x8000;
    5622:	7669                	lui	a2,0xffffa
    5624:	00160413          	addi	s0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5628:	008fc7b3          	xor	a5,t6,s0
    562c:	03079e13          	slli	t3,a5,0x30
    5630:	030e5f93          	srli	t6,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5634:	011fc5b3          	xor	a1,t6,a7
                    if (x16 == 1)
    5638:	0015f093          	andi	ra,a1,1
                    data >>= 1;
    563c:	00285f13          	srli	t5,a6,0x2
                    if (x16 == 1)
    5640:	001fd393          	srli	t2,t6,0x1
    5644:	00008b63          	beqz	ra,565a <calc_func+0x450>
                         crc |= 0x8000;
    5648:	7769                	lui	a4,0xffffa
    564a:	00170293          	addi	t0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    564e:	0053c333          	xor	t1,t2,t0
    5652:	03031513          	slli	a0,t1,0x30
    5656:	03055393          	srli	t2,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    565a:	007f46b3          	xor	a3,t5,t2
                    if (x16 == 1)
    565e:	0016f893          	andi	a7,a3,1
                    data >>= 1;
    5662:	00385413          	srli	s0,a6,0x3
                    if (x16 == 1)
    5666:	0013d093          	srli	ra,t2,0x1
    566a:	00088b63          	beqz	a7,5680 <calc_func+0x476>
                         crc |= 0x8000;
    566e:	7669                	lui	a2,0xffffa
    5670:	00160e13          	addi	t3,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5674:	01c0c7b3          	xor	a5,ra,t3
    5678:	03079f93          	slli	t6,a5,0x30
    567c:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5680:	001445b3          	xor	a1,s0,ra
                    if (x16 == 1)
    5684:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    5688:	00485713          	srli	a4,a6,0x4
                    if (x16 == 1)
    568c:	0010d693          	srli	a3,ra,0x1
    5690:	000f0b63          	beqz	t5,56a6 <calc_func+0x49c>
                         crc |= 0x8000;
    5694:	72e9                	lui	t0,0xffffa
    5696:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    569a:	0066c533          	xor	a0,a3,t1
    569e:	03051393          	slli	t2,a0,0x30
    56a2:	0303d693          	srli	a3,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56a6:	00e6c8b3          	xor	a7,a3,a4
                    if (x16 == 1)
    56aa:	0018f413          	andi	s0,a7,1
                    data >>= 1;
    56ae:	00585e13          	srli	t3,a6,0x5
                    if (x16 == 1)
    56b2:	0016df13          	srli	t5,a3,0x1
    56b6:	c811                	beqz	s0,56ca <calc_func+0x4c0>
                         crc |= 0x8000;
    56b8:	7669                	lui	a2,0xffffa
    56ba:	00160f93          	addi	t6,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    56be:	01ff47b3          	xor	a5,t5,t6
    56c2:	03079093          	slli	ra,a5,0x30
    56c6:	0300df13          	srli	t5,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56ca:	01cf45b3          	xor	a1,t5,t3
                    if (x16 == 1)
    56ce:	0015f713          	andi	a4,a1,1
                    data >>= 1;
    56d2:	00685293          	srli	t0,a6,0x6
                    if (x16 == 1)
    56d6:	001f5893          	srli	a7,t5,0x1
    56da:	cb11                	beqz	a4,56ee <calc_func+0x4e4>
                         crc |= 0x8000;
    56dc:	7369                	lui	t1,0xffffa
    56de:	00130513          	addi	a0,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    56e2:	00a8c3b3          	xor	t2,a7,a0
    56e6:	03039693          	slli	a3,t2,0x30
    56ea:	0306d893          	srli	a7,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    56ee:	0058c433          	xor	s0,a7,t0
                    if (x16 == 1)
    56f2:	00147e13          	andi	t3,s0,1
                    data >>= 1;
    56f6:	00785813          	srli	a6,a6,0x7
                    if (x16 == 1)
    56fa:	0018df13          	srli	t5,a7,0x1
    56fe:	000e0b63          	beqz	t3,5714 <calc_func+0x50a>
                         crc |= 0x8000;
    5702:	7669                	lui	a2,0xffffa
    5704:	00160f93          	addi	t6,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5708:	01ff47b3          	xor	a5,t5,t6
    570c:	03079093          	slli	ra,a5,0x30
    5710:	0300df13          	srli	t5,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5714:	01e845b3          	xor	a1,a6,t5
                    if (x16 == 1)
    5718:	0015f713          	andi	a4,a1,1
    571c:	001f5693          	srli	a3,t5,0x1
    5720:	cb11                	beqz	a4,5734 <calc_func+0x52a>
                         crc |= 0x8000;
    5722:	72e9                	lui	t0,0xffffa
    5724:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5728:	0066c533          	xor	a0,a3,t1
    572c:	03051393          	slli	t2,a0,0x30
    5730:	0303d693          	srli	a3,t2,0x30
                retval &= 0x007f;
    5734:	07fef513          	andi	a0,t4,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5738:	f004f493          	andi	s1,s1,-256
}
    573c:	70a2                	ld	ra,40(sp)
    573e:	7402                	ld	s0,32(sp)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5740:	00956eb3          	or	t4,a0,s1
                res->crc=crcu16(retval,res->crc);
    5744:	06d91423          	sh	a3,104(s2)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5748:	080ee913          	ori	s2,t4,128
    574c:	01299023          	sh	s2,0(s3)
}
    5750:	64e2                	ld	s1,24(sp)
    5752:	6942                	ld	s2,16(sp)
    5754:	69a2                	ld	s3,8(sp)
    5756:	6145                	addi	sp,sp,48
    5758:	8082                	ret
                res->crc=crcu16(retval,res->crc);
    575a:	03049f93          	slli	t6,s1,0x30
    575e:	030fd513          	srli	a0,t6,0x30
    5762:	8ea6                	mv	t4,s1
    5764:	bbbd                	j	54e2 <calc_func+0x2d8>
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5766:	02200393          	li	t2,34
    576a:	883a                	mv	a6,a4
    576c:	00775463          	bge	a4,t2,5774 <calc_func+0x56a>
    5770:	02200813          	li	a6,34
    5774:	00091603          	lh	a2,0(s2)
    5778:	00291683          	lh	a3,2(s2)
    577c:	02093583          	ld	a1,32(s2)
    5780:	02893503          	ld	a0,40(s2)
    5784:	87a2                	mv	a5,s0
    5786:	0ff87713          	andi	a4,a6,255
    578a:	febfe0ef          	jal	ra,4774 <core_bench_state>
                            if (res->crcstate==0)
    578e:	06e95603          	lhu	a2,110(s2)
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5792:	0105141b          	slliw	s0,a0,0x10
    5796:	41045e9b          	sraiw	t4,s0,0x10
                res->crc=crcu16(retval,res->crc);
    579a:	06895403          	lhu	s0,104(s2)
                            if (res->crcstate==0)
    579e:	d40612e3          	bnez	a2,54e2 <calc_func+0x2d8>
                                    res->crcstate=retval;
    57a2:	06a91723          	sh	a0,110(s2)
    57a6:	bb35                	j	54e2 <calc_func+0x2d8>

00000000000057a8 <cmp_complex>:
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    57a8:	7139                	addi	sp,sp,-64
    57aa:	f04a                	sd	s2,32(sp)
        ee_s16 data=*pdata;
    57ac:	00051903          	lh	s2,0(a0)
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    57b0:	fc06                	sd	ra,56(sp)
    57b2:	f426                	sd	s1,40(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    57b4:	4079579b          	sraiw	a5,s2,0x7
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    57b8:	ec4e                	sd	s3,24(sp)
    57ba:	e852                	sd	s4,16(sp)
    57bc:	f822                	sd	s0,48(sp)
    57be:	e456                	sd	s5,8(sp)
        if (optype) /* if cached, use cache */
    57c0:	0017f093          	andi	ra,a5,1
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
    57c4:	89ae                	mv	s3,a1
    57c6:	84b2                	mv	s1,a2
                return (data & 0x007f);
    57c8:	07f97a13          	andi	s4,s2,127
        if (optype) /* if cached, use cache */
    57cc:	28009e63          	bnez	ra,5a68 <cmp_complex+0x2c0>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    57d0:	4039571b          	sraiw	a4,s2,0x3
    57d4:	00f77293          	andi	t0,a4,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    57d8:	00429693          	slli	a3,t0,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    57dc:	00797313          	andi	t1,s2,7
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    57e0:	06865403          	lhu	s0,104(a2)
    57e4:	8aaa                	mv	s5,a0
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    57e6:	00d2e733          	or	a4,t0,a3
                switch (flag) {
    57ea:	000300e3          	beqz	t1,5fea <cmp_complex+0x842>
    57ee:	4505                	li	a0,1
    57f0:	02a30de3          	beq	t1,a0,602a <cmp_complex+0x882>
                res->crc=crcu16(retval,res->crc);
    57f4:	03091793          	slli	a5,s2,0x30
    57f8:	0307d513          	srli	a0,a5,0x30
    57fc:	83ca                	mv	t2,s2
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    57fe:	00744833          	xor	a6,s0,t2
        crc=crcu8( (ee_u8) (newval)               ,crc);
    5802:	0ff3fa13          	andi	s4,t2,255
                    if (x16 == 1)
    5806:	00187613          	andi	a2,a6,1
                    data >>= 1;
    580a:	001a5593          	srli	a1,s4,0x1
                    if (x16 == 1)
    580e:	00145f93          	srli	t6,s0,0x1
    5812:	ca11                	beqz	a2,5826 <cmp_complex+0x7e>
                         crc |= 0x8000;
    5814:	7e69                	lui	t3,0xffffa
    5816:	001e0f13          	addi	t5,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    581a:	01efceb3          	xor	t4,t6,t5
    581e:	030e9893          	slli	a7,t4,0x30
    5822:	0308df93          	srli	t6,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5826:	00bfc0b3          	xor	ra,t6,a1
                    if (x16 == 1)
    582a:	0010f293          	andi	t0,ra,1
                    data >>= 1;
    582e:	002a5693          	srli	a3,s4,0x2
                    if (x16 == 1)
    5832:	001fd813          	srli	a6,t6,0x1
    5836:	00028b63          	beqz	t0,584c <cmp_complex+0xa4>
                         crc |= 0x8000;
    583a:	7769                	lui	a4,0xffffa
    583c:	00170413          	addi	s0,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5840:	00884333          	xor	t1,a6,s0
    5844:	03031793          	slli	a5,t1,0x30
    5848:	0307d813          	srli	a6,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    584c:	00d84633          	xor	a2,a6,a3
                    if (x16 == 1)
    5850:	00167593          	andi	a1,a2,1
                    data >>= 1;
    5854:	003a5e13          	srli	t3,s4,0x3
                    if (x16 == 1)
    5858:	00185093          	srli	ra,a6,0x1
    585c:	c991                	beqz	a1,5870 <cmp_complex+0xc8>
                         crc |= 0x8000;
    585e:	7f69                	lui	t5,0xffffa
    5860:	001f0e93          	addi	t4,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5864:	01d0c8b3          	xor	a7,ra,t4
    5868:	03089f93          	slli	t6,a7,0x30
    586c:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5870:	01c0c2b3          	xor	t0,ra,t3
                    if (x16 == 1)
    5874:	0012f693          	andi	a3,t0,1
                    data >>= 1;
    5878:	004a5713          	srli	a4,s4,0x4
                    if (x16 == 1)
    587c:	0010d593          	srli	a1,ra,0x1
    5880:	ca91                	beqz	a3,5894 <cmp_complex+0xec>
                         crc |= 0x8000;
    5882:	7469                	lui	s0,0xffffa
    5884:	00140313          	addi	t1,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5888:	0065c7b3          	xor	a5,a1,t1
    588c:	03079813          	slli	a6,a5,0x30
    5890:	03085593          	srli	a1,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5894:	00e5c633          	xor	a2,a1,a4
                    if (x16 == 1)
    5898:	00167e13          	andi	t3,a2,1
                    data >>= 1;
    589c:	005a5f13          	srli	t5,s4,0x5
                    if (x16 == 1)
    58a0:	0015d293          	srli	t0,a1,0x1
    58a4:	000e0b63          	beqz	t3,58ba <cmp_complex+0x112>
                         crc |= 0x8000;
    58a8:	7ee9                	lui	t4,0xffffa
    58aa:	001e8893          	addi	a7,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    58ae:	0112cfb3          	xor	t6,t0,a7
    58b2:	030f9093          	slli	ra,t6,0x30
    58b6:	0300d293          	srli	t0,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    58ba:	01e2c6b3          	xor	a3,t0,t5
                    if (x16 == 1)
    58be:	0016f413          	andi	s0,a3,1
                    data >>= 1;
    58c2:	006a5713          	srli	a4,s4,0x6
                    if (x16 == 1)
    58c6:	0012d613          	srli	a2,t0,0x1
    58ca:	c811                	beqz	s0,58de <cmp_complex+0x136>
                         crc |= 0x8000;
    58cc:	7369                	lui	t1,0xffffa
    58ce:	00130813          	addi	a6,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    58d2:	010647b3          	xor	a5,a2,a6
    58d6:	03079593          	slli	a1,a5,0x30
    58da:	0305d613          	srli	a2,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    58de:	00e64e33          	xor	t3,a2,a4
                    if (x16 == 1)
    58e2:	001e7f13          	andi	t5,t3,1
                    data >>= 1;
    58e6:	007a5a13          	srli	s4,s4,0x7
                    if (x16 == 1)
    58ea:	00165293          	srli	t0,a2,0x1
    58ee:	000f0b63          	beqz	t5,5904 <cmp_complex+0x15c>
                         crc |= 0x8000;
    58f2:	7ee9                	lui	t4,0xffffa
    58f4:	001e8893          	addi	a7,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    58f8:	0112cfb3          	xor	t6,t0,a7
    58fc:	030f9093          	slli	ra,t6,0x30
    5900:	0300d293          	srli	t0,ra,0x30
                    if (x16 == 1)
    5904:	0012f693          	andi	a3,t0,1
    5908:	0012d793          	srli	a5,t0,0x1
    590c:	01468b63          	beq	a3,s4,5922 <cmp_complex+0x17a>
                         crc |= 0x8000;
    5910:	7469                	lui	s0,0xffffa
    5912:	00140713          	addi	a4,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5916:	00e7c333          	xor	t1,a5,a4
    591a:	03031813          	slli	a6,t1,0x30
    591e:	03085793          	srli	a5,a6,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5922:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5926:	00a7c5b3          	xor	a1,a5,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    592a:	0ff57e13          	andi	t3,a0,255
                    if (x16 == 1)
    592e:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    5932:	001e5613          	srli	a2,t3,0x1
                    if (x16 == 1)
    5936:	0017d093          	srli	ra,a5,0x1
    593a:	000f0b63          	beqz	t5,5950 <cmp_complex+0x1a8>
                         crc |= 0x8000;
    593e:	7a69                	lui	s4,0xffffa
    5940:	001a0e93          	addi	t4,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5944:	01d0c8b3          	xor	a7,ra,t4
    5948:	03089f93          	slli	t6,a7,0x30
    594c:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5950:	00c0c2b3          	xor	t0,ra,a2
                    if (x16 == 1)
    5954:	0012f413          	andi	s0,t0,1
                    data >>= 1;
    5958:	002e5693          	srli	a3,t3,0x2
                    if (x16 == 1)
    595c:	0010d513          	srli	a0,ra,0x1
    5960:	c811                	beqz	s0,5974 <cmp_complex+0x1cc>
                         crc |= 0x8000;
    5962:	7769                	lui	a4,0xffffa
    5964:	00170313          	addi	t1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5968:	00654833          	xor	a6,a0,t1
    596c:	03081793          	slli	a5,a6,0x30
    5970:	0307d513          	srli	a0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5974:	00d545b3          	xor	a1,a0,a3
                    if (x16 == 1)
    5978:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    597c:	003e5613          	srli	a2,t3,0x3
                    if (x16 == 1)
    5980:	00155093          	srli	ra,a0,0x1
    5984:	000f0b63          	beqz	t5,599a <cmp_complex+0x1f2>
                         crc |= 0x8000;
    5988:	7a69                	lui	s4,0xffffa
    598a:	001a0e93          	addi	t4,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    598e:	01d0c8b3          	xor	a7,ra,t4
    5992:	03089f93          	slli	t6,a7,0x30
    5996:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    599a:	00c0c2b3          	xor	t0,ra,a2
                    if (x16 == 1)
    599e:	0012f413          	andi	s0,t0,1
                    data >>= 1;
    59a2:	004e5693          	srli	a3,t3,0x4
                    if (x16 == 1)
    59a6:	0010d513          	srli	a0,ra,0x1
    59aa:	c811                	beqz	s0,59be <cmp_complex+0x216>
                         crc |= 0x8000;
    59ac:	7769                	lui	a4,0xffffa
    59ae:	00170313          	addi	t1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    59b2:	00654833          	xor	a6,a0,t1
    59b6:	03081793          	slli	a5,a6,0x30
    59ba:	0307d513          	srli	a0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    59be:	00d545b3          	xor	a1,a0,a3
                    if (x16 == 1)
    59c2:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    59c6:	005e5613          	srli	a2,t3,0x5
                    if (x16 == 1)
    59ca:	00155093          	srli	ra,a0,0x1
    59ce:	000f0b63          	beqz	t5,59e4 <cmp_complex+0x23c>
                         crc |= 0x8000;
    59d2:	7a69                	lui	s4,0xffffa
    59d4:	001a0e93          	addi	t4,s4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    59d8:	01d0c8b3          	xor	a7,ra,t4
    59dc:	03089f93          	slli	t6,a7,0x30
    59e0:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    59e4:	00c0c2b3          	xor	t0,ra,a2
                    if (x16 == 1)
    59e8:	0012f413          	andi	s0,t0,1
                    data >>= 1;
    59ec:	006e5693          	srli	a3,t3,0x6
                    if (x16 == 1)
    59f0:	0010d513          	srli	a0,ra,0x1
    59f4:	c811                	beqz	s0,5a08 <cmp_complex+0x260>
                         crc |= 0x8000;
    59f6:	7769                	lui	a4,0xffffa
    59f8:	00170313          	addi	t1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    59fc:	00654833          	xor	a6,a0,t1
    5a00:	03081793          	slli	a5,a6,0x30
    5a04:	0307d513          	srli	a0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5a08:	00d545b3          	xor	a1,a0,a3
                    if (x16 == 1)
    5a0c:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    5a10:	007e5e13          	srli	t3,t3,0x7
                    if (x16 == 1)
    5a14:	00155f93          	srli	t6,a0,0x1
    5a18:	000f0b63          	beqz	t5,5a2e <cmp_complex+0x286>
                         crc |= 0x8000;
    5a1c:	7669                	lui	a2,0xffffa
    5a1e:	00160a13          	addi	s4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5a22:	014fceb3          	xor	t4,t6,s4
    5a26:	030e9893          	slli	a7,t4,0x30
    5a2a:	0308df93          	srli	t6,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5a2e:	01fe40b3          	xor	ra,t3,t6
                    if (x16 == 1)
    5a32:	0010f293          	andi	t0,ra,1
    5a36:	001fd813          	srli	a6,t6,0x1
    5a3a:	00028b63          	beqz	t0,5a50 <cmp_complex+0x2a8>
                         crc |= 0x8000;
    5a3e:	7469                	lui	s0,0xffffa
    5a40:	00140693          	addi	a3,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5a44:	00d84733          	xor	a4,a6,a3
    5a48:	03071313          	slli	t1,a4,0x30
    5a4c:	03035813          	srli	a6,t1,0x30
                retval &= 0x007f;
    5a50:	07f3fa13          	andi	s4,t2,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5a54:	f0097913          	andi	s2,s2,-256
    5a58:	012a63b3          	or	t2,s4,s2
                res->crc=crcu16(retval,res->crc);
    5a5c:	07049423          	sh	a6,104(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5a60:	0803e793          	ori	a5,t2,128
    5a64:	00fa9023          	sh	a5,0(s5)
        ee_s16 data=*pdata;
    5a68:	00099a83          	lh	s5,0(s3)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
    5a6c:	407ad51b          	sraiw	a0,s5,0x7
        if (optype) /* if cached, use cache */
    5a70:	00157593          	andi	a1,a0,1
                return (data & 0x007f);
    5a74:	07faf893          	andi	a7,s5,127
        if (optype) /* if cached, use cache */
    5a78:	50059863          	bnez	a1,5f88 <cmp_complex+0x7e0>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
    5a7c:	403adf1b          	sraiw	t5,s5,0x3
    5a80:	00ff7e13          	andi	t3,t5,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5a84:	004e1613          	slli	a2,t3,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
    5a88:	007afe93          	andi	t4,s5,7
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5a8c:	0684d403          	lhu	s0,104(s1)
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
    5a90:	00ce6733          	or	a4,t3,a2
                switch (flag) {
    5a94:	500e8b63          	beqz	t4,5faa <cmp_complex+0x802>
    5a98:	4085                	li	ra,1
    5a9a:	501e9263          	bne	t4,ra,5f9e <cmp_complex+0x7f6>
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    5a9e:	6cb4                	ld	a3,88(s1)
    5aa0:	68b0                	ld	a2,80(s1)
    5aa2:	70ac                	ld	a1,96(s1)
    5aa4:	44a8                	lw	a0,72(s1)
    5aa6:	f4afb0ef          	jal	ra,11f0 <matrix_test>
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5aaa:	00854733          	xor	a4,a0,s0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    5aae:	0ff57693          	andi	a3,a0,255
        return crcu16((ee_u16)newval, crc);
    5ab2:	03051813          	slli	a6,a0,0x30
                    if (x16 == 1)
    5ab6:	00177313          	andi	t1,a4,1
        return crcu16((ee_u16)newval, crc);
    5aba:	03085913          	srli	s2,a6,0x30
                    data >>= 1;
    5abe:	0016d393          	srli	t2,a3,0x1
                    if (x16 == 1)
    5ac2:	00145e13          	srli	t3,s0,0x1
    5ac6:	00030b63          	beqz	t1,5adc <cmp_complex+0x334>
                         crc |= 0x8000;
    5aca:	7569                	lui	a0,0xffffa
    5acc:	00150593          	addi	a1,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5ad0:	00be47b3          	xor	a5,t3,a1
    5ad4:	03079f13          	slli	t5,a5,0x30
    5ad8:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5adc:	01c3c633          	xor	a2,t2,t3
                    if (x16 == 1)
    5ae0:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    5ae4:	0026d893          	srli	a7,a3,0x2
                    if (x16 == 1)
    5ae8:	001e5713          	srli	a4,t3,0x1
    5aec:	000e8b63          	beqz	t4,5b02 <cmp_complex+0x35a>
                         crc |= 0x8000;
    5af0:	7fe9                	lui	t6,0xffffa
    5af2:	001f8293          	addi	t0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5af6:	00574433          	xor	s0,a4,t0
    5afa:	03041093          	slli	ra,s0,0x30
    5afe:	0300d713          	srli	a4,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b02:	00e8c333          	xor	t1,a7,a4
                    if (x16 == 1)
    5b06:	00137813          	andi	a6,t1,1
                    data >>= 1;
    5b0a:	0036d393          	srli	t2,a3,0x3
                    if (x16 == 1)
    5b0e:	00175e13          	srli	t3,a4,0x1
    5b12:	00080b63          	beqz	a6,5b28 <cmp_complex+0x380>
                         crc |= 0x8000;
    5b16:	7569                	lui	a0,0xffffa
    5b18:	00150593          	addi	a1,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5b1c:	00be47b3          	xor	a5,t3,a1
    5b20:	03079f13          	slli	t5,a5,0x30
    5b24:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b28:	01c3c633          	xor	a2,t2,t3
                    if (x16 == 1)
    5b2c:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    5b30:	0046d893          	srli	a7,a3,0x4
                    if (x16 == 1)
    5b34:	001e5713          	srli	a4,t3,0x1
    5b38:	000e8b63          	beqz	t4,5b4e <cmp_complex+0x3a6>
                         crc |= 0x8000;
    5b3c:	7fe9                	lui	t6,0xffffa
    5b3e:	001f8293          	addi	t0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5b42:	00574433          	xor	s0,a4,t0
    5b46:	03041093          	slli	ra,s0,0x30
    5b4a:	0300d713          	srli	a4,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b4e:	00e8c333          	xor	t1,a7,a4
                    if (x16 == 1)
    5b52:	00137813          	andi	a6,t1,1
                    data >>= 1;
    5b56:	0056d393          	srli	t2,a3,0x5
                    if (x16 == 1)
    5b5a:	00175e13          	srli	t3,a4,0x1
    5b5e:	00080b63          	beqz	a6,5b74 <cmp_complex+0x3cc>
                         crc |= 0x8000;
    5b62:	7569                	lui	a0,0xffffa
    5b64:	00150593          	addi	a1,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5b68:	00be47b3          	xor	a5,t3,a1
    5b6c:	03079f13          	slli	t5,a5,0x30
    5b70:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b74:	007e4633          	xor	a2,t3,t2
                    if (x16 == 1)
    5b78:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    5b7c:	0066d893          	srli	a7,a3,0x6
                    if (x16 == 1)
    5b80:	001e5713          	srli	a4,t3,0x1
    5b84:	000e8b63          	beqz	t4,5b9a <cmp_complex+0x3f2>
                         crc |= 0x8000;
    5b88:	7fe9                	lui	t6,0xffffa
    5b8a:	001f8293          	addi	t0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5b8e:	00574433          	xor	s0,a4,t0
    5b92:	03041093          	slli	ra,s0,0x30
    5b96:	0300d713          	srli	a4,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5b9a:	01174333          	xor	t1,a4,a7
                    if (x16 == 1)
    5b9e:	00137813          	andi	a6,t1,1
                    data >>= 1;
    5ba2:	829d                	srli	a3,a3,0x7
                    if (x16 == 1)
    5ba4:	00175f13          	srli	t5,a4,0x1
    5ba8:	00080b63          	beqz	a6,5bbe <cmp_complex+0x416>
                         crc |= 0x8000;
    5bac:	73e9                	lui	t2,0xffffa
    5bae:	00138513          	addi	a0,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5bb2:	00af45b3          	xor	a1,t5,a0
    5bb6:	03059793          	slli	a5,a1,0x30
    5bba:	0307df13          	srli	t5,a5,0x30
                    if (x16 == 1)
    5bbe:	001f7e13          	andi	t3,t5,1
    5bc2:	001f5293          	srli	t0,t5,0x1
    5bc6:	00de0b63          	beq	t3,a3,5bdc <cmp_complex+0x434>
                         crc |= 0x8000;
    5bca:	7669                	lui	a2,0xffffa
    5bcc:	00160e93          	addi	t4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5bd0:	01d2c8b3          	xor	a7,t0,t4
    5bd4:	03089f93          	slli	t6,a7,0x30
    5bd8:	030fd293          	srli	t0,t6,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5bdc:	00895413          	srli	s0,s2,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5be0:	005440b3          	xor	ra,s0,t0
                    if (x16 == 1)
    5be4:	0010f713          	andi	a4,ra,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5be8:	00895313          	srli	t1,s2,0x8
                    data >>= 1;
    5bec:	0012d593          	srli	a1,t0,0x1
    5bf0:	00995913          	srli	s2,s2,0x9
                    if (x16 == 1)
    5bf4:	cb11                	beqz	a4,5c08 <cmp_complex+0x460>
                         crc |= 0x8000;
    5bf6:	7869                	lui	a6,0xffffa
    5bf8:	00180693          	addi	a3,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5bfc:	00d5c3b3          	xor	t2,a1,a3
    5c00:	03039513          	slli	a0,t2,0x30
    5c04:	03055593          	srli	a1,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c08:	00b947b3          	xor	a5,s2,a1
                    if (x16 == 1)
    5c0c:	0017ff13          	andi	t5,a5,1
                    data >>= 1;
    5c10:	00235e13          	srli	t3,t1,0x2
                    if (x16 == 1)
    5c14:	0015d293          	srli	t0,a1,0x1
    5c18:	000f0b63          	beqz	t5,5c2e <cmp_complex+0x486>
                         crc |= 0x8000;
    5c1c:	7669                	lui	a2,0xffffa
    5c1e:	00160e93          	addi	t4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5c22:	01d2c8b3          	xor	a7,t0,t4
    5c26:	03089f93          	slli	t6,a7,0x30
    5c2a:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c2e:	005e4433          	xor	s0,t3,t0
                    if (x16 == 1)
    5c32:	00147093          	andi	ra,s0,1
                    data >>= 1;
    5c36:	00335713          	srli	a4,t1,0x3
                    if (x16 == 1)
    5c3a:	0012d513          	srli	a0,t0,0x1
    5c3e:	00008b63          	beqz	ra,5c54 <cmp_complex+0x4ac>
                         crc |= 0x8000;
    5c42:	7969                	lui	s2,0xffffa
    5c44:	00190813          	addi	a6,s2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5c48:	010546b3          	xor	a3,a0,a6
    5c4c:	03069393          	slli	t2,a3,0x30
    5c50:	0303d513          	srli	a0,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c54:	00a745b3          	xor	a1,a4,a0
                    if (x16 == 1)
    5c58:	0015ff13          	andi	t5,a1,1
                    data >>= 1;
    5c5c:	00435e13          	srli	t3,t1,0x4
                    if (x16 == 1)
    5c60:	00155f93          	srli	t6,a0,0x1
    5c64:	000f0b63          	beqz	t5,5c7a <cmp_complex+0x4d2>
                         crc |= 0x8000;
    5c68:	7669                	lui	a2,0xffffa
    5c6a:	00160e93          	addi	t4,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5c6e:	01dfc7b3          	xor	a5,t6,t4
    5c72:	03079893          	slli	a7,a5,0x30
    5c76:	0308df93          	srli	t6,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c7a:	01fe42b3          	xor	t0,t3,t6
                    if (x16 == 1)
    5c7e:	0012f413          	andi	s0,t0,1
                    data >>= 1;
    5c82:	00535093          	srli	ra,t1,0x5
                    if (x16 == 1)
    5c86:	001fd393          	srli	t2,t6,0x1
    5c8a:	c811                	beqz	s0,5c9e <cmp_complex+0x4f6>
                         crc |= 0x8000;
    5c8c:	7769                	lui	a4,0xffffa
    5c8e:	00170913          	addi	s2,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5c92:	0123c833          	xor	a6,t2,s2
    5c96:	03081693          	slli	a3,a6,0x30
    5c9a:	0306d393          	srli	t2,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5c9e:	0070c533          	xor	a0,ra,t2
                    if (x16 == 1)
    5ca2:	00157593          	andi	a1,a0,1
                    data >>= 1;
    5ca6:	00635f13          	srli	t5,t1,0x6
                    if (x16 == 1)
    5caa:	0013d893          	srli	a7,t2,0x1
    5cae:	c991                	beqz	a1,5cc2 <cmp_complex+0x51a>
                         crc |= 0x8000;
    5cb0:	7e69                	lui	t3,0xffffa
    5cb2:	001e0613          	addi	a2,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5cb6:	00c8ceb3          	xor	t4,a7,a2
    5cba:	030e9793          	slli	a5,t4,0x30
    5cbe:	0307d893          	srli	a7,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5cc2:	011f4fb3          	xor	t6,t5,a7
                    if (x16 == 1)
    5cc6:	001ff293          	andi	t0,t6,1
                    data >>= 1;
    5cca:	00735313          	srli	t1,t1,0x7
                    if (x16 == 1)
    5cce:	0018d813          	srli	a6,a7,0x1
    5cd2:	00028b63          	beqz	t0,5ce8 <cmp_complex+0x540>
                         crc |= 0x8000;
    5cd6:	7469                	lui	s0,0xffffa
    5cd8:	00140093          	addi	ra,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5cdc:	00184733          	xor	a4,a6,ra
    5ce0:	03071913          	slli	s2,a4,0x30
    5ce4:	03095813          	srli	a6,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ce8:	010346b3          	xor	a3,t1,a6
                    if (x16 == 1)
    5cec:	0016f393          	andi	t2,a3,1
    5cf0:	00185e93          	srli	t4,a6,0x1
    5cf4:	00038b63          	beqz	t2,5d0a <cmp_complex+0x562>
                         crc |= 0x8000;
    5cf8:	7569                	lui	a0,0xffffa
    5cfa:	00150593          	addi	a1,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5cfe:	00becf33          	xor	t5,t4,a1
    5d02:	030f1e13          	slli	t3,t5,0x30
    5d06:	030e5e93          	srli	t4,t3,0x30
                            if (res->crcmatrix==0)
    5d0a:	06c4d603          	lhu	a2,108(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    5d0e:	010e979b          	slliw	a5,t4,0x10
                res->crc=crcu16(retval,res->crc);
    5d12:	0684d403          	lhu	s0,104(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    5d16:	4107d89b          	sraiw	a7,a5,0x10
                            if (res->crcmatrix==0)
    5d1a:	e219                	bnez	a2,5d20 <cmp_complex+0x578>
                                    res->crcmatrix=retval;
    5d1c:	07d49623          	sh	t4,108(s1)
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5d20:	0088c2b3          	xor	t0,a7,s0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    5d24:	0ff8f313          	andi	t1,a7,255
                    if (x16 == 1)
    5d28:	0012f093          	andi	ra,t0,1
                    data >>= 1;
    5d2c:	00135713          	srli	a4,t1,0x1
                    if (x16 == 1)
    5d30:	00145f13          	srli	t5,s0,0x1
    5d34:	00008b63          	beqz	ra,5d4a <cmp_complex+0x5a2>
                         crc |= 0x8000;
    5d38:	7969                	lui	s2,0xffffa
    5d3a:	00190813          	addi	a6,s2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5d3e:	010f46b3          	xor	a3,t5,a6
    5d42:	03069393          	slli	t2,a3,0x30
    5d46:	0303df13          	srli	t5,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5d4a:	00ef4533          	xor	a0,t5,a4
                    if (x16 == 1)
    5d4e:	00157e13          	andi	t3,a0,1
                    data >>= 1;
    5d52:	00235593          	srli	a1,t1,0x2
                    if (x16 == 1)
    5d56:	001f5293          	srli	t0,t5,0x1
    5d5a:	000e0b63          	beqz	t3,5d70 <cmp_complex+0x5c8>
                         crc |= 0x8000;
    5d5e:	7669                	lui	a2,0xffffa
    5d60:	00160413          	addi	s0,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5d64:	0082c7b3          	xor	a5,t0,s0
    5d68:	03079f93          	slli	t6,a5,0x30
    5d6c:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5d70:	00b2c0b3          	xor	ra,t0,a1
                    if (x16 == 1)
    5d74:	0010f713          	andi	a4,ra,1
                    data >>= 1;
    5d78:	00335913          	srli	s2,t1,0x3
                    if (x16 == 1)
    5d7c:	0012de13          	srli	t3,t0,0x1
    5d80:	cb11                	beqz	a4,5d94 <cmp_complex+0x5ec>
                         crc |= 0x8000;
    5d82:	7869                	lui	a6,0xffffa
    5d84:	00180693          	addi	a3,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5d88:	00de43b3          	xor	t2,t3,a3
    5d8c:	03039f13          	slli	t5,t2,0x30
    5d90:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5d94:	012e4533          	xor	a0,t3,s2
                    if (x16 == 1)
    5d98:	00157613          	andi	a2,a0,1
                    data >>= 1;
    5d9c:	00435593          	srli	a1,t1,0x4
                    if (x16 == 1)
    5da0:	001e5093          	srli	ra,t3,0x1
    5da4:	ca11                	beqz	a2,5db8 <cmp_complex+0x610>
                         crc |= 0x8000;
    5da6:	7469                	lui	s0,0xffffa
    5da8:	00140f93          	addi	t6,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5dac:	01f0c7b3          	xor	a5,ra,t6
    5db0:	03079293          	slli	t0,a5,0x30
    5db4:	0302d093          	srli	ra,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5db8:	00b0c733          	xor	a4,ra,a1
                    if (x16 == 1)
    5dbc:	00177913          	andi	s2,a4,1
                    data >>= 1;
    5dc0:	00535813          	srli	a6,t1,0x5
                    if (x16 == 1)
    5dc4:	0010d613          	srli	a2,ra,0x1
    5dc8:	00090b63          	beqz	s2,5dde <cmp_complex+0x636>
                         crc |= 0x8000;
    5dcc:	76e9                	lui	a3,0xffffa
    5dce:	00168393          	addi	t2,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5dd2:	00764f33          	xor	t5,a2,t2
    5dd6:	030f1e13          	slli	t3,t5,0x30
    5dda:	030e5613          	srli	a2,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5dde:	01064533          	xor	a0,a2,a6
                    if (x16 == 1)
    5de2:	00157413          	andi	s0,a0,1
                    data >>= 1;
    5de6:	00635593          	srli	a1,t1,0x6
                    if (x16 == 1)
    5dea:	00165713          	srli	a4,a2,0x1
    5dee:	c811                	beqz	s0,5e02 <cmp_complex+0x65a>
                         crc |= 0x8000;
    5df0:	7fe9                	lui	t6,0xffffa
    5df2:	001f8293          	addi	t0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5df6:	005747b3          	xor	a5,a4,t0
    5dfa:	03079093          	slli	ra,a5,0x30
    5dfe:	0300d713          	srli	a4,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e02:	00e5c933          	xor	s2,a1,a4
                    if (x16 == 1)
    5e06:	00197813          	andi	a6,s2,1
                    data >>= 1;
    5e0a:	00735313          	srli	t1,t1,0x7
                    if (x16 == 1)
    5e0e:	00175613          	srli	a2,a4,0x1
    5e12:	00080b63          	beqz	a6,5e28 <cmp_complex+0x680>
                         crc |= 0x8000;
    5e16:	76e9                	lui	a3,0xffffa
    5e18:	00168393          	addi	t2,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5e1c:	00764f33          	xor	t5,a2,t2
    5e20:	030f1e13          	slli	t3,t5,0x30
    5e24:	030e5613          	srli	a2,t3,0x30
                    if (x16 == 1)
    5e28:	00167513          	andi	a0,a2,1
    5e2c:	00165793          	srli	a5,a2,0x1
    5e30:	00650b63          	beq	a0,t1,5e46 <cmp_complex+0x69e>
                         crc |= 0x8000;
    5e34:	7469                	lui	s0,0xffffa
    5e36:	00140593          	addi	a1,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5e3a:	00b7cfb3          	xor	t6,a5,a1
    5e3e:	030f9293          	slli	t0,t6,0x30
    5e42:	0302d793          	srli	a5,t0,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5e46:	008ede9b          	srliw	t4,t4,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e4a:	01d7c0b3          	xor	ra,a5,t4
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    5e4e:	0ffef713          	andi	a4,t4,255
                    if (x16 == 1)
    5e52:	0010f913          	andi	s2,ra,1
                    data >>= 1;
    5e56:	00175813          	srli	a6,a4,0x1
                    if (x16 == 1)
    5e5a:	0017de13          	srli	t3,a5,0x1
    5e5e:	00090b63          	beqz	s2,5e74 <cmp_complex+0x6cc>
                         crc |= 0x8000;
    5e62:	7369                	lui	t1,0xffffa
    5e64:	00130693          	addi	a3,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5e68:	00de43b3          	xor	t2,t3,a3
    5e6c:	03039f13          	slli	t5,t2,0x30
    5e70:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e74:	01c84633          	xor	a2,a6,t3
                    if (x16 == 1)
    5e78:	00167513          	andi	a0,a2,1
                    data >>= 1;
    5e7c:	00275413          	srli	s0,a4,0x2
                    if (x16 == 1)
    5e80:	001e5e93          	srli	t4,t3,0x1
    5e84:	c911                	beqz	a0,5e98 <cmp_complex+0x6f0>
                         crc |= 0x8000;
    5e86:	75e9                	lui	a1,0xffffa
    5e88:	00158f93          	addi	t6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5e8c:	01fec2b3          	xor	t0,t4,t6
    5e90:	03029793          	slli	a5,t0,0x30
    5e94:	0307de93          	srli	t4,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5e98:	008ec0b3          	xor	ra,t4,s0
                    if (x16 == 1)
    5e9c:	0010f913          	andi	s2,ra,1
                    data >>= 1;
    5ea0:	00375813          	srli	a6,a4,0x3
                    if (x16 == 1)
    5ea4:	001ede13          	srli	t3,t4,0x1
    5ea8:	00090b63          	beqz	s2,5ebe <cmp_complex+0x716>
                         crc |= 0x8000;
    5eac:	7369                	lui	t1,0xffffa
    5eae:	00130693          	addi	a3,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5eb2:	00de43b3          	xor	t2,t3,a3
    5eb6:	03039f13          	slli	t5,t2,0x30
    5eba:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ebe:	01c84633          	xor	a2,a6,t3
                    if (x16 == 1)
    5ec2:	00167513          	andi	a0,a2,1
                    data >>= 1;
    5ec6:	00475413          	srli	s0,a4,0x4
                    if (x16 == 1)
    5eca:	001e5e93          	srli	t4,t3,0x1
    5ece:	c911                	beqz	a0,5ee2 <cmp_complex+0x73a>
                         crc |= 0x8000;
    5ed0:	75e9                	lui	a1,0xffffa
    5ed2:	00158f93          	addi	t6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5ed6:	01fec2b3          	xor	t0,t4,t6
    5eda:	03029793          	slli	a5,t0,0x30
    5ede:	0307de93          	srli	t4,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5ee2:	01d440b3          	xor	ra,s0,t4
                    if (x16 == 1)
    5ee6:	0010f913          	andi	s2,ra,1
                    data >>= 1;
    5eea:	00575813          	srli	a6,a4,0x5
                    if (x16 == 1)
    5eee:	001ede13          	srli	t3,t4,0x1
    5ef2:	00090b63          	beqz	s2,5f08 <cmp_complex+0x760>
                         crc |= 0x8000;
    5ef6:	7369                	lui	t1,0xffffa
    5ef8:	00130693          	addi	a3,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5efc:	00de43b3          	xor	t2,t3,a3
    5f00:	03039f13          	slli	t5,t2,0x30
    5f04:	030f5e13          	srli	t3,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f08:	01c84633          	xor	a2,a6,t3
                    if (x16 == 1)
    5f0c:	00167513          	andi	a0,a2,1
                    data >>= 1;
    5f10:	00675413          	srli	s0,a4,0x6
                    if (x16 == 1)
    5f14:	001e5e93          	srli	t4,t3,0x1
    5f18:	c911                	beqz	a0,5f2c <cmp_complex+0x784>
                         crc |= 0x8000;
    5f1a:	75e9                	lui	a1,0xffffa
    5f1c:	00158f93          	addi	t6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5f20:	01fec2b3          	xor	t0,t4,t6
    5f24:	03029793          	slli	a5,t0,0x30
    5f28:	0307de93          	srli	t4,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f2c:	01d440b3          	xor	ra,s0,t4
                    if (x16 == 1)
    5f30:	0010f913          	andi	s2,ra,1
                    data >>= 1;
    5f34:	831d                	srli	a4,a4,0x7
                    if (x16 == 1)
    5f36:	001edf13          	srli	t5,t4,0x1
    5f3a:	00090b63          	beqz	s2,5f50 <cmp_complex+0x7a8>
                         crc |= 0x8000;
    5f3e:	7869                	lui	a6,0xffffa
    5f40:	00180313          	addi	t1,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5f44:	006f46b3          	xor	a3,t5,t1
    5f48:	03069393          	slli	t2,a3,0x30
    5f4c:	0303df13          	srli	t5,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    5f50:	01e74e33          	xor	t3,a4,t5
                    if (x16 == 1)
    5f54:	001e7613          	andi	a2,t3,1
    5f58:	001f5293          	srli	t0,t5,0x1
    5f5c:	ca11                	beqz	a2,5f70 <cmp_complex+0x7c8>
                         crc |= 0x8000;
    5f5e:	7569                	lui	a0,0xffffa
    5f60:	00150413          	addi	s0,a0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    5f64:	0082c5b3          	xor	a1,t0,s0
    5f68:	03059f93          	slli	t6,a1,0x30
    5f6c:	030fd293          	srli	t0,t6,0x30
                retval &= 0x007f;
    5f70:	07f8f893          	andi	a7,a7,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5f74:	f00afa93          	andi	s5,s5,-256
    5f78:	0158e7b3          	or	a5,a7,s5
                res->crc=crcu16(retval,res->crc);
    5f7c:	06549423          	sh	t0,104(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    5f80:	0807e493          	ori	s1,a5,128
    5f84:	00999023          	sh	s1,0(s3)
}
    5f88:	70e2                	ld	ra,56(sp)
    5f8a:	7442                	ld	s0,48(sp)
    5f8c:	74a2                	ld	s1,40(sp)
    5f8e:	7902                	ld	s2,32(sp)
    5f90:	69e2                	ld	s3,24(sp)
    5f92:	6aa2                	ld	s5,8(sp)
    5f94:	411a053b          	subw	a0,s4,a7
    5f98:	6a42                	ld	s4,16(sp)
    5f9a:	6121                	addi	sp,sp,64
    5f9c:	8082                	ret
                res->crc=crcu16(retval,res->crc);
    5f9e:	030a9f93          	slli	t6,s5,0x30
    5fa2:	030fde93          	srli	t4,t6,0x30
    5fa6:	88d6                	mv	a7,s5
    5fa8:	bba5                	j	5d20 <cmp_complex+0x578>
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5faa:	02200893          	li	a7,34
    5fae:	8fba                	mv	t6,a4
    5fb0:	01175463          	bge	a4,a7,5fb8 <cmp_complex+0x810>
    5fb4:	02200f93          	li	t6,34
    5fb8:	00249683          	lh	a3,2(s1)
    5fbc:	00049603          	lh	a2,0(s1)
    5fc0:	708c                	ld	a1,32(s1)
    5fc2:	7488                	ld	a0,40(s1)
    5fc4:	87a2                	mv	a5,s0
    5fc6:	0ffff713          	andi	a4,t6,255
    5fca:	faafe0ef          	jal	ra,4774 <core_bench_state>
                            if (res->crcstate==0)
    5fce:	06e4d283          	lhu	t0,110(s1)
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5fd2:	0105141b          	slliw	s0,a0,0x10
    5fd6:	4104589b          	sraiw	a7,s0,0x10
    5fda:	8eaa                	mv	t4,a0
                res->crc=crcu16(retval,res->crc);
    5fdc:	0684d403          	lhu	s0,104(s1)
                            if (res->crcstate==0)
    5fe0:	d40290e3          	bnez	t0,5d20 <cmp_complex+0x578>
                                    res->crcstate=retval;
    5fe4:	06a49723          	sh	a0,110(s1)
    5fe8:	bb25                	j	5d20 <cmp_complex+0x578>
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    5fea:	02200393          	li	t2,34
    5fee:	883a                	mv	a6,a4
    5ff0:	00775463          	bge	a4,t2,5ff8 <cmp_complex+0x850>
    5ff4:	02200813          	li	a6,34
    5ff8:	708c                	ld	a1,32(s1)
    5ffa:	00249683          	lh	a3,2(s1)
    5ffe:	00049603          	lh	a2,0(s1)
    6002:	7488                	ld	a0,40(s1)
    6004:	87a2                	mv	a5,s0
    6006:	0ff87713          	andi	a4,a6,255
    600a:	f6afe0ef          	jal	ra,4774 <core_bench_state>
                            if (res->crcstate==0)
    600e:	06e4d583          	lhu	a1,110(s1)
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    6012:	01051a1b          	slliw	s4,a0,0x10
                res->crc=crcu16(retval,res->crc);
    6016:	0684d403          	lhu	s0,104(s1)
                            retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    601a:	410a539b          	sraiw	t2,s4,0x10
                            if (res->crcstate==0)
    601e:	fe059063          	bnez	a1,57fe <cmp_complex+0x56>
                                    res->crcstate=retval;
    6022:	06a49723          	sh	a0,110(s1)
    6026:	fd8ff06f          	j	57fe <cmp_complex+0x56>
            crc=crc16(matrix_test(N,C,A,B,val),crc);
    602a:	6e34                	ld	a3,88(a2)
    602c:	70ac                	ld	a1,96(s1)
    602e:	6a30                	ld	a2,80(a2)
    6030:	44a8                	lw	a0,72(s1)
    6032:	9befb0ef          	jal	ra,11f0 <matrix_test>
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6036:	00a44633          	xor	a2,s0,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    603a:	0ff57893          	andi	a7,a0,255
        return crcu16((ee_u16)newval, crc);
    603e:	03051e93          	slli	t4,a0,0x30
                    if (x16 == 1)
    6042:	00167e13          	andi	t3,a2,1
        return crcu16((ee_u16)newval, crc);
    6046:	030edf13          	srli	t5,t4,0x30
                    data >>= 1;
    604a:	0018df93          	srli	t6,a7,0x1
                    crc >>= 1;
    604e:	00145293          	srli	t0,s0,0x1
                    if (x16 == 1)
    6052:	000e0b63          	beqz	t3,6068 <cmp_complex+0x8c0>
                         crc |= 0x8000;
    6056:	7469                	lui	s0,0xffffa
    6058:	00140093          	addi	ra,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    605c:	0012c7b3          	xor	a5,t0,ra
    6060:	03079713          	slli	a4,a5,0x30
    6064:	03075293          	srli	t0,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6068:	01f2c6b3          	xor	a3,t0,t6
                    if (x16 == 1)
    606c:	0016f313          	andi	t1,a3,1
                    data >>= 1;
    6070:	0028d393          	srli	t2,a7,0x2
                    crc >>= 1;
    6074:	0012de13          	srli	t3,t0,0x1
                    if (x16 == 1)
    6078:	00030b63          	beqz	t1,608e <cmp_complex+0x8e6>
                         crc |= 0x8000;
    607c:	7869                	lui	a6,0xffffa
    607e:	00180593          	addi	a1,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    6082:	00be4a33          	xor	s4,t3,a1
    6086:	030a1513          	slli	a0,s4,0x30
    608a:	03055e13          	srli	t3,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    608e:	007e4633          	xor	a2,t3,t2
                    if (x16 == 1)
    6092:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    6096:	0038df93          	srli	t6,a7,0x3
                    crc >>= 1;
    609a:	001e5293          	srli	t0,t3,0x1
                    if (x16 == 1)
    609e:	000e8b63          	beqz	t4,60b4 <cmp_complex+0x90c>
                         crc |= 0x8000;
    60a2:	7469                	lui	s0,0xffffa
    60a4:	00140093          	addi	ra,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    60a8:	0012c7b3          	xor	a5,t0,ra
    60ac:	03079713          	slli	a4,a5,0x30
    60b0:	03075293          	srli	t0,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    60b4:	01f2c6b3          	xor	a3,t0,t6
                    if (x16 == 1)
    60b8:	0016f313          	andi	t1,a3,1
                    data >>= 1;
    60bc:	0048d393          	srli	t2,a7,0x4
                    crc >>= 1;
    60c0:	0012de13          	srli	t3,t0,0x1
                    if (x16 == 1)
    60c4:	00030b63          	beqz	t1,60da <cmp_complex+0x932>
                         crc |= 0x8000;
    60c8:	7869                	lui	a6,0xffffa
    60ca:	00180593          	addi	a1,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    60ce:	00be4a33          	xor	s4,t3,a1
    60d2:	030a1513          	slli	a0,s4,0x30
    60d6:	03055e13          	srli	t3,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    60da:	007e4633          	xor	a2,t3,t2
                    if (x16 == 1)
    60de:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    60e2:	0058df93          	srli	t6,a7,0x5
                    crc >>= 1;
    60e6:	001e5293          	srli	t0,t3,0x1
                    if (x16 == 1)
    60ea:	000e8b63          	beqz	t4,6100 <cmp_complex+0x958>
                         crc |= 0x8000;
    60ee:	7469                	lui	s0,0xffffa
    60f0:	00140093          	addi	ra,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    60f4:	0012c7b3          	xor	a5,t0,ra
    60f8:	03079713          	slli	a4,a5,0x30
    60fc:	03075293          	srli	t0,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6100:	01f2c6b3          	xor	a3,t0,t6
                    if (x16 == 1)
    6104:	0016f313          	andi	t1,a3,1
                    data >>= 1;
    6108:	0068d393          	srli	t2,a7,0x6
                    crc >>= 1;
    610c:	0012de13          	srli	t3,t0,0x1
                    if (x16 == 1)
    6110:	00030b63          	beqz	t1,6126 <cmp_complex+0x97e>
                         crc |= 0x8000;
    6114:	7869                	lui	a6,0xffffa
    6116:	00180593          	addi	a1,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    611a:	00be4a33          	xor	s4,t3,a1
    611e:	030a1513          	slli	a0,s4,0x30
    6122:	03055e13          	srli	t3,a0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6126:	007e4633          	xor	a2,t3,t2
                    if (x16 == 1)
    612a:	00167e93          	andi	t4,a2,1
                    data >>= 1;
    612e:	0078d893          	srli	a7,a7,0x7
                    crc >>= 1;
    6132:	001e5713          	srli	a4,t3,0x1
                    if (x16 == 1)
    6136:	000e8b63          	beqz	t4,614c <cmp_complex+0x9a4>
                         crc |= 0x8000;
    613a:	7fe9                	lui	t6,0xffffa
    613c:	001f8413          	addi	s0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    6140:	008740b3          	xor	ra,a4,s0
    6144:	03009793          	slli	a5,ra,0x30
    6148:	0307d713          	srli	a4,a5,0x30
                    if (x16 == 1)
    614c:	00177293          	andi	t0,a4,1
                    crc >>= 1;
    6150:	00175a13          	srli	s4,a4,0x1
                    if (x16 == 1)
    6154:	01128b63          	beq	t0,a7,616a <cmp_complex+0x9c2>
                         crc |= 0x8000;
    6158:	76e9                	lui	a3,0xffffa
    615a:	00168313          	addi	t1,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    615e:	006a43b3          	xor	t2,s4,t1
    6162:	03039813          	slli	a6,t2,0x30
    6166:	03085a13          	srli	s4,a6,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    616a:	008f5593          	srli	a1,t5,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    616e:	00ba4533          	xor	a0,s4,a1
                    if (x16 == 1)
    6172:	00157e13          	andi	t3,a0,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6176:	008f5613          	srli	a2,t5,0x8
                    data >>= 1;
    617a:	001a5093          	srli	ra,s4,0x1
    617e:	009f5f13          	srli	t5,t5,0x9
                    if (x16 == 1)
    6182:	000e0b63          	beqz	t3,6198 <cmp_complex+0x9f0>
                         crc |= 0x8000;
    6186:	7ee9                	lui	t4,0xffffa
    6188:	001e8893          	addi	a7,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    618c:	0110cfb3          	xor	t6,ra,a7
    6190:	030f9413          	slli	s0,t6,0x30
    6194:	03045093          	srli	ra,s0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6198:	01e0c7b3          	xor	a5,ra,t5
                    if (x16 == 1)
    619c:	0017f293          	andi	t0,a5,1
                    data >>= 1;
    61a0:	00265713          	srli	a4,a2,0x2
                    if (x16 == 1)
    61a4:	0010da13          	srli	s4,ra,0x1
    61a8:	00028b63          	beqz	t0,61be <cmp_complex+0xa16>
                         crc |= 0x8000;
    61ac:	76e9                	lui	a3,0xffffa
    61ae:	00168313          	addi	t1,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    61b2:	006a43b3          	xor	t2,s4,t1
    61b6:	03039813          	slli	a6,t2,0x30
    61ba:	03085a13          	srli	s4,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    61be:	00ea45b3          	xor	a1,s4,a4
                    if (x16 == 1)
    61c2:	0015f513          	andi	a0,a1,1
                    data >>= 1;
    61c6:	00365e13          	srli	t3,a2,0x3
                    if (x16 == 1)
    61ca:	001a5413          	srli	s0,s4,0x1
    61ce:	c911                	beqz	a0,61e2 <cmp_complex+0xa3a>
                         crc |= 0x8000;
    61d0:	7f69                	lui	t5,0xffffa
    61d2:	001f0e93          	addi	t4,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    61d6:	01d448b3          	xor	a7,s0,t4
    61da:	03089f93          	slli	t6,a7,0x30
    61de:	030fd413          	srli	s0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    61e2:	01c440b3          	xor	ra,s0,t3
                    if (x16 == 1)
    61e6:	0010f293          	andi	t0,ra,1
                    data >>= 1;
    61ea:	00465693          	srli	a3,a2,0x4
                    if (x16 == 1)
    61ee:	00145813          	srli	a6,s0,0x1
    61f2:	00028b63          	beqz	t0,6208 <cmp_complex+0xa60>
                         crc |= 0x8000;
    61f6:	7769                	lui	a4,0xffffa
    61f8:	00170313          	addi	t1,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    61fc:	006847b3          	xor	a5,a6,t1
    6200:	03079393          	slli	t2,a5,0x30
    6204:	0303d813          	srli	a6,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6208:	00d84a33          	xor	s4,a6,a3
                    if (x16 == 1)
    620c:	001a7593          	andi	a1,s4,1
                    data >>= 1;
    6210:	00565513          	srli	a0,a2,0x5
                    if (x16 == 1)
    6214:	00185f93          	srli	t6,a6,0x1
    6218:	c991                	beqz	a1,622c <cmp_complex+0xa84>
                         crc |= 0x8000;
    621a:	7e69                	lui	t3,0xffffa
    621c:	001e0f13          	addi	t5,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    6220:	01efceb3          	xor	t4,t6,t5
    6224:	030e9893          	slli	a7,t4,0x30
    6228:	0308df93          	srli	t6,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    622c:	00afc433          	xor	s0,t6,a0
                    if (x16 == 1)
    6230:	00147093          	andi	ra,s0,1
                    data >>= 1;
    6234:	00665293          	srli	t0,a2,0x6
                    if (x16 == 1)
    6238:	001fd393          	srli	t2,t6,0x1
    623c:	00008b63          	beqz	ra,6252 <cmp_complex+0xaaa>
                         crc |= 0x8000;
    6240:	76e9                	lui	a3,0xffffa
    6242:	00168713          	addi	a4,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    6246:	00e3c333          	xor	t1,t2,a4
    624a:	03031793          	slli	a5,t1,0x30
    624e:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6252:	0053c833          	xor	a6,t2,t0
                    if (x16 == 1)
    6256:	00187a13          	andi	s4,a6,1
                    data >>= 1;
    625a:	821d                	srli	a2,a2,0x7
                    if (x16 == 1)
    625c:	0013de93          	srli	t4,t2,0x1
    6260:	000a0b63          	beqz	s4,6276 <cmp_complex+0xace>
                         crc |= 0x8000;
    6264:	75e9                	lui	a1,0xffffa
    6266:	00158513          	addi	a0,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    626a:	00aece33          	xor	t3,t4,a0
    626e:	030e1f13          	slli	t5,t3,0x30
    6272:	030f5e93          	srli	t4,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6276:	01d648b3          	xor	a7,a2,t4
                    if (x16 == 1)
    627a:	0018ff93          	andi	t6,a7,1
    627e:	001ed513          	srli	a0,t4,0x1
    6282:	000f8b63          	beqz	t6,6298 <cmp_complex+0xaf0>
                         crc |= 0x8000;
    6286:	7469                	lui	s0,0xffffa
    6288:	00140093          	addi	ra,s0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    628c:	001542b3          	xor	t0,a0,ra
    6290:	03029693          	slli	a3,t0,0x30
    6294:	0306d513          	srli	a0,a3,0x30
                            if (res->crcmatrix==0)
    6298:	06c4d703          	lhu	a4,108(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    629c:	0105131b          	slliw	t1,a0,0x10
                res->crc=crcu16(retval,res->crc);
    62a0:	0684d403          	lhu	s0,104(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    62a4:	4103539b          	sraiw	t2,t1,0x10
                            if (res->crcmatrix==0)
    62a8:	d4071b63          	bnez	a4,57fe <cmp_complex+0x56>
                                    res->crcmatrix=retval;
    62ac:	06a49623          	sh	a0,108(s1)
    62b0:	d4eff06f          	j	57fe <cmp_complex+0x56>

00000000000062b4 <core_bench_list>:
            for (i=0; i<find_num; i++) {
    62b4:	00451f83          	lh	t6,4(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
    62b8:	7159                	addi	sp,sp,-112
    62ba:	f0a2                	sd	s0,96(sp)
    62bc:	e46e                	sd	s11,8(sp)
    62be:	f486                	sd	ra,104(sp)
    62c0:	eca6                	sd	s1,88(sp)
    62c2:	e8ca                	sd	s2,80(sp)
    62c4:	e4ce                	sd	s3,72(sp)
    62c6:	e0d2                	sd	s4,64(sp)
    62c8:	fc56                	sd	s5,56(sp)
    62ca:	f85a                	sd	s6,48(sp)
    62cc:	f45e                	sd	s7,40(sp)
    62ce:	f062                	sd	s8,32(sp)
    62d0:	ec66                	sd	s9,24(sp)
    62d2:	e86a                	sd	s10,16(sp)
        list_head *list=res->list;
    62d4:	6120                	ld	s0,64(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
    62d6:	8daa                	mv	s11,a0
    62d8:	8e2e                	mv	t3,a1
            for (i=0; i<find_num; i++) {
    62da:	07f05be3          	blez	t6,6b50 <core_bench_list+0x89c>
        info.idx=finder_idx;
    62de:	8c2e                	mv	s8,a1
            for (i=0; i<find_num; i++) {
    62e0:	4801                	li	a6,0
        ee_u16 found=0,missed=0;
    62e2:	4f01                	li	t5,0
    62e4:	4d01                	li	s10,0
        ee_u16 retval=0;
    62e6:	4e81                	li	t4,0
                    info.data16= (i & 0xff) ;
    62e8:	0ff87c93          	andi	s9,a6,255
        if (info->idx>=0) {
    62ec:	000c059b          	sext.w	a1,s8
    62f0:	3a0c4063          	bltz	s8,6690 <core_bench_list+0x3dc>
                while (list && (list->info->idx != info->idx))
    62f4:	060402e3          	beqz	s0,6b58 <core_bench_list+0x8a4>
    62f8:	87a2                	mv	a5,s0
    62fa:	a019                	j	6300 <core_bench_list+0x4c>
                        list=list->next;
    62fc:	639c                	ld	a5,0(a5)
                while (list && (list->info->idx != info->idx))
    62fe:	c799                	beqz	a5,630c <core_bench_list+0x58>
    6300:	0087b283          	ld	t0,8(a5)
    6304:	00229303          	lh	t1,2(t0)
    6308:	feb31ae3          	bne	t1,a1,62fc <core_bench_list+0x48>
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    630c:	8aa2                	mv	s5,s0
                tmp=list->next;
    630e:	000ab603          	ld	a2,0(s5)
        list_head *next=NULL, *tmp;
    6312:	4b01                	li	s6,0
                list->next=next;
    6314:	016ab023          	sd	s6,0(s5)
    6318:	8456                	mv	s0,s5
        while (list) {
    631a:	ce25                	beqz	a2,6392 <core_bench_list+0xde>
                tmp=list->next;
    631c:	6208                	ld	a0,0(a2)
                list->next=next;
    631e:	01563023          	sd	s5,0(a2)
    6322:	8b56                	mv	s6,s5
                tmp=list->next;
    6324:	8432                	mv	s0,a2
        while (list) {
    6326:	c535                	beqz	a0,6392 <core_bench_list+0xde>
                tmp=list->next;
    6328:	00053383          	ld	t2,0(a0)
                list->next=next;
    632c:	e110                	sd	a2,0(a0)
    632e:	8b32                	mv	s6,a2
                tmp=list->next;
    6330:	842a                	mv	s0,a0
        while (list) {
    6332:	06038063          	beqz	t2,6392 <core_bench_list+0xde>
                tmp=list->next;
    6336:	0003b483          	ld	s1,0(t2)
                list->next=next;
    633a:	00a3b023          	sd	a0,0(t2)
    633e:	8b2a                	mv	s6,a0
                tmp=list->next;
    6340:	841e                	mv	s0,t2
        while (list) {
    6342:	c8a1                	beqz	s1,6392 <core_bench_list+0xde>
                tmp=list->next;
    6344:	0004b903          	ld	s2,0(s1)
                list->next=next;
    6348:	0074b023          	sd	t2,0(s1)
    634c:	8b1e                	mv	s6,t2
                tmp=list->next;
    634e:	8426                	mv	s0,s1
        while (list) {
    6350:	04090163          	beqz	s2,6392 <core_bench_list+0xde>
                tmp=list->next;
    6354:	00093983          	ld	s3,0(s2)
                list->next=next;
    6358:	00993023          	sd	s1,0(s2)
    635c:	8b26                	mv	s6,s1
                tmp=list->next;
    635e:	844a                	mv	s0,s2
        while (list) {
    6360:	02098963          	beqz	s3,6392 <core_bench_list+0xde>
                tmp=list->next;
    6364:	0009ba03          	ld	s4,0(s3)
                list->next=next;
    6368:	0129b023          	sd	s2,0(s3)
    636c:	8b4a                	mv	s6,s2
                tmp=list->next;
    636e:	844e                	mv	s0,s3
        while (list) {
    6370:	020a0163          	beqz	s4,6392 <core_bench_list+0xde>
                tmp=list->next;
    6374:	000a3a83          	ld	s5,0(s4)
                list->next=next;
    6378:	013a3023          	sd	s3,0(s4)
    637c:	8b4e                	mv	s6,s3
                tmp=list->next;
    637e:	8452                	mv	s0,s4
        while (list) {
    6380:	000a8963          	beqz	s5,6392 <core_bench_list+0xde>
                tmp=list->next;
    6384:	000ab603          	ld	a2,0(s5)
    6388:	8b52                	mv	s6,s4
                list->next=next;
    638a:	016ab023          	sd	s6,0(s5)
    638e:	8456                	mv	s0,s5
        while (list) {
    6390:	f651                	bnez	a2,631c <core_bench_list+0x68>
                    if (this_find==NULL) {
    6392:	30078e63          	beqz	a5,66ae <core_bench_list+0x3fa>
                            if (this_find->info->data16 & 0x1) /* use found value */
    6396:	0087bb03          	ld	s6,8(a5)
                            found++;
    639a:	001d089b          	addiw	a7,s10,1
    639e:	03089b93          	slli	s7,a7,0x30
                            if (this_find->info->data16 & 0x1) /* use found value */
    63a2:	000b1703          	lh	a4,0(s6)
                            found++;
    63a6:	030bdd13          	srli	s10,s7,0x30
                            if (this_find->info->data16 & 0x1) /* use found value */
    63aa:	00177093          	andi	ra,a4,1
    63ae:	00008c63          	beqz	ra,63c6 <core_bench_list+0x112>
                                    retval+=(this_find->info->data16 >> 9) & 1;
    63b2:	4097569b          	sraiw	a3,a4,0x9
    63b6:	0016f293          	andi	t0,a3,1
    63ba:	01d28ebb          	addw	t4,t0,t4
    63be:	030e9313          	slli	t1,t4,0x30
    63c2:	03035e93          	srli	t4,t1,0x30
                                if (this_find->next != NULL) {
    63c6:	6390                	ld	a2,0(a5)
    63c8:	c611                	beqz	a2,63d4 <core_bench_list+0x120>
                                        this_find->next = finder->next;
    63ca:	6208                	ld	a0,0(a2)
    63cc:	e388                	sd	a0,0(a5)
                                        finder->next=list->next;
    63ce:	601c                	ld	a5,0(s0)
    63d0:	e21c                	sd	a5,0(a2)
                                        list->next=finder;
    63d2:	e010                	sd	a2,0(s0)
                    if (info.idx>=0)
    63d4:	0005c763          	bltz	a1,63e2 <core_bench_list+0x12e>
                            info.idx++;
    63d8:	2c05                	addiw	s8,s8,1
    63da:	010c159b          	slliw	a1,s8,0x10
    63de:	4105dc1b          	sraiw	s8,a1,0x10
            for (i=0; i<find_num; i++) {
    63e2:	2805                	addiw	a6,a6,1
    63e4:	01081b1b          	slliw	s6,a6,0x10
    63e8:	410b581b          	sraiw	a6,s6,0x10
    63ec:	ef0f9ee3          	bne	t6,a6,62e8 <core_bench_list+0x34>
        retval+=found*4-missed;
    63f0:	002d1f9b          	slliw	t6,s10,0x2
    63f4:	41ef88bb          	subw	a7,t6,t5
    63f8:	01d88bbb          	addw	s7,a7,t4
    63fc:	030b9d13          	slli	s10,s7,0x30
    6400:	030d5493          	srli	s1,s10,0x30
            if (finder_idx>0)
    6404:	67c04463          	bgtz	t3,6a6c <core_bench_list+0x7b8>
        remover=core_list_remove(list->next);
    6408:	00043d83          	ld	s11,0(s0)
        if (info->idx>=0) {
    640c:	000c0a9b          	sext.w	s5,s8
    6410:	87a2                	mv	a5,s0
        list_head *ret=item->next;
    6412:	000db503          	ld	a0,0(s11)
            tmp=item->info;
    6416:	008dba03          	ld	s4,8(s11)
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    641a:	000c881b          	sext.w	a6,s9
        item->info=ret->info;
    641e:	00853383          	ld	t2,8(a0)
            item->next=item->next->next;
    6422:	00053f03          	ld	t5,0(a0)
        item->info=ret->info;
    6426:	007db423          	sd	t2,8(s11)
        ret->info=tmp;
    642a:	01453423          	sd	s4,8(a0)
            item->next=item->next->next;
    642e:	01edb023          	sd	t5,0(s11)
        ret->next=NULL;
    6432:	00053023          	sd	zero,0(a0)
        if (info->idx>=0) {
    6436:	220c4863          	bltz	s8,6666 <core_bench_list+0x3b2>
                while (list && (list->info->idx != info->idx))
    643a:	0087bc83          	ld	s9,8(a5)
                        list=list->next;
    643e:	639c                	ld	a5,0(a5)
                while (list && (list->info->idx != info->idx))
    6440:	002c9903          	lh	s2,2(s9)
    6444:	25590163          	beq	s2,s5,6686 <core_bench_list+0x3d2>
    6448:	fbed                	bnez	a5,643a <core_bench_list+0x186>
                finder=list->next;
    644a:	00043883          	ld	a7,0(s0)
            item_removed->next=item_modified->next;
    644e:	0008b783          	ld	a5,0(a7)
    6452:	8d3e                	mv	s10,a5
                retval=crc16(list->info->data16,retval);
    6454:	00843f83          	ld	t6,8(s0)
                         crc |= 0x8000;
    6458:	7be9                	lui	s7,0xffffa
    645a:	001b8713          	addi	a4,s7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
                retval=crc16(list->info->data16,retval);
    645e:	000f9e03          	lh	t3,0(t6)
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6462:	008e5093          	srli	ra,t3,0x8
        crc=crcu8( (ee_u8) (newval)               ,crc);
    6466:	0ffe7293          	andi	t0,t3,255
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    646a:	0ff0f693          	andi	a3,ra,255
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    646e:	018e131b          	slliw	t1,t3,0x18
    6472:	01809e9b          	slliw	t4,ra,0x18
    6476:	0012dd93          	srli	s11,t0,0x1
    647a:	0022dc13          	srli	s8,t0,0x2
    647e:	0032da93          	srli	s5,t0,0x3
    6482:	0042d993          	srli	s3,t0,0x4
    6486:	0052d913          	srli	s2,t0,0x5
    648a:	0062d393          	srli	t2,t0,0x6
    648e:	0072d613          	srli	a2,t0,0x7
    6492:	41835b1b          	sraiw	s6,t1,0x18
    6496:	418ed59b          	sraiw	a1,t4,0x18
    649a:	0016d813          	srli	a6,a3,0x1
    649e:	0026df93          	srli	t6,a3,0x2
    64a2:	0036df13          	srli	t5,a3,0x3
    64a6:	0046db93          	srli	s7,a3,0x4
    64aa:	0056de13          	srli	t3,a3,0x5
    64ae:	0066d093          	srli	ra,a3,0x6
    64b2:	0076d293          	srli	t0,a3,0x7
    64b6:	009b4cb3          	xor	s9,s6,s1
                    if (x16 == 1)
    64ba:	001cf693          	andi	a3,s9,1
                    crc >>= 1;
    64be:	0014de93          	srli	t4,s1,0x1
                    if (x16 == 1)
    64c2:	c699                	beqz	a3,64d0 <core_bench_list+0x21c>
                         crc |= 0x8000;
    64c4:	00eec4b3          	xor	s1,t4,a4
    64c8:	03049313          	slli	t1,s1,0x30
    64cc:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    64d0:	01ddccb3          	xor	s9,s11,t4
                    if (x16 == 1)
    64d4:	001cf693          	andi	a3,s9,1
    64d8:	001ede93          	srli	t4,t4,0x1
    64dc:	c699                	beqz	a3,64ea <core_bench_list+0x236>
                         crc |= 0x8000;
    64de:	00eec4b3          	xor	s1,t4,a4
    64e2:	03049313          	slli	t1,s1,0x30
    64e6:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    64ea:	01dc4cb3          	xor	s9,s8,t4
                    if (x16 == 1)
    64ee:	001cf693          	andi	a3,s9,1
    64f2:	001ede93          	srli	t4,t4,0x1
    64f6:	c699                	beqz	a3,6504 <core_bench_list+0x250>
                         crc |= 0x8000;
    64f8:	00eec4b3          	xor	s1,t4,a4
    64fc:	03049313          	slli	t1,s1,0x30
    6500:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6504:	01daccb3          	xor	s9,s5,t4
                    if (x16 == 1)
    6508:	001cf693          	andi	a3,s9,1
    650c:	001ede93          	srli	t4,t4,0x1
    6510:	c699                	beqz	a3,651e <core_bench_list+0x26a>
                         crc |= 0x8000;
    6512:	00eec4b3          	xor	s1,t4,a4
    6516:	03049313          	slli	t1,s1,0x30
    651a:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    651e:	01d9ccb3          	xor	s9,s3,t4
                    if (x16 == 1)
    6522:	001cf693          	andi	a3,s9,1
    6526:	001ede93          	srli	t4,t4,0x1
    652a:	c699                	beqz	a3,6538 <core_bench_list+0x284>
                         crc |= 0x8000;
    652c:	00eec4b3          	xor	s1,t4,a4
    6530:	03049313          	slli	t1,s1,0x30
    6534:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6538:	01d94cb3          	xor	s9,s2,t4
                    if (x16 == 1)
    653c:	001cf693          	andi	a3,s9,1
    6540:	001ede93          	srli	t4,t4,0x1
    6544:	c699                	beqz	a3,6552 <core_bench_list+0x29e>
                         crc |= 0x8000;
    6546:	00eec4b3          	xor	s1,t4,a4
    654a:	03049313          	slli	t1,s1,0x30
    654e:	03035e93          	srli	t4,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6552:	01d3ccb3          	xor	s9,t2,t4
                    if (x16 == 1)
    6556:	001cf693          	andi	a3,s9,1
    655a:	001ede93          	srli	t4,t4,0x1
    655e:	c699                	beqz	a3,656c <core_bench_list+0x2b8>
                         crc |= 0x8000;
    6560:	00eec4b3          	xor	s1,t4,a4
    6564:	03049313          	slli	t1,s1,0x30
    6568:	03035e93          	srli	t4,t1,0x30
                    if (x16 == 1)
    656c:	001efc93          	andi	s9,t4,1
    6570:	001ed313          	srli	t1,t4,0x1
    6574:	00cc8863          	beq	s9,a2,6584 <core_bench_list+0x2d0>
                         crc |= 0x8000;
    6578:	00e346b3          	xor	a3,t1,a4
    657c:	03069493          	slli	s1,a3,0x30
    6580:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6584:	0065ceb3          	xor	t4,a1,t1
                    if (x16 == 1)
    6588:	001efc93          	andi	s9,t4,1
    658c:	00135313          	srli	t1,t1,0x1
    6590:	000c8863          	beqz	s9,65a0 <core_bench_list+0x2ec>
                         crc |= 0x8000;
    6594:	00e346b3          	xor	a3,t1,a4
    6598:	03069493          	slli	s1,a3,0x30
    659c:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    65a0:	00684eb3          	xor	t4,a6,t1
                    if (x16 == 1)
    65a4:	001efc93          	andi	s9,t4,1
    65a8:	00135313          	srli	t1,t1,0x1
    65ac:	000c8863          	beqz	s9,65bc <core_bench_list+0x308>
                         crc |= 0x8000;
    65b0:	00e346b3          	xor	a3,t1,a4
    65b4:	03069493          	slli	s1,a3,0x30
    65b8:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    65bc:	006fceb3          	xor	t4,t6,t1
                    if (x16 == 1)
    65c0:	001efc93          	andi	s9,t4,1
    65c4:	00135313          	srli	t1,t1,0x1
    65c8:	000c8863          	beqz	s9,65d8 <core_bench_list+0x324>
                         crc |= 0x8000;
    65cc:	00e346b3          	xor	a3,t1,a4
    65d0:	03069493          	slli	s1,a3,0x30
    65d4:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    65d8:	006f4eb3          	xor	t4,t5,t1
                    if (x16 == 1)
    65dc:	001efc93          	andi	s9,t4,1
    65e0:	00135313          	srli	t1,t1,0x1
    65e4:	000c8863          	beqz	s9,65f4 <core_bench_list+0x340>
                         crc |= 0x8000;
    65e8:	00e346b3          	xor	a3,t1,a4
    65ec:	03069493          	slli	s1,a3,0x30
    65f0:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    65f4:	006bceb3          	xor	t4,s7,t1
                    if (x16 == 1)
    65f8:	001efc93          	andi	s9,t4,1
    65fc:	00135313          	srli	t1,t1,0x1
    6600:	000c8863          	beqz	s9,6610 <core_bench_list+0x35c>
                         crc |= 0x8000;
    6604:	00e346b3          	xor	a3,t1,a4
    6608:	03069493          	slli	s1,a3,0x30
    660c:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6610:	006e4eb3          	xor	t4,t3,t1
                    if (x16 == 1)
    6614:	001efc93          	andi	s9,t4,1
    6618:	00135313          	srli	t1,t1,0x1
    661c:	000c8863          	beqz	s9,662c <core_bench_list+0x378>
                         crc |= 0x8000;
    6620:	00e346b3          	xor	a3,t1,a4
    6624:	03069493          	slli	s1,a3,0x30
    6628:	0304d313          	srli	t1,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    662c:	0060ceb3          	xor	t4,ra,t1
                    if (x16 == 1)
    6630:	001efc93          	andi	s9,t4,1
    6634:	00135313          	srli	t1,t1,0x1
    6638:	000c8863          	beqz	s9,6648 <core_bench_list+0x394>
                         crc |= 0x8000;
    663c:	00e346b3          	xor	a3,t1,a4
    6640:	03069493          	slli	s1,a3,0x30
    6644:	0304d313          	srli	t1,s1,0x30
                    if (x16 == 1)
    6648:	00137e93          	andi	t4,t1,1
    664c:	00135493          	srli	s1,t1,0x1
    6650:	005e8863          	beq	t4,t0,6660 <core_bench_list+0x3ac>
                         crc |= 0x8000;
    6654:	00e4ccb3          	xor	s9,s1,a4
    6658:	030c9693          	slli	a3,s9,0x30
    665c:	0306d493          	srli	s1,a3,0x30
        while (finder) {
    6660:	cbad                	beqz	a5,66d2 <core_bench_list+0x41e>
                finder=finder->next;
    6662:	639c                	ld	a5,0(a5)
    6664:	bd89                	j	64b6 <core_bench_list+0x202>
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    6666:	0087bc03          	ld	s8,8(a5)
                            list=list->next;
    666a:	639c                	ld	a5,0(a5)
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    666c:	000c4583          	lbu	a1,0(s8)
    6670:	01058b63          	beq	a1,a6,6686 <core_bench_list+0x3d2>
    6674:	dc078be3          	beqz	a5,644a <core_bench_list+0x196>
    6678:	0087bc03          	ld	s8,8(a5)
                            list=list->next;
    667c:	639c                	ld	a5,0(a5)
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    667e:	000c4583          	lbu	a1,0(s8)
    6682:	ff0599e3          	bne	a1,a6,6674 <core_bench_list+0x3c0>
        remover=core_list_undo_remove(remover,list->next);
    6686:	00043883          	ld	a7,0(s0)
            item_removed->next=item_modified->next;
    668a:	0008bd03          	ld	s10,0(a7)
    668e:	b3d9                	j	6454 <core_bench_list+0x1a0>
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    6690:	4c040463          	beqz	s0,6b58 <core_bench_list+0x8a4>
    6694:	000c869b          	sext.w	a3,s9
    6698:	87a2                	mv	a5,s0
    669a:	a021                	j	66a2 <core_bench_list+0x3ee>
                            list=list->next;
    669c:	639c                	ld	a5,0(a5)
                    while (list && ((list->info->data16 & 0xff) != info->data16))
    669e:	c60787e3          	beqz	a5,630c <core_bench_list+0x58>
    66a2:	6798                	ld	a4,8(a5)
    66a4:	00074083          	lbu	ra,0(a4)
    66a8:	fed09ae3          	bne	ra,a3,669c <core_bench_list+0x3e8>
    66ac:	b185                	j	630c <core_bench_list+0x58>
                            retval+=(list->next->info->data16 >> 8) & 1;
    66ae:	008b3383          	ld	t2,8(s6)
                            missed++;
    66b2:	2f05                	addiw	t5,t5,1
    66b4:	030f1493          	slli	s1,t5,0x30
                            retval+=(list->next->info->data16 >> 8) & 1;
    66b8:	00138903          	lb	s2,1(t2)
                            missed++;
    66bc:	0304df13          	srli	t5,s1,0x30
                            retval+=(list->next->info->data16 >> 8) & 1;
    66c0:	00197993          	andi	s3,s2,1
    66c4:	01d98a3b          	addw	s4,s3,t4
    66c8:	030a1a93          	slli	s5,s4,0x30
    66cc:	030ade93          	srli	t4,s5,0x30
    66d0:	b311                	j	63d4 <core_bench_list+0x120>
        item_removed->info=item_modified->info;
    66d2:	0088b783          	ld	a5,8(a7)
            tail = NULL;
    66d6:	4601                	li	a2,0
            list = NULL;
    66d8:	4e81                	li	t4,0
        item_removed->info=item_modified->info;
    66da:	e51c                	sd	a5,8(a0)
        item_modified->info=tmp;
    66dc:	0148b423          	sd	s4,8(a7)
            item_removed->next=item_modified->next;
    66e0:	01a53023          	sd	s10,0(a0)
        item_modified->next=item_removed;
    66e4:	00a8b023          	sd	a0,0(a7)
      insize = 1;
    66e8:	4985                	li	s3,1
            nmerges = 0; /* count number of merges we do in this pass */
    66ea:	4c81                	li	s9,0
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
    66ec:	4b85                	li	s7,1
                      nmerges++; /* there exists a merge to be done */
    66ee:	0079f893          	andi	a7,s3,7
    66f2:	2c85                	addiw	s9,s9,1
    66f4:	8c22                	mv	s8,s0
                      psize = 0;
    66f6:	4a81                	li	s5,0
    66f8:	06088963          	beqz	a7,676a <core_bench_list+0x4b6>
    66fc:	4d05                	li	s10,1
    66fe:	05a88f63          	beq	a7,s10,675c <core_bench_list+0x4a8>
    6702:	4509                	li	a0,2
    6704:	04a88763          	beq	a7,a0,6752 <core_bench_list+0x49e>
    6708:	4a0d                	li	s4,3
    670a:	03488f63          	beq	a7,s4,6748 <core_bench_list+0x494>
    670e:	4711                	li	a4,4
    6710:	02e88763          	beq	a7,a4,673e <core_bench_list+0x48a>
    6714:	4b15                	li	s6,5
    6716:	01688f63          	beq	a7,s6,6734 <core_bench_list+0x480>
    671a:	4d99                	li	s11,6
    671c:	01b88763          	beq	a7,s11,672a <core_bench_list+0x476>
                                  q = q->next;
    6720:	00043c03          	ld	s8,0(s0)
                            psize++;
    6724:	4a85                	li	s5,1
                            if (!q) break;
    6726:	040c0c63          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    672a:	000c3c03          	ld	s8,0(s8)
                            psize++;
    672e:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    6730:	040c0763          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    6734:	000c3c03          	ld	s8,0(s8)
                            psize++;
    6738:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    673a:	040c0263          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    673e:	000c3c03          	ld	s8,0(s8)
                            psize++;
    6742:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    6744:	020c0d63          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    6748:	000c3c03          	ld	s8,0(s8)
                            psize++;
    674c:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    674e:	020c0863          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    6752:	000c3c03          	ld	s8,0(s8)
                            psize++;
    6756:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    6758:	020c0363          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    675c:	000c3c03          	ld	s8,0(s8)
                            psize++;
    6760:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    6762:	000c0e63          	beqz	s8,677e <core_bench_list+0x4ca>
                      for (i = 0; i < insize; i++) {
    6766:	01598c63          	beq	s3,s5,677e <core_bench_list+0x4ca>
                                  q = q->next;
    676a:	000c3c03          	ld	s8,0(s8)
                            psize++;
    676e:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    6770:	000c0763          	beqz	s8,677e <core_bench_list+0x4ca>
                                  q = q->next;
    6774:	000c3c03          	ld	s8,0(s8)
                            psize++;
    6778:	2a85                	addiw	s5,s5,1
                            if (!q) break;
    677a:	fa0c18e3          	bnez	s8,672a <core_bench_list+0x476>
                                                      list = e;
    677e:	85ce                	mv	a1,s3
                          while (psize > 0 || (qsize > 0 && q)) {
    6780:	060a8563          	beqz	s5,67ea <core_bench_list+0x536>
                                                } else if (qsize == 0 || !q) {
    6784:	cdb5                	beqz	a1,6800 <core_bench_list+0x54c>
    6786:	060c0d63          	beqz	s8,6800 <core_bench_list+0x54c>
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
    678a:	641c                	ld	a5,8(s0)
    678c:	008c3d03          	ld	s10,8(s8)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
    6790:	00079b03          	lh	s6,0(a5)
        return a->idx - b->idx;
    6794:	002d1283          	lh	t0,2(s10)
    6798:	00279d83          	lh	s11,2(a5)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
    679c:	010b1f9b          	slliw	t6,s6,0x10
    67a0:	010fd51b          	srliw	a0,t6,0x10
    67a4:	f00b7e13          	andi	t3,s6,-256
    67a8:	0085531b          	srliw	t1,a0,0x8
    67ac:	006e68b3          	or	a7,t3,t1
    67b0:	01179023          	sh	a7,0(a5)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
    67b4:	000d1683          	lh	a3,0(s10)
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
    67b8:	405d80bb          	subw	ra,s11,t0
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
    67bc:	01069f1b          	slliw	t5,a3,0x10
    67c0:	010f5a1b          	srliw	s4,t5,0x10
    67c4:	f006f913          	andi	s2,a3,-256
    67c8:	008a539b          	srliw	t2,s4,0x8
    67cc:	00796833          	or	a6,s2,t2
    67d0:	010d1023          	sh	a6,0(s10)
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
    67d4:	02105663          	blez	ra,6800 <core_bench_list+0x54c>
                                                                  e = q; q = q->next; qsize--;
    67d8:	8762                	mv	a4,s8
    67da:	000c3c03          	ld	s8,0(s8)
    67de:	35fd                	addiw	a1,a1,-1
                                            if (tail) {
    67e0:	ce09                	beqz	a2,67fa <core_bench_list+0x546>
                                                  tail->next = e;
    67e2:	e218                	sd	a4,0(a2)
                                                      list = e;
    67e4:	863a                	mv	a2,a4
                          while (psize > 0 || (qsize > 0 && q)) {
    67e6:	f80a9fe3          	bnez	s5,6784 <core_bench_list+0x4d0>
    67ea:	cd99                	beqz	a1,6808 <core_bench_list+0x554>
    67ec:	020c0263          	beqz	s8,6810 <core_bench_list+0x55c>
                                                      e = q; q = q->next; qsize--;
    67f0:	8762                	mv	a4,s8
    67f2:	35fd                	addiw	a1,a1,-1
    67f4:	000c3c03          	ld	s8,0(s8)
                                            if (tail) {
    67f8:	f66d                	bnez	a2,67e2 <core_bench_list+0x52e>
                                                      list = e;
    67fa:	8eba                	mv	t4,a4
    67fc:	863a                	mv	a2,a4
    67fe:	b7e5                	j	67e6 <core_bench_list+0x532>
                                                              e = p; p = p->next; psize--;
    6800:	8722                	mv	a4,s0
    6802:	3afd                	addiw	s5,s5,-1
    6804:	6000                	ld	s0,0(s0)
    6806:	bfe9                	j	67e0 <core_bench_list+0x52c>
                while (p) {
    6808:	000c0463          	beqz	s8,6810 <core_bench_list+0x55c>
            nmerges = 0; /* count number of merges we do in this pass */
    680c:	8462                	mv	s0,s8
    680e:	b5c5                	j	66ee <core_bench_list+0x43a>
              tail->next = NULL;
    6810:	00063023          	sd	zero,0(a2)
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
    6814:	017c8f63          	beq	s9,s7,6832 <core_bench_list+0x57e>
                insize *= 2;
    6818:	0019999b          	slliw	s3,s3,0x1
                while (p) {
    681c:	000e8863          	beqz	t4,682c <core_bench_list+0x578>
    6820:	8c76                	mv	s8,t4
            tail = NULL;
    6822:	4601                	li	a2,0
            list = NULL;
    6824:	4e81                	li	t4,0
            nmerges = 0; /* count number of merges we do in this pass */
    6826:	4c81                	li	s9,0
    6828:	8462                	mv	s0,s8
    682a:	b5d1                	j	66ee <core_bench_list+0x43a>
              tail->next = NULL;
    682c:	00003023          	sd	zero,0(zero) # 0 <_start>
    6830:	9002                	ebreak
            finder=list->next;
    6832:	000eb703          	ld	a4,0(t4)
        while (finder) {
    6836:	20070b63          	beqz	a4,6a4c <core_bench_list+0x798>
                retval=crc16(list->info->data16,retval);
    683a:	008eb403          	ld	s0,8(t4)
                         crc |= 0x8000;
    683e:	7969                	lui	s2,0xffffa
    6840:	00190b93          	addi	s7,s2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
                retval=crc16(list->info->data16,retval);
    6844:	00041383          	lh	t2,0(s0)
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6848:	0083d813          	srli	a6,t2,0x8
        crc=crcu8( (ee_u8) (newval)               ,crc);
    684c:	0ff3f613          	andi	a2,t2,255
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6850:	0ff87093          	andi	ra,a6,255
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6854:	0183959b          	slliw	a1,t2,0x18
    6858:	01881f1b          	slliw	t5,a6,0x18
    685c:	4185dc9b          	sraiw	s9,a1,0x18
    6860:	00165793          	srli	a5,a2,0x1
    6864:	00265d13          	srli	s10,a2,0x2
    6868:	00365b13          	srli	s6,a2,0x3
    686c:	00465d93          	srli	s11,a2,0x4
    6870:	00565293          	srli	t0,a2,0x5
    6874:	00665f93          	srli	t6,a2,0x6
    6878:	00765c13          	srli	s8,a2,0x7
    687c:	418f551b          	sraiw	a0,t5,0x18
    6880:	0010da93          	srli	s5,ra,0x1
    6884:	0020de93          	srli	t4,ra,0x2
    6888:	0030de13          	srli	t3,ra,0x3
    688c:	0040d313          	srli	t1,ra,0x4
    6890:	0050d893          	srli	a7,ra,0x5
    6894:	0060d993          	srli	s3,ra,0x6
    6898:	0070d693          	srli	a3,ra,0x7
    689c:	009cca33          	xor	s4,s9,s1
                    if (x16 == 1)
    68a0:	001a7413          	andi	s0,s4,1
    68a4:	0014d393          	srli	t2,s1,0x1
    68a8:	c419                	beqz	s0,68b6 <core_bench_list+0x602>
                         crc |= 0x8000;
    68aa:	0173c4b3          	xor	s1,t2,s7
    68ae:	03049913          	slli	s2,s1,0x30
    68b2:	03095393          	srli	t2,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    68b6:	0077c833          	xor	a6,a5,t2
                    if (x16 == 1)
    68ba:	00187613          	andi	a2,a6,1
    68be:	0013df13          	srli	t5,t2,0x1
    68c2:	c619                	beqz	a2,68d0 <core_bench_list+0x61c>
                         crc |= 0x8000;
    68c4:	017f40b3          	xor	ra,t5,s7
    68c8:	03009593          	slli	a1,ra,0x30
    68cc:	0305df13          	srli	t5,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    68d0:	01ed4a33          	xor	s4,s10,t5
                    if (x16 == 1)
    68d4:	001a7413          	andi	s0,s4,1
    68d8:	001f5393          	srli	t2,t5,0x1
    68dc:	c419                	beqz	s0,68ea <core_bench_list+0x636>
                         crc |= 0x8000;
    68de:	0173c4b3          	xor	s1,t2,s7
    68e2:	03049913          	slli	s2,s1,0x30
    68e6:	03095393          	srli	t2,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    68ea:	007b4833          	xor	a6,s6,t2
                    if (x16 == 1)
    68ee:	00187613          	andi	a2,a6,1
    68f2:	0013df13          	srli	t5,t2,0x1
    68f6:	c619                	beqz	a2,6904 <core_bench_list+0x650>
                         crc |= 0x8000;
    68f8:	017f40b3          	xor	ra,t5,s7
    68fc:	03009593          	slli	a1,ra,0x30
    6900:	0305df13          	srli	t5,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6904:	01edca33          	xor	s4,s11,t5
                    if (x16 == 1)
    6908:	001a7413          	andi	s0,s4,1
    690c:	001f5393          	srli	t2,t5,0x1
    6910:	c419                	beqz	s0,691e <core_bench_list+0x66a>
                         crc |= 0x8000;
    6912:	0173c4b3          	xor	s1,t2,s7
    6916:	03049913          	slli	s2,s1,0x30
    691a:	03095393          	srli	t2,s2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    691e:	0072c833          	xor	a6,t0,t2
                    if (x16 == 1)
    6922:	00187613          	andi	a2,a6,1
    6926:	0013df13          	srli	t5,t2,0x1
    692a:	c619                	beqz	a2,6938 <core_bench_list+0x684>
                         crc |= 0x8000;
    692c:	017f40b3          	xor	ra,t5,s7
    6930:	03009593          	slli	a1,ra,0x30
    6934:	0305df13          	srli	t5,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6938:	01efca33          	xor	s4,t6,t5
                    if (x16 == 1)
    693c:	001a7413          	andi	s0,s4,1
    6940:	001f5393          	srli	t2,t5,0x1
    6944:	c419                	beqz	s0,6952 <core_bench_list+0x69e>
                         crc |= 0x8000;
    6946:	0173c4b3          	xor	s1,t2,s7
    694a:	03049913          	slli	s2,s1,0x30
    694e:	03095393          	srli	t2,s2,0x30
                    if (x16 == 1)
    6952:	0013f813          	andi	a6,t2,1
    6956:	0013d593          	srli	a1,t2,0x1
    695a:	01880863          	beq	a6,s8,696a <core_bench_list+0x6b6>
                         crc |= 0x8000;
    695e:	0175c633          	xor	a2,a1,s7
    6962:	03061093          	slli	ra,a2,0x30
    6966:	0300d593          	srli	a1,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    696a:	00b54f33          	xor	t5,a0,a1
                    if (x16 == 1)
    696e:	001f7a13          	andi	s4,t5,1
    6972:	0015d913          	srli	s2,a1,0x1
    6976:	000a0863          	beqz	s4,6986 <core_bench_list+0x6d2>
                         crc |= 0x8000;
    697a:	01794433          	xor	s0,s2,s7
    697e:	03041493          	slli	s1,s0,0x30
    6982:	0304d913          	srli	s2,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6986:	012ac3b3          	xor	t2,s5,s2
                    if (x16 == 1)
    698a:	0013f813          	andi	a6,t2,1
    698e:	00195593          	srli	a1,s2,0x1
    6992:	00080863          	beqz	a6,69a2 <core_bench_list+0x6ee>
                         crc |= 0x8000;
    6996:	0175c633          	xor	a2,a1,s7
    699a:	03061093          	slli	ra,a2,0x30
    699e:	0300d593          	srli	a1,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    69a2:	00becf33          	xor	t5,t4,a1
                    if (x16 == 1)
    69a6:	001f7a13          	andi	s4,t5,1
    69aa:	0015d913          	srli	s2,a1,0x1
    69ae:	000a0863          	beqz	s4,69be <core_bench_list+0x70a>
                         crc |= 0x8000;
    69b2:	01794433          	xor	s0,s2,s7
    69b6:	03041493          	slli	s1,s0,0x30
    69ba:	0304d913          	srli	s2,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    69be:	012e43b3          	xor	t2,t3,s2
                    if (x16 == 1)
    69c2:	0013f813          	andi	a6,t2,1
    69c6:	00195593          	srli	a1,s2,0x1
    69ca:	00080863          	beqz	a6,69da <core_bench_list+0x726>
                         crc |= 0x8000;
    69ce:	0175c633          	xor	a2,a1,s7
    69d2:	03061093          	slli	ra,a2,0x30
    69d6:	0300d593          	srli	a1,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    69da:	00b34f33          	xor	t5,t1,a1
                    if (x16 == 1)
    69de:	001f7a13          	andi	s4,t5,1
    69e2:	0015d913          	srli	s2,a1,0x1
    69e6:	000a0863          	beqz	s4,69f6 <core_bench_list+0x742>
                         crc |= 0x8000;
    69ea:	01794433          	xor	s0,s2,s7
    69ee:	03041493          	slli	s1,s0,0x30
    69f2:	0304d913          	srli	s2,s1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    69f6:	0128c3b3          	xor	t2,a7,s2
                    if (x16 == 1)
    69fa:	0013f813          	andi	a6,t2,1
    69fe:	00195593          	srli	a1,s2,0x1
    6a02:	00080863          	beqz	a6,6a12 <core_bench_list+0x75e>
                         crc |= 0x8000;
    6a06:	0175c633          	xor	a2,a1,s7
    6a0a:	03061093          	slli	ra,a2,0x30
    6a0e:	0300d593          	srli	a1,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6a12:	00b9cf33          	xor	t5,s3,a1
                    if (x16 == 1)
    6a16:	001f7a13          	andi	s4,t5,1
    6a1a:	0015d913          	srli	s2,a1,0x1
    6a1e:	000a0863          	beqz	s4,6a2e <core_bench_list+0x77a>
                         crc |= 0x8000;
    6a22:	01794433          	xor	s0,s2,s7
    6a26:	03041493          	slli	s1,s0,0x30
    6a2a:	0304d913          	srli	s2,s1,0x30
                    if (x16 == 1)
    6a2e:	00197393          	andi	t2,s2,1
    6a32:	00195493          	srli	s1,s2,0x1
    6a36:	00d38863          	beq	t2,a3,6a46 <core_bench_list+0x792>
                         crc |= 0x8000;
    6a3a:	0174c833          	xor	a6,s1,s7
    6a3e:	03081613          	slli	a2,a6,0x30
    6a42:	03065493          	srli	s1,a2,0x30
                finder=finder->next;
    6a46:	6318                	ld	a4,0(a4)
        while (finder) {
    6a48:	e4071ae3          	bnez	a4,689c <core_bench_list+0x5e8>
}
    6a4c:	70a6                	ld	ra,104(sp)
    6a4e:	7406                	ld	s0,96(sp)
    6a50:	6946                	ld	s2,80(sp)
    6a52:	69a6                	ld	s3,72(sp)
    6a54:	6a06                	ld	s4,64(sp)
    6a56:	7ae2                	ld	s5,56(sp)
    6a58:	7b42                	ld	s6,48(sp)
    6a5a:	7ba2                	ld	s7,40(sp)
    6a5c:	7c02                	ld	s8,32(sp)
    6a5e:	6ce2                	ld	s9,24(sp)
    6a60:	6d42                	ld	s10,16(sp)
    6a62:	6da2                	ld	s11,8(sp)
    6a64:	8526                	mv	a0,s1
    6a66:	64e6                	ld	s1,88(sp)
    6a68:	6165                	addi	sp,sp,112
    6a6a:	8082                	ret
      insize = 1;
    6a6c:	4b05                	li	s6,1
                while (p) {
    6a6e:	da040fe3          	beqz	s0,682c <core_bench_list+0x578>
            tail = NULL;
    6a72:	4901                	li	s2,0
            list = NULL;
    6a74:	4a81                	li	s5,0
            nmerges = 0; /* count number of merges we do in this pass */
    6a76:	4b81                	li	s7,0
                      nmerges++; /* there exists a merge to be done */
    6a78:	007b7e13          	andi	t3,s6,7
    6a7c:	2b85                	addiw	s7,s7,1
    6a7e:	8622                	mv	a2,s0
                      psize = 0;
    6a80:	4981                	li	s3,0
    6a82:	040e0b63          	beqz	t3,6ad8 <core_bench_list+0x824>
    6a86:	4705                	li	a4,1
    6a88:	04ee0363          	beq	t3,a4,6ace <core_bench_list+0x81a>
    6a8c:	4089                	li	ra,2
    6a8e:	021e0d63          	beq	t3,ra,6ac8 <core_bench_list+0x814>
    6a92:	468d                	li	a3,3
    6a94:	02de0763          	beq	t3,a3,6ac2 <core_bench_list+0x80e>
    6a98:	4291                	li	t0,4
    6a9a:	025e0163          	beq	t3,t0,6abc <core_bench_list+0x808>
    6a9e:	4315                	li	t1,5
    6aa0:	006e0b63          	beq	t3,t1,6ab6 <core_bench_list+0x802>
    6aa4:	4e99                	li	t4,6
    6aa6:	01de0563          	beq	t3,t4,6ab0 <core_bench_list+0x7fc>
                                  q = q->next;
    6aaa:	6010                	ld	a2,0(s0)
                            psize++;
    6aac:	4985                	li	s3,1
                            if (!q) break;
    6aae:	ca1d                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ab0:	6210                	ld	a2,0(a2)
                            psize++;
    6ab2:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6ab4:	ca05                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ab6:	6210                	ld	a2,0(a2)
                            psize++;
    6ab8:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6aba:	c60d                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6abc:	6210                	ld	a2,0(a2)
                            psize++;
    6abe:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6ac0:	c215                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ac2:	6210                	ld	a2,0(a2)
                            psize++;
    6ac4:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6ac6:	ce19                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ac8:	6210                	ld	a2,0(a2)
                            psize++;
    6aca:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6acc:	ce01                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ace:	6210                	ld	a2,0(a2)
                            psize++;
    6ad0:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6ad2:	ca09                	beqz	a2,6ae4 <core_bench_list+0x830>
                      for (i = 0; i < insize; i++) {
    6ad4:	01698863          	beq	s3,s6,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ad8:	6210                	ld	a2,0(a2)
                            psize++;
    6ada:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6adc:	c601                	beqz	a2,6ae4 <core_bench_list+0x830>
                                  q = q->next;
    6ade:	6210                	ld	a2,0(a2)
                            psize++;
    6ae0:	2985                	addiw	s3,s3,1
                            if (!q) break;
    6ae2:	f679                	bnez	a2,6ab0 <core_bench_list+0x7fc>
                                                      list = e;
    6ae4:	8d22                	mv	s10,s0
    6ae6:	8a5a                	mv	s4,s6
    6ae8:	8432                	mv	s0,a2
                          while (psize > 0 || (qsize > 0 && q)) {
    6aea:	02098763          	beqz	s3,6b18 <core_bench_list+0x864>
                                                } else if (qsize == 0 || !q) {
    6aee:	040a0063          	beqz	s4,6b2e <core_bench_list+0x87a>
    6af2:	cc15                	beqz	s0,6b2e <core_bench_list+0x87a>
                                                    } else if (cmp(p->info,q->info,res) <= 0) {
    6af4:	640c                	ld	a1,8(s0)
    6af6:	008d3503          	ld	a0,8(s10)
    6afa:	866e                	mv	a2,s11
    6afc:	cadfe0ef          	jal	ra,57a8 <cmp_complex>
    6b00:	02a05763          	blez	a0,6b2e <core_bench_list+0x87a>
                                                                  e = q; q = q->next; qsize--;
    6b04:	87a2                	mv	a5,s0
    6b06:	6000                	ld	s0,0(s0)
    6b08:	3a7d                	addiw	s4,s4,-1
                                            if (tail) {
    6b0a:	00090f63          	beqz	s2,6b28 <core_bench_list+0x874>
                                                  tail->next = e;
    6b0e:	00f93023          	sd	a5,0(s2)
                                                      list = e;
    6b12:	893e                	mv	s2,a5
                          while (psize > 0 || (qsize > 0 && q)) {
    6b14:	fc099de3          	bnez	s3,6aee <core_bench_list+0x83a>
    6b18:	020a0063          	beqz	s4,6b38 <core_bench_list+0x884>
    6b1c:	cc19                	beqz	s0,6b3a <core_bench_list+0x886>
                                                      e = q; q = q->next; qsize--;
    6b1e:	87a2                	mv	a5,s0
    6b20:	3a7d                	addiw	s4,s4,-1
    6b22:	6000                	ld	s0,0(s0)
                                            if (tail) {
    6b24:	fe0915e3          	bnez	s2,6b0e <core_bench_list+0x85a>
                                                      list = e;
    6b28:	8abe                	mv	s5,a5
    6b2a:	893e                	mv	s2,a5
    6b2c:	b7e5                	j	6b14 <core_bench_list+0x860>
                                                              e = p; p = p->next; psize--;
    6b2e:	87ea                	mv	a5,s10
    6b30:	39fd                	addiw	s3,s3,-1
    6b32:	000d3d03          	ld	s10,0(s10)
    6b36:	bfd1                	j	6b0a <core_bench_list+0x856>
                while (p) {
    6b38:	f021                	bnez	s0,6a78 <core_bench_list+0x7c4>
              tail->next = NULL;
    6b3a:	00093023          	sd	zero,0(s2)
                if (nmerges <= 1)  /* allow for nmerges==0, the empty list case */
    6b3e:	4405                	li	s0,1
    6b40:	008b8663          	beq	s7,s0,6b4c <core_bench_list+0x898>
                insize *= 2;
    6b44:	001b1b1b          	slliw	s6,s6,0x1
            p = list;
    6b48:	8456                	mv	s0,s5
    6b4a:	b715                	j	6a6e <core_bench_list+0x7ba>
    6b4c:	8456                	mv	s0,s5
    6b4e:	b86d                	j	6408 <core_bench_list+0x154>
    6b50:	4c81                	li	s9,0
        info.idx=finder_idx;
    6b52:	8c2e                	mv	s8,a1
            for (i=0; i<find_num; i++) {
    6b54:	4481                	li	s1,0
    6b56:	b07d                	j	6404 <core_bench_list+0x150>
                            retval+=(list->next->info->data16 >> 8) & 1;
    6b58:	00003783          	ld	a5,0(zero) # 0 <_start>
    6b5c:	9002                	ebreak

0000000000006b5e <iterate>:
void *iterate(void *pres) {
    6b5e:	7179                	addi	sp,sp,-48
    6b60:	ec26                	sd	s1,24(sp)
        ee_u32 iterations=res->iterations;
    6b62:	7904                	ld	s1,48(a0)
void *iterate(void *pres) {
    6b64:	f022                	sd	s0,32(sp)
    6b66:	e84a                	sd	s2,16(sp)
    6b68:	e44e                	sd	s3,8(sp)
    6b6a:	f406                	sd	ra,40(sp)
                         crc |= 0x8000;
    6b6c:	7969                	lui	s2,0xffffa
        res->crc=0;
    6b6e:	06053423          	sd	zero,104(a0)
void *iterate(void *pres) {
    6b72:	89aa                	mv	s3,a0
        for (i=0; i<iterations; i++) {
    6b74:	4401                	li	s0,0
                         crc |= 0x8000;
    6b76:	0905                	addi	s2,s2,1
        for (i=0; i<iterations; i++) {
    6b78:	40048a63          	beqz	s1,6f8c <iterate+0x42e>
                crc=core_bench_list(res,1);
    6b7c:	4585                	li	a1,1
    6b7e:	854e                	mv	a0,s3
    6b80:	f34ff0ef          	jal	ra,62b4 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    6b84:	0689d783          	lhu	a5,104(s3)
        crc=crcu8( (ee_u8) (newval)               ,crc);
    6b88:	0ff57693          	andi	a3,a0,255
                    data >>= 1;
    6b8c:	0016d613          	srli	a2,a3,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6b90:	00a7c733          	xor	a4,a5,a0
                    if (x16 == 1)
    6b94:	00177293          	andi	t0,a4,1
    6b98:	40029263          	bnez	t0,6f9c <iterate+0x43e>
                    crc >>= 1;
    6b9c:	0017d593          	srli	a1,a5,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ba0:	00c5c833          	xor	a6,a1,a2
                    if (x16 == 1)
    6ba4:	00187893          	andi	a7,a6,1
                    data >>= 1;
    6ba8:	0026de13          	srli	t3,a3,0x2
                    if (x16 == 1)
    6bac:	0015df93          	srli	t6,a1,0x1
    6bb0:	00088863          	beqz	a7,6bc0 <iterate+0x62>
                         crc |= 0x8000;
    6bb4:	012fceb3          	xor	t4,t6,s2
    6bb8:	030e9f13          	slli	t5,t4,0x30
    6bbc:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6bc0:	01cfc7b3          	xor	a5,t6,t3
                    if (x16 == 1)
    6bc4:	0017f713          	andi	a4,a5,1
                    data >>= 1;
    6bc8:	0036d293          	srli	t0,a3,0x3
                    if (x16 == 1)
    6bcc:	001fd313          	srli	t1,t6,0x1
    6bd0:	c719                	beqz	a4,6bde <iterate+0x80>
                         crc |= 0x8000;
    6bd2:	01234633          	xor	a2,t1,s2
    6bd6:	03061093          	slli	ra,a2,0x30
    6bda:	0300d313          	srli	t1,ra,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6bde:	005343b3          	xor	t2,t1,t0
                    if (x16 == 1)
    6be2:	0013f593          	andi	a1,t2,1
                    data >>= 1;
    6be6:	0046d813          	srli	a6,a3,0x4
                    if (x16 == 1)
    6bea:	00135e93          	srli	t4,t1,0x1
    6bee:	c599                	beqz	a1,6bfc <iterate+0x9e>
                         crc |= 0x8000;
    6bf0:	012ec8b3          	xor	a7,t4,s2
    6bf4:	03089e13          	slli	t3,a7,0x30
    6bf8:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6bfc:	010ecf33          	xor	t5,t4,a6
                    if (x16 == 1)
    6c00:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    6c04:	0056d713          	srli	a4,a3,0x5
                    if (x16 == 1)
    6c08:	001ed093          	srli	ra,t4,0x1
    6c0c:	000f8863          	beqz	t6,6c1c <iterate+0xbe>
                         crc |= 0x8000;
    6c10:	0120c7b3          	xor	a5,ra,s2
    6c14:	03079293          	slli	t0,a5,0x30
    6c18:	0302d093          	srli	ra,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6c1c:	00e0c633          	xor	a2,ra,a4
                    if (x16 == 1)
    6c20:	00167313          	andi	t1,a2,1
                    data >>= 1;
    6c24:	0066d393          	srli	t2,a3,0x6
                    if (x16 == 1)
    6c28:	0010d893          	srli	a7,ra,0x1
    6c2c:	00030863          	beqz	t1,6c3c <iterate+0xde>
                         crc |= 0x8000;
    6c30:	0128c5b3          	xor	a1,a7,s2
    6c34:	03059813          	slli	a6,a1,0x30
    6c38:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6c3c:	0078ce33          	xor	t3,a7,t2
                    if (x16 == 1)
    6c40:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    6c44:	829d                	srli	a3,a3,0x7
                    if (x16 == 1)
    6c46:	0018d793          	srli	a5,a7,0x1
    6c4a:	000e8863          	beqz	t4,6c5a <iterate+0xfc>
                         crc |= 0x8000;
    6c4e:	0127cf33          	xor	t5,a5,s2
    6c52:	030f1f93          	slli	t6,t5,0x30
    6c56:	030fd793          	srli	a5,t6,0x30
                    if (x16 == 1)
    6c5a:	0017f713          	andi	a4,a5,1
    6c5e:	0017d313          	srli	t1,a5,0x1
    6c62:	00d70863          	beq	a4,a3,6c72 <iterate+0x114>
                         crc |= 0x8000;
    6c66:	012342b3          	xor	t0,t1,s2
    6c6a:	03029093          	slli	ra,t0,0x30
    6c6e:	0300d313          	srli	t1,ra,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6c72:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6c76:	00a34633          	xor	a2,t1,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6c7a:	0ff57393          	andi	t2,a0,255
                    if (x16 == 1)
    6c7e:	00167593          	andi	a1,a2,1
                    data >>= 1;
    6c82:	0013d813          	srli	a6,t2,0x1
                    if (x16 == 1)
    6c86:	00135e93          	srli	t4,t1,0x1
    6c8a:	c599                	beqz	a1,6c98 <iterate+0x13a>
                         crc |= 0x8000;
    6c8c:	012ec8b3          	xor	a7,t4,s2
    6c90:	03089e13          	slli	t3,a7,0x30
    6c94:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6c98:	010ec6b3          	xor	a3,t4,a6
                    if (x16 == 1)
    6c9c:	0016ff13          	andi	t5,a3,1
                    data >>= 1;
    6ca0:	0023df93          	srli	t6,t2,0x2
                    if (x16 == 1)
    6ca4:	001ed293          	srli	t0,t4,0x1
    6ca8:	000f0863          	beqz	t5,6cb8 <iterate+0x15a>
                         crc |= 0x8000;
    6cac:	0122c7b3          	xor	a5,t0,s2
    6cb0:	03079713          	slli	a4,a5,0x30
    6cb4:	03075293          	srli	t0,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6cb8:	01f2c0b3          	xor	ra,t0,t6
                    if (x16 == 1)
    6cbc:	0010f313          	andi	t1,ra,1
                    data >>= 1;
    6cc0:	0033d513          	srli	a0,t2,0x3
                    if (x16 == 1)
    6cc4:	0012d813          	srli	a6,t0,0x1
    6cc8:	00030863          	beqz	t1,6cd8 <iterate+0x17a>
                         crc |= 0x8000;
    6ccc:	01284633          	xor	a2,a6,s2
    6cd0:	03061593          	slli	a1,a2,0x30
    6cd4:	0305d813          	srli	a6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6cd8:	00a848b3          	xor	a7,a6,a0
                    if (x16 == 1)
    6cdc:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    6ce0:	0043de93          	srli	t4,t2,0x4
                    if (x16 == 1)
    6ce4:	00185f93          	srli	t6,a6,0x1
    6ce8:	000e0863          	beqz	t3,6cf8 <iterate+0x19a>
                         crc |= 0x8000;
    6cec:	012fc6b3          	xor	a3,t6,s2
    6cf0:	03069f13          	slli	t5,a3,0x30
    6cf4:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6cf8:	01dfc7b3          	xor	a5,t6,t4
                    if (x16 == 1)
    6cfc:	0017f713          	andi	a4,a5,1
                    data >>= 1;
    6d00:	0053d293          	srli	t0,t2,0x5
                    if (x16 == 1)
    6d04:	001fd513          	srli	a0,t6,0x1
    6d08:	c719                	beqz	a4,6d16 <iterate+0x1b8>
                         crc |= 0x8000;
    6d0a:	012540b3          	xor	ra,a0,s2
    6d0e:	03009313          	slli	t1,ra,0x30
    6d12:	03035513          	srli	a0,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6d16:	00554633          	xor	a2,a0,t0
                    if (x16 == 1)
    6d1a:	00167593          	andi	a1,a2,1
                    data >>= 1;
    6d1e:	0063d813          	srli	a6,t2,0x6
                    if (x16 == 1)
    6d22:	00155e93          	srli	t4,a0,0x1
    6d26:	c599                	beqz	a1,6d34 <iterate+0x1d6>
                         crc |= 0x8000;
    6d28:	012ec8b3          	xor	a7,t4,s2
    6d2c:	03089e13          	slli	t3,a7,0x30
    6d30:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6d34:	010ec6b3          	xor	a3,t4,a6
                    if (x16 == 1)
    6d38:	0016ff13          	andi	t5,a3,1
                    data >>= 1;
    6d3c:	0073d393          	srli	t2,t2,0x7
                    if (x16 == 1)
    6d40:	001ed293          	srli	t0,t4,0x1
    6d44:	000f0863          	beqz	t5,6d54 <iterate+0x1f6>
                         crc |= 0x8000;
    6d48:	0122cfb3          	xor	t6,t0,s2
    6d4c:	030f9793          	slli	a5,t6,0x30
    6d50:	0307d293          	srli	t0,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6d54:	0072c733          	xor	a4,t0,t2
                    if (x16 == 1)
    6d58:	00177093          	andi	ra,a4,1
    6d5c:	0012d613          	srli	a2,t0,0x1
    6d60:	00008863          	beqz	ra,6d70 <iterate+0x212>
                         crc |= 0x8000;
    6d64:	01264333          	xor	t1,a2,s2
    6d68:	03031513          	slli	a0,t1,0x30
    6d6c:	03055613          	srli	a2,a0,0x30
                crc=core_bench_list(res,-1);
    6d70:	55fd                	li	a1,-1
                res->crc=crcu16(crc,res->crc);
    6d72:	06c99423          	sh	a2,104(s3)
                crc=core_bench_list(res,-1);
    6d76:	854e                	mv	a0,s3
    6d78:	d3cff0ef          	jal	ra,62b4 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    6d7c:	0689d583          	lhu	a1,104(s3)
        crc=crcu8( (ee_u8) (newval)               ,crc);
    6d80:	0ff57813          	andi	a6,a0,255
                    data >>= 1;
    6d84:	00185e93          	srli	t4,a6,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6d88:	00a5c8b3          	xor	a7,a1,a0
                    if (x16 == 1)
    6d8c:	0018fe13          	andi	t3,a7,1
                    crc >>= 1;
    6d90:	0015df93          	srli	t6,a1,0x1
                    if (x16 == 1)
    6d94:	000e0a63          	beqz	t3,6da8 <iterate+0x24a>
                         crc |= 0x8000;
    6d98:	0015d69b          	srliw	a3,a1,0x1
    6d9c:	00d94f33          	xor	t5,s2,a3
    6da0:	030f1393          	slli	t2,t5,0x30
    6da4:	0303df93          	srli	t6,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6da8:	01dfc7b3          	xor	a5,t6,t4
                    if (x16 == 1)
    6dac:	0017f293          	andi	t0,a5,1
                    data >>= 1;
    6db0:	00285713          	srli	a4,a6,0x2
                    if (x16 == 1)
    6db4:	001fd593          	srli	a1,t6,0x1
    6db8:	00028863          	beqz	t0,6dc8 <iterate+0x26a>
                         crc |= 0x8000;
    6dbc:	0125c0b3          	xor	ra,a1,s2
    6dc0:	03009313          	slli	t1,ra,0x30
    6dc4:	03035593          	srli	a1,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6dc8:	00e5c633          	xor	a2,a1,a4
                    if (x16 == 1)
    6dcc:	00167893          	andi	a7,a2,1
                    data >>= 1;
    6dd0:	00385e13          	srli	t3,a6,0x3
                    if (x16 == 1)
    6dd4:	0015df13          	srli	t5,a1,0x1
    6dd8:	00088863          	beqz	a7,6de8 <iterate+0x28a>
                         crc |= 0x8000;
    6ddc:	012f4eb3          	xor	t4,t5,s2
    6de0:	030e9693          	slli	a3,t4,0x30
    6de4:	0306df13          	srli	t5,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6de8:	01cf43b3          	xor	t2,t5,t3
                    if (x16 == 1)
    6dec:	0013ff93          	andi	t6,t2,1
                    data >>= 1;
    6df0:	00485293          	srli	t0,a6,0x4
                    if (x16 == 1)
    6df4:	001f5093          	srli	ra,t5,0x1
    6df8:	000f8863          	beqz	t6,6e08 <iterate+0x2aa>
                         crc |= 0x8000;
    6dfc:	0120c7b3          	xor	a5,ra,s2
    6e00:	03079713          	slli	a4,a5,0x30
    6e04:	03075093          	srli	ra,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e08:	0050c333          	xor	t1,ra,t0
                    if (x16 == 1)
    6e0c:	00137593          	andi	a1,t1,1
                    data >>= 1;
    6e10:	00585613          	srli	a2,a6,0x5
                    if (x16 == 1)
    6e14:	0010de93          	srli	t4,ra,0x1
    6e18:	c599                	beqz	a1,6e26 <iterate+0x2c8>
                         crc |= 0x8000;
    6e1a:	012ec8b3          	xor	a7,t4,s2
    6e1e:	03089e13          	slli	t3,a7,0x30
    6e22:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e26:	00cec6b3          	xor	a3,t4,a2
                    if (x16 == 1)
    6e2a:	0016ff13          	andi	t5,a3,1
                    data >>= 1;
    6e2e:	00685393          	srli	t2,a6,0x6
                    if (x16 == 1)
    6e32:	001ed793          	srli	a5,t4,0x1
    6e36:	000f0863          	beqz	t5,6e46 <iterate+0x2e8>
                         crc |= 0x8000;
    6e3a:	0127cfb3          	xor	t6,a5,s2
    6e3e:	030f9293          	slli	t0,t6,0x30
    6e42:	0302d793          	srli	a5,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e46:	0077c733          	xor	a4,a5,t2
                    if (x16 == 1)
    6e4a:	00177093          	andi	ra,a4,1
                    data >>= 1;
    6e4e:	00785813          	srli	a6,a6,0x7
                    if (x16 == 1)
    6e52:	0017d613          	srli	a2,a5,0x1
    6e56:	00008863          	beqz	ra,6e66 <iterate+0x308>
                         crc |= 0x8000;
    6e5a:	01264333          	xor	t1,a2,s2
    6e5e:	03031593          	slli	a1,t1,0x30
    6e62:	0305d613          	srli	a2,a1,0x30
                    if (x16 == 1)
    6e66:	00167893          	andi	a7,a2,1
    6e6a:	00165f13          	srli	t5,a2,0x1
    6e6e:	01088863          	beq	a7,a6,6e7e <iterate+0x320>
                         crc |= 0x8000;
    6e72:	012f4e33          	xor	t3,t5,s2
    6e76:	030e1e93          	slli	t4,t3,0x30
    6e7a:	030edf13          	srli	t5,t4,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6e7e:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6e82:	00af46b3          	xor	a3,t5,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    6e86:	0ff57393          	andi	t2,a0,255
                    if (x16 == 1)
    6e8a:	0016ff93          	andi	t6,a3,1
                    data >>= 1;
    6e8e:	0013d293          	srli	t0,t2,0x1
                    if (x16 == 1)
    6e92:	001f5093          	srli	ra,t5,0x1
    6e96:	000f8863          	beqz	t6,6ea6 <iterate+0x348>
                         crc |= 0x8000;
    6e9a:	0120c7b3          	xor	a5,ra,s2
    6e9e:	03079713          	slli	a4,a5,0x30
    6ea2:	03075093          	srli	ra,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ea6:	0050c833          	xor	a6,ra,t0
                    if (x16 == 1)
    6eaa:	00187313          	andi	t1,a6,1
                    data >>= 1;
    6eae:	0023d593          	srli	a1,t2,0x2
                    if (x16 == 1)
    6eb2:	0010de13          	srli	t3,ra,0x1
    6eb6:	00030863          	beqz	t1,6ec6 <iterate+0x368>
                         crc |= 0x8000;
    6eba:	012e4633          	xor	a2,t3,s2
    6ebe:	03061893          	slli	a7,a2,0x30
    6ec2:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ec6:	00be4eb3          	xor	t4,t3,a1
                    if (x16 == 1)
    6eca:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    6ece:	0033d513          	srli	a0,t2,0x3
                    if (x16 == 1)
    6ed2:	001e5293          	srli	t0,t3,0x1
    6ed6:	000f0863          	beqz	t5,6ee6 <iterate+0x388>
                         crc |= 0x8000;
    6eda:	0122c6b3          	xor	a3,t0,s2
    6ede:	03069f93          	slli	t6,a3,0x30
    6ee2:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6ee6:	00a2c7b3          	xor	a5,t0,a0
                    if (x16 == 1)
    6eea:	0017f713          	andi	a4,a5,1
                    data >>= 1;
    6eee:	0043d093          	srli	ra,t2,0x4
                    if (x16 == 1)
    6ef2:	0012d593          	srli	a1,t0,0x1
    6ef6:	c719                	beqz	a4,6f04 <iterate+0x3a6>
                         crc |= 0x8000;
    6ef8:	0125c833          	xor	a6,a1,s2
    6efc:	03081313          	slli	t1,a6,0x30
    6f00:	03035593          	srli	a1,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f04:	0015c633          	xor	a2,a1,ra
                    if (x16 == 1)
    6f08:	00167893          	andi	a7,a2,1
                    data >>= 1;
    6f0c:	0053de13          	srli	t3,t2,0x5
                    if (x16 == 1)
    6f10:	0015d513          	srli	a0,a1,0x1
    6f14:	00088863          	beqz	a7,6f24 <iterate+0x3c6>
                         crc |= 0x8000;
    6f18:	01254eb3          	xor	t4,a0,s2
    6f1c:	030e9f13          	slli	t5,t4,0x30
    6f20:	030f5513          	srli	a0,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f24:	01c546b3          	xor	a3,a0,t3
                    if (x16 == 1)
    6f28:	0016ff93          	andi	t6,a3,1
                    data >>= 1;
    6f2c:	0063d293          	srli	t0,t2,0x6
                    if (x16 == 1)
    6f30:	00155093          	srli	ra,a0,0x1
    6f34:	000f8863          	beqz	t6,6f44 <iterate+0x3e6>
                         crc |= 0x8000;
    6f38:	0120c7b3          	xor	a5,ra,s2
    6f3c:	03079713          	slli	a4,a5,0x30
    6f40:	03075093          	srli	ra,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f44:	0050c833          	xor	a6,ra,t0
                    if (x16 == 1)
    6f48:	00187313          	andi	t1,a6,1
                    data >>= 1;
    6f4c:	0073d393          	srli	t2,t2,0x7
                    if (x16 == 1)
    6f50:	0010d893          	srli	a7,ra,0x1
    6f54:	00030863          	beqz	t1,6f64 <iterate+0x406>
                         crc |= 0x8000;
    6f58:	0128c5b3          	xor	a1,a7,s2
    6f5c:	03059613          	slli	a2,a1,0x30
    6f60:	03065893          	srli	a7,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    6f64:	0078ce33          	xor	t3,a7,t2
                    if (x16 == 1)
    6f68:	001e7e93          	andi	t4,t3,1
    6f6c:	0018d693          	srli	a3,a7,0x1
    6f70:	000e8863          	beqz	t4,6f80 <iterate+0x422>
                         crc |= 0x8000;
    6f74:	0126cf33          	xor	t5,a3,s2
    6f78:	030f1513          	slli	a0,t5,0x30
    6f7c:	03055693          	srli	a3,a0,0x30
                res->crc=crcu16(crc,res->crc);
    6f80:	06d99423          	sh	a3,104(s3)
                if (i==0) res->crclist=res->crc;
    6f84:	c40d                	beqz	s0,6fae <iterate+0x450>
        for (i=0; i<iterations; i++) {
    6f86:	0405                	addi	s0,s0,1
    6f88:	be849ae3          	bne	s1,s0,6b7c <iterate+0x1e>
}
    6f8c:	70a2                	ld	ra,40(sp)
    6f8e:	7402                	ld	s0,32(sp)
    6f90:	64e2                	ld	s1,24(sp)
    6f92:	6942                	ld	s2,16(sp)
    6f94:	69a2                	ld	s3,8(sp)
    6f96:	4501                	li	a0,0
    6f98:	6145                	addi	sp,sp,48
    6f9a:	8082                	ret
                         crc |= 0x8000;
    6f9c:	0017d09b          	srliw	ra,a5,0x1
    6fa0:	00194333          	xor	t1,s2,ra
    6fa4:	03031393          	slli	t2,t1,0x30
    6fa8:	0303d593          	srli	a1,t2,0x30
    6fac:	bed5                	j	6ba0 <iterate+0x42>
                if (i==0) res->crclist=res->crc;
    6fae:	06d99523          	sh	a3,106(s3)
        for (i=0; i<iterations; i++) {
    6fb2:	4405                	li	s0,1
    6fb4:	fc848ce3          	beq	s1,s0,6f8c <iterate+0x42e>
    6fb8:	4405                	li	s0,1
    6fba:	b6c9                	j	6b7c <iterate+0x1e>

0000000000006fbc <get_seed_32>:
            switch (i) {
    6fbc:	4795                	li	a5,5
    6fbe:	04a7e963          	bltu	a5,a0,7010 <get_seed_32+0x54>
    6fc2:	62c1                	lui	t0,0x10
    6fc4:	050a                	slli	a0,a0,0x2
    6fc6:	0a028313          	addi	t1,t0,160 # 100a0 <mem_name+0x18>
    6fca:	006503b3          	add	t2,a0,t1
    6fce:	0003a583          	lw	a1,0(t2)
    6fd2:	8582                	jr	a1
                            retval=seed5_volatile;
    6fd4:	6645                	lui	a2,0x11
    6fd6:	e4062683          	lw	a3,-448(a2) # 10e40 <seed5_volatile>
    6fda:	0006851b          	sext.w	a0,a3
                        break;
    6fde:	8082                	ret
                            retval=seed1_volatile;
    6fe0:	6fc5                	lui	t6,0x11
    6fe2:	e48fa783          	lw	a5,-440(t6) # 10e48 <seed1_volatile>
    6fe6:	0007851b          	sext.w	a0,a5
                        break;
    6fea:	8082                	ret
                            retval=seed2_volatile;
    6fec:	6ec5                	lui	t4,0x11
    6fee:	e44eaf03          	lw	t5,-444(t4) # 10e44 <seed2_volatile>
    6ff2:	000f051b          	sext.w	a0,t5
                        break;
    6ff6:	8082                	ret
                            retval=seed3_volatile;
    6ff8:	68c1                	lui	a7,0x10
    6ffa:	1448ae03          	lw	t3,324(a7) # 10144 <seed3_volatile>
    6ffe:	000e051b          	sext.w	a0,t3
                        break;
    7002:	8082                	ret
                            retval=seed4_volatile;
    7004:	6741                	lui	a4,0x10
    7006:	14072803          	lw	a6,320(a4) # 10140 <seed4_volatile>
    700a:	0008051b          	sext.w	a0,a6
                        break;
    700e:	8082                	ret
    ee_s32 get_seed_32(int i) {
    7010:	4501                	li	a0,0
        }
    7012:	8082                	ret

0000000000007014 <crcu8>:
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7014:	00b546b3          	xor	a3,a0,a1
                    if (x16 == 1)
    7018:	0016f293          	andi	t0,a3,1
                    data >>= 1;
    701c:	00155713          	srli	a4,a0,0x1
                    if (x16 == 1)
    7020:	0015d613          	srli	a2,a1,0x1
    7024:	00028b63          	beqz	t0,703a <crcu8+0x26>
                         crc |= 0x8000;
    7028:	7369                	lui	t1,0xffffa
    702a:	00130393          	addi	t2,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    702e:	007647b3          	xor	a5,a2,t2
    7032:	03079593          	slli	a1,a5,0x30
    7036:	0305d613          	srli	a2,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    703a:	00e64833          	xor	a6,a2,a4
                    if (x16 == 1)
    703e:	00187893          	andi	a7,a6,1
                    data >>= 1;
    7042:	00255e13          	srli	t3,a0,0x2
                    if (x16 == 1)
    7046:	00165293          	srli	t0,a2,0x1
    704a:	00088b63          	beqz	a7,7060 <crcu8+0x4c>
                         crc |= 0x8000;
    704e:	7ee9                	lui	t4,0xffffa
    7050:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7054:	01e2cfb3          	xor	t6,t0,t5
    7058:	030f9693          	slli	a3,t6,0x30
    705c:	0306d293          	srli	t0,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7060:	01c2c733          	xor	a4,t0,t3
                    if (x16 == 1)
    7064:	00177313          	andi	t1,a4,1
                    data >>= 1;
    7068:	00355393          	srli	t2,a0,0x3
                    if (x16 == 1)
    706c:	0012d893          	srli	a7,t0,0x1
    7070:	00030b63          	beqz	t1,7086 <crcu8+0x72>
                         crc |= 0x8000;
    7074:	75e9                	lui	a1,0xffffa
    7076:	00158613          	addi	a2,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    707a:	00c8c7b3          	xor	a5,a7,a2
    707e:	03079813          	slli	a6,a5,0x30
    7082:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7086:	0078ce33          	xor	t3,a7,t2
                    if (x16 == 1)
    708a:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    708e:	00455f13          	srli	t5,a0,0x4
                    if (x16 == 1)
    7092:	0018d313          	srli	t1,a7,0x1
    7096:	000e8b63          	beqz	t4,70ac <crcu8+0x98>
                         crc |= 0x8000;
    709a:	7fe9                	lui	t6,0xffffa
    709c:	001f8693          	addi	a3,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    70a0:	00d342b3          	xor	t0,t1,a3
    70a4:	03029713          	slli	a4,t0,0x30
    70a8:	03075313          	srli	t1,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    70ac:	01e343b3          	xor	t2,t1,t5
                    if (x16 == 1)
    70b0:	0013f593          	andi	a1,t2,1
                    data >>= 1;
    70b4:	00555613          	srli	a2,a0,0x5
                    if (x16 == 1)
    70b8:	00135e93          	srli	t4,t1,0x1
    70bc:	c991                	beqz	a1,70d0 <crcu8+0xbc>
                         crc |= 0x8000;
    70be:	7869                	lui	a6,0xffffa
    70c0:	00180893          	addi	a7,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    70c4:	011ec7b3          	xor	a5,t4,a7
    70c8:	03079e13          	slli	t3,a5,0x30
    70cc:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    70d0:	00cecf33          	xor	t5,t4,a2
                    if (x16 == 1)
    70d4:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    70d8:	00655693          	srli	a3,a0,0x6
                    if (x16 == 1)
    70dc:	001ed593          	srli	a1,t4,0x1
    70e0:	000f8b63          	beqz	t6,70f6 <crcu8+0xe2>
                         crc |= 0x8000;
    70e4:	72e9                	lui	t0,0xffffa
    70e6:	00128713          	addi	a4,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    70ea:	00e5c333          	xor	t1,a1,a4
    70ee:	03031393          	slli	t2,t1,0x30
    70f2:	0303d593          	srli	a1,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    70f6:	00d5c633          	xor	a2,a1,a3
                    if (x16 == 1)
    70fa:	00167813          	andi	a6,a2,1
                    data >>= 1;
    70fe:	00755893          	srli	a7,a0,0x7
                    if (x16 == 1)
    7102:	0015df13          	srli	t5,a1,0x1
    7106:	00080b63          	beqz	a6,711c <crcu8+0x108>
                         crc |= 0x8000;
    710a:	77e9                	lui	a5,0xffffa
    710c:	00178e13          	addi	t3,a5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7110:	01cf4533          	xor	a0,t5,t3
    7114:	03051e93          	slli	t4,a0,0x30
    7118:	030edf13          	srli	t5,t4,0x30
                    if (x16 == 1)
    711c:	001f7f93          	andi	t6,t5,1
    7120:	001f5513          	srli	a0,t5,0x1
    7124:	011f8b63          	beq	t6,a7,713a <crcu8+0x126>
                         crc |= 0x8000;
    7128:	76e9                	lui	a3,0xffffa
    712a:	00168293          	addi	t0,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    712e:	00554733          	xor	a4,a0,t0
    7132:	03071313          	slli	t1,a4,0x30
    7136:	03035513          	srli	a0,t1,0x30
}
    713a:	8082                	ret

000000000000713c <crcu16>:
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    713c:	00a5c6b3          	xor	a3,a1,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    7140:	0ff57713          	andi	a4,a0,255
                    if (x16 == 1)
    7144:	0016f293          	andi	t0,a3,1
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    7148:	87aa                	mv	a5,a0
                    data >>= 1;
    714a:	00175613          	srli	a2,a4,0x1
                    crc >>= 1;
    714e:	0015d813          	srli	a6,a1,0x1
                    if (x16 == 1)
    7152:	00028b63          	beqz	t0,7168 <crcu16+0x2c>
                         crc |= 0x8000;
    7156:	7369                	lui	t1,0xffffa
    7158:	00130393          	addi	t2,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    715c:	00784533          	xor	a0,a6,t2
    7160:	03051593          	slli	a1,a0,0x30
    7164:	0305d813          	srli	a6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7168:	00c848b3          	xor	a7,a6,a2
                    if (x16 == 1)
    716c:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    7170:	00275e93          	srli	t4,a4,0x2
                    crc >>= 1;
    7174:	00185313          	srli	t1,a6,0x1
                    if (x16 == 1)
    7178:	000e0b63          	beqz	t3,718e <crcu16+0x52>
                         crc |= 0x8000;
    717c:	7f69                	lui	t5,0xffffa
    717e:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7182:	01f346b3          	xor	a3,t1,t6
    7186:	03069293          	slli	t0,a3,0x30
    718a:	0302d313          	srli	t1,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    718e:	01d34633          	xor	a2,t1,t4
                    if (x16 == 1)
    7192:	00167393          	andi	t2,a2,1
                    data >>= 1;
    7196:	00375593          	srli	a1,a4,0x3
                    crc >>= 1;
    719a:	00135e93          	srli	t4,t1,0x1
                    if (x16 == 1)
    719e:	00038b63          	beqz	t2,71b4 <crcu16+0x78>
                         crc |= 0x8000;
    71a2:	7869                	lui	a6,0xffffa
    71a4:	00180893          	addi	a7,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    71a8:	011ec533          	xor	a0,t4,a7
    71ac:	03051e13          	slli	t3,a0,0x30
    71b0:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    71b4:	00becf33          	xor	t5,t4,a1
                    if (x16 == 1)
    71b8:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    71bc:	00475693          	srli	a3,a4,0x4
                    crc >>= 1;
    71c0:	001ed593          	srli	a1,t4,0x1
                    if (x16 == 1)
    71c4:	000f8b63          	beqz	t6,71da <crcu16+0x9e>
                         crc |= 0x8000;
    71c8:	72e9                	lui	t0,0xffffa
    71ca:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    71ce:	0065c633          	xor	a2,a1,t1
    71d2:	03061393          	slli	t2,a2,0x30
    71d6:	0303d593          	srli	a1,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    71da:	00d5c833          	xor	a6,a1,a3
                    if (x16 == 1)
    71de:	00187893          	andi	a7,a6,1
                    data >>= 1;
    71e2:	00575e13          	srli	t3,a4,0x5
                    crc >>= 1;
    71e6:	0015d293          	srli	t0,a1,0x1
                    if (x16 == 1)
    71ea:	00088b63          	beqz	a7,7200 <crcu16+0xc4>
                         crc |= 0x8000;
    71ee:	7ee9                	lui	t4,0xffffa
    71f0:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    71f4:	01e2c533          	xor	a0,t0,t5
    71f8:	03051f93          	slli	t6,a0,0x30
    71fc:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7200:	01c2c6b3          	xor	a3,t0,t3
                    if (x16 == 1)
    7204:	0016f313          	andi	t1,a3,1
                    data >>= 1;
    7208:	00675393          	srli	t2,a4,0x6
                    crc >>= 1;
    720c:	0012de13          	srli	t3,t0,0x1
                    if (x16 == 1)
    7210:	00030b63          	beqz	t1,7226 <crcu16+0xea>
                         crc |= 0x8000;
    7214:	7669                	lui	a2,0xffffa
    7216:	00160593          	addi	a1,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    721a:	00be4833          	xor	a6,t3,a1
    721e:	03081893          	slli	a7,a6,0x30
    7222:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7226:	007e4eb3          	xor	t4,t3,t2
                    if (x16 == 1)
    722a:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    722e:	831d                	srli	a4,a4,0x7
                    crc >>= 1;
    7230:	001e5313          	srli	t1,t3,0x1
                    if (x16 == 1)
    7234:	000f0b63          	beqz	t5,724a <crcu16+0x10e>
                         crc |= 0x8000;
    7238:	7fe9                	lui	t6,0xffffa
    723a:	001f8293          	addi	t0,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    723e:	00534533          	xor	a0,t1,t0
    7242:	03051693          	slli	a3,a0,0x30
    7246:	0306d313          	srli	t1,a3,0x30
                    if (x16 == 1)
    724a:	00137393          	andi	t2,t1,1
                    crc >>= 1;
    724e:	00135e13          	srli	t3,t1,0x1
                    if (x16 == 1)
    7252:	00e38b63          	beq	t2,a4,7268 <crcu16+0x12c>
                         crc |= 0x8000;
    7256:	7669                	lui	a2,0xffffa
    7258:	00160593          	addi	a1,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    725c:	00be4833          	xor	a6,t3,a1
    7260:	03081893          	slli	a7,a6,0x30
    7264:	0308de13          	srli	t3,a7,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    7268:	0087de93          	srli	t4,a5,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    726c:	01cecf33          	xor	t5,t4,t3
                    if (x16 == 1)
    7270:	001f7f93          	andi	t6,t5,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    7274:	0087d293          	srli	t0,a5,0x8
                    data >>= 1;
    7278:	0097d713          	srli	a4,a5,0x9
                    if (x16 == 1)
    727c:	001e5393          	srli	t2,t3,0x1
    7280:	000f8b63          	beqz	t6,7296 <crcu16+0x15a>
                         crc |= 0x8000;
    7284:	77e9                	lui	a5,0xffffa
    7286:	00178693          	addi	a3,a5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    728a:	00d3c533          	xor	a0,t2,a3
    728e:	03051313          	slli	t1,a0,0x30
    7292:	03035393          	srli	t2,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7296:	00774633          	xor	a2,a4,t2
                    if (x16 == 1)
    729a:	00167593          	andi	a1,a2,1
                    data >>= 1;
    729e:	0022d813          	srli	a6,t0,0x2
                    if (x16 == 1)
    72a2:	0013df93          	srli	t6,t2,0x1
    72a6:	c991                	beqz	a1,72ba <crcu16+0x17e>
                         crc |= 0x8000;
    72a8:	78e9                	lui	a7,0xffffa
    72aa:	00188e13          	addi	t3,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    72ae:	01cfceb3          	xor	t4,t6,t3
    72b2:	030e9f13          	slli	t5,t4,0x30
    72b6:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    72ba:	010fc733          	xor	a4,t6,a6
                    if (x16 == 1)
    72be:	00177693          	andi	a3,a4,1
                    data >>= 1;
    72c2:	0032d793          	srli	a5,t0,0x3
                    if (x16 == 1)
    72c6:	001fd593          	srli	a1,t6,0x1
    72ca:	ca91                	beqz	a3,72de <crcu16+0x1a2>
                         crc |= 0x8000;
    72cc:	7369                	lui	t1,0xffffa
    72ce:	00130393          	addi	t2,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    72d2:	0075c533          	xor	a0,a1,t2
    72d6:	03051613          	slli	a2,a0,0x30
    72da:	03065593          	srli	a1,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    72de:	00f5c833          	xor	a6,a1,a5
                    if (x16 == 1)
    72e2:	00187893          	andi	a7,a6,1
                    data >>= 1;
    72e6:	0042de13          	srli	t3,t0,0x4
                    if (x16 == 1)
    72ea:	0015d693          	srli	a3,a1,0x1
    72ee:	00088b63          	beqz	a7,7304 <crcu16+0x1c8>
                         crc |= 0x8000;
    72f2:	7ee9                	lui	t4,0xffffa
    72f4:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    72f8:	01e6cfb3          	xor	t6,a3,t5
    72fc:	030f9713          	slli	a4,t6,0x30
    7300:	03075693          	srli	a3,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7304:	01c6c7b3          	xor	a5,a3,t3
                    if (x16 == 1)
    7308:	0017f313          	andi	t1,a5,1
                    data >>= 1;
    730c:	0052d393          	srli	t2,t0,0x5
                    if (x16 == 1)
    7310:	0016d893          	srli	a7,a3,0x1
    7314:	00030b63          	beqz	t1,732a <crcu16+0x1ee>
                         crc |= 0x8000;
    7318:	7669                	lui	a2,0xffffa
    731a:	00160593          	addi	a1,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    731e:	00b8c533          	xor	a0,a7,a1
    7322:	03051813          	slli	a6,a0,0x30
    7326:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    732a:	0078ce33          	xor	t3,a7,t2
                    if (x16 == 1)
    732e:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    7332:	0062df13          	srli	t5,t0,0x6
                    if (x16 == 1)
    7336:	0018d313          	srli	t1,a7,0x1
    733a:	000e8b63          	beqz	t4,7350 <crcu16+0x214>
                         crc |= 0x8000;
    733e:	7fe9                	lui	t6,0xffffa
    7340:	001f8713          	addi	a4,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7344:	00e346b3          	xor	a3,t1,a4
    7348:	03069793          	slli	a5,a3,0x30
    734c:	0307d313          	srli	t1,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7350:	01e343b3          	xor	t2,t1,t5
                    if (x16 == 1)
    7354:	0013f613          	andi	a2,t2,1
                    data >>= 1;
    7358:	0072d293          	srli	t0,t0,0x7
                    if (x16 == 1)
    735c:	00135e13          	srli	t3,t1,0x1
    7360:	ca11                	beqz	a2,7374 <crcu16+0x238>
                         crc |= 0x8000;
    7362:	75e9                	lui	a1,0xffffa
    7364:	00158813          	addi	a6,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7368:	010e4533          	xor	a0,t3,a6
    736c:	03051893          	slli	a7,a0,0x30
    7370:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7374:	01c2ceb3          	xor	t4,t0,t3
                    if (x16 == 1)
    7378:	001eff13          	andi	t5,t4,1
    737c:	001e5513          	srli	a0,t3,0x1
    7380:	000f0b63          	beqz	t5,7396 <crcu16+0x25a>
                         crc |= 0x8000;
    7384:	7fe9                	lui	t6,0xffffa
    7386:	001f8713          	addi	a4,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    738a:	00e546b3          	xor	a3,a0,a4
    738e:	03069793          	slli	a5,a3,0x30
    7392:	0307d513          	srli	a0,a5,0x30
}
    7396:	8082                	ret

0000000000007398 <crcu32>:
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7398:	00a5c833          	xor	a6,a1,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    739c:	0ff57713          	andi	a4,a0,255
        return crcu16((ee_u16)newval, crc);
    73a0:	03051693          	slli	a3,a0,0x30
                    if (x16 == 1)
    73a4:	00187293          	andi	t0,a6,1
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    73a8:	87aa                	mv	a5,a0
        return crcu16((ee_u16)newval, crc);
    73aa:	0306d313          	srli	t1,a3,0x30
                    data >>= 1;
    73ae:	00175613          	srli	a2,a4,0x1
                    crc >>= 1;
    73b2:	0015de13          	srli	t3,a1,0x1
                    if (x16 == 1)
    73b6:	00028b63          	beqz	t0,73cc <crcu32+0x34>
                         crc |= 0x8000;
    73ba:	75e9                	lui	a1,0xffffa
    73bc:	00158393          	addi	t2,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    73c0:	007e4533          	xor	a0,t3,t2
    73c4:	03051893          	slli	a7,a0,0x30
    73c8:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    73cc:	00ce4eb3          	xor	t4,t3,a2
                    if (x16 == 1)
    73d0:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    73d4:	00275f93          	srli	t6,a4,0x2
                    crc >>= 1;
    73d8:	001e5393          	srli	t2,t3,0x1
                    if (x16 == 1)
    73dc:	000f0b63          	beqz	t5,73f2 <crcu32+0x5a>
                         crc |= 0x8000;
    73e0:	7869                	lui	a6,0xffffa
    73e2:	00180293          	addi	t0,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    73e6:	0053c6b3          	xor	a3,t2,t0
    73ea:	03069613          	slli	a2,a3,0x30
    73ee:	03065393          	srli	t2,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    73f2:	01f3c5b3          	xor	a1,t2,t6
                    if (x16 == 1)
    73f6:	0015f893          	andi	a7,a1,1
                    data >>= 1;
    73fa:	00375e13          	srli	t3,a4,0x3
                    crc >>= 1;
    73fe:	0013d813          	srli	a6,t2,0x1
                    if (x16 == 1)
    7402:	00088b63          	beqz	a7,7418 <crcu32+0x80>
                         crc |= 0x8000;
    7406:	7ee9                	lui	t4,0xffffa
    7408:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    740c:	01e84533          	xor	a0,a6,t5
    7410:	03051f93          	slli	t6,a0,0x30
    7414:	030fd813          	srli	a6,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7418:	01c842b3          	xor	t0,a6,t3
                    if (x16 == 1)
    741c:	0012f693          	andi	a3,t0,1
                    data >>= 1;
    7420:	00475613          	srli	a2,a4,0x4
                    crc >>= 1;
    7424:	00185e93          	srli	t4,a6,0x1
                    if (x16 == 1)
    7428:	ca91                	beqz	a3,743c <crcu32+0xa4>
                         crc |= 0x8000;
    742a:	73e9                	lui	t2,0xffffa
    742c:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7430:	00bec8b3          	xor	a7,t4,a1
    7434:	03089e13          	slli	t3,a7,0x30
    7438:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    743c:	00cecf33          	xor	t5,t4,a2
                    if (x16 == 1)
    7440:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    7444:	00575813          	srli	a6,a4,0x5
                    crc >>= 1;
    7448:	001ed393          	srli	t2,t4,0x1
                    if (x16 == 1)
    744c:	000f8b63          	beqz	t6,7462 <crcu32+0xca>
                         crc |= 0x8000;
    7450:	72e9                	lui	t0,0xffffa
    7452:	00128693          	addi	a3,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7456:	00d3c533          	xor	a0,t2,a3
    745a:	03051613          	slli	a2,a0,0x30
    745e:	03065393          	srli	t2,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7462:	0103c5b3          	xor	a1,t2,a6
                    if (x16 == 1)
    7466:	0015f893          	andi	a7,a1,1
                    data >>= 1;
    746a:	00675e13          	srli	t3,a4,0x6
                    crc >>= 1;
    746e:	0013d293          	srli	t0,t2,0x1
                    if (x16 == 1)
    7472:	00088b63          	beqz	a7,7488 <crcu32+0xf0>
                         crc |= 0x8000;
    7476:	7ee9                	lui	t4,0xffffa
    7478:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    747c:	01e2cfb3          	xor	t6,t0,t5
    7480:	030f9813          	slli	a6,t6,0x30
    7484:	03085293          	srli	t0,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7488:	01c2c6b3          	xor	a3,t0,t3
                    if (x16 == 1)
    748c:	0016f613          	andi	a2,a3,1
                    data >>= 1;
    7490:	831d                	srli	a4,a4,0x7
                    crc >>= 1;
    7492:	0012de13          	srli	t3,t0,0x1
                    if (x16 == 1)
    7496:	ca11                	beqz	a2,74aa <crcu32+0x112>
                         crc |= 0x8000;
    7498:	73e9                	lui	t2,0xffffa
    749a:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    749e:	00be4533          	xor	a0,t3,a1
    74a2:	03051893          	slli	a7,a0,0x30
    74a6:	0308de13          	srli	t3,a7,0x30
                    if (x16 == 1)
    74aa:	001e7e93          	andi	t4,t3,1
                    crc >>= 1;
    74ae:	001e5393          	srli	t2,t3,0x1
                    if (x16 == 1)
    74b2:	38ee9a63          	bne	t4,a4,7846 <crcu32+0x4ae>
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    74b6:	00835693          	srli	a3,t1,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    74ba:	00d3c633          	xor	a2,t2,a3
                    if (x16 == 1)
    74be:	00167593          	andi	a1,a2,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    74c2:	00835713          	srli	a4,t1,0x8
                    data >>= 1;
    74c6:	0013df13          	srli	t5,t2,0x1
    74ca:	00935313          	srli	t1,t1,0x9
                    if (x16 == 1)
    74ce:	c991                	beqz	a1,74e2 <crcu32+0x14a>
                         crc |= 0x8000;
    74d0:	78e9                	lui	a7,0xffffa
    74d2:	00188e13          	addi	t3,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    74d6:	01cf4533          	xor	a0,t5,t3
    74da:	03051e93          	slli	t4,a0,0x30
    74de:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    74e2:	006f4fb3          	xor	t6,t5,t1
                    if (x16 == 1)
    74e6:	001ff813          	andi	a6,t6,1
                    data >>= 1;
    74ea:	00275293          	srli	t0,a4,0x2
                    if (x16 == 1)
    74ee:	001f5313          	srli	t1,t5,0x1
    74f2:	00080b63          	beqz	a6,7508 <crcu32+0x170>
                         crc |= 0x8000;
    74f6:	73e9                	lui	t2,0xffffa
    74f8:	00138693          	addi	a3,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    74fc:	00d34633          	xor	a2,t1,a3
    7500:	03061593          	slli	a1,a2,0x30
    7504:	0305d313          	srli	t1,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7508:	005348b3          	xor	a7,t1,t0
                    if (x16 == 1)
    750c:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    7510:	00375e93          	srli	t4,a4,0x3
                    if (x16 == 1)
    7514:	00135293          	srli	t0,t1,0x1
    7518:	000e0b63          	beqz	t3,752e <crcu32+0x196>
                         crc |= 0x8000;
    751c:	7f69                	lui	t5,0xffffa
    751e:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7522:	01f2c533          	xor	a0,t0,t6
    7526:	03051813          	slli	a6,a0,0x30
    752a:	03085293          	srli	t0,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    752e:	01d2c3b3          	xor	t2,t0,t4
                    if (x16 == 1)
    7532:	0013f613          	andi	a2,t2,1
                    data >>= 1;
    7536:	00475693          	srli	a3,a4,0x4
                    if (x16 == 1)
    753a:	0012de93          	srli	t4,t0,0x1
    753e:	ca11                	beqz	a2,7552 <crcu32+0x1ba>
                         crc |= 0x8000;
    7540:	75e9                	lui	a1,0xffffa
    7542:	00158313          	addi	t1,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7546:	006ec8b3          	xor	a7,t4,t1
    754a:	03089e13          	slli	t3,a7,0x30
    754e:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7552:	00decf33          	xor	t5,t4,a3
                    if (x16 == 1)
    7556:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    755a:	00575813          	srli	a6,a4,0x5
                    if (x16 == 1)
    755e:	001ed593          	srli	a1,t4,0x1
    7562:	000f8b63          	beqz	t6,7578 <crcu32+0x1e0>
                         crc |= 0x8000;
    7566:	72e9                	lui	t0,0xffffa
    7568:	00128393          	addi	t2,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    756c:	0075c533          	xor	a0,a1,t2
    7570:	03051613          	slli	a2,a0,0x30
    7574:	03065593          	srli	a1,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7578:	0105c6b3          	xor	a3,a1,a6
                    if (x16 == 1)
    757c:	0016f313          	andi	t1,a3,1
                    data >>= 1;
    7580:	00675893          	srli	a7,a4,0x6
                    if (x16 == 1)
    7584:	0015d813          	srli	a6,a1,0x1
    7588:	00030b63          	beqz	t1,759e <crcu32+0x206>
                         crc |= 0x8000;
    758c:	7e69                	lui	t3,0xffffa
    758e:	001e0e93          	addi	t4,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7592:	01d84f33          	xor	t5,a6,t4
    7596:	030f1f93          	slli	t6,t5,0x30
    759a:	030fd813          	srli	a6,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    759e:	011842b3          	xor	t0,a6,a7
                    if (x16 == 1)
    75a2:	0012f393          	andi	t2,t0,1
                    data >>= 1;
    75a6:	831d                	srli	a4,a4,0x7
                    if (x16 == 1)
    75a8:	00185313          	srli	t1,a6,0x1
    75ac:	00038b63          	beqz	t2,75c2 <crcu32+0x22a>
                         crc |= 0x8000;
    75b0:	7669                	lui	a2,0xffffa
    75b2:	00160593          	addi	a1,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    75b6:	00b34533          	xor	a0,t1,a1
    75ba:	03051693          	slli	a3,a0,0x30
    75be:	0306d313          	srli	t1,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    75c2:	006748b3          	xor	a7,a4,t1
                    if (x16 == 1)
    75c6:	0018fe13          	andi	t3,a7,1
    75ca:	00135293          	srli	t0,t1,0x1
    75ce:	260e1263          	bnez	t3,7832 <crcu32+0x49a>
        crc=crc16((ee_s16) (newval>>16) ,crc);
    75d2:	0107d393          	srli	t2,a5,0x10
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    75d6:	0072c633          	xor	a2,t0,t2
        crc=crcu8( (ee_u8) (newval)               ,crc);
    75da:	0ff3f713          	andi	a4,t2,255
                    if (x16 == 1)
    75de:	00167593          	andi	a1,a2,1
        return crcu16((ee_u16)newval, crc);
    75e2:	0107d79b          	srliw	a5,a5,0x10
                    data >>= 1;
    75e6:	00175313          	srli	t1,a4,0x1
                    if (x16 == 1)
    75ea:	0012de93          	srli	t4,t0,0x1
    75ee:	c991                	beqz	a1,7602 <crcu32+0x26a>
                         crc |= 0x8000;
    75f0:	76e9                	lui	a3,0xffffa
    75f2:	00168893          	addi	a7,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    75f6:	011ec533          	xor	a0,t4,a7
    75fa:	03051e13          	slli	t3,a0,0x30
    75fe:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7602:	006ecf33          	xor	t5,t4,t1
                    if (x16 == 1)
    7606:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    760a:	00275813          	srli	a6,a4,0x2
                    if (x16 == 1)
    760e:	001ed313          	srli	t1,t4,0x1
    7612:	000f8b63          	beqz	t6,7628 <crcu32+0x290>
                         crc |= 0x8000;
    7616:	72e9                	lui	t0,0xffffa
    7618:	00128393          	addi	t2,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    761c:	00734633          	xor	a2,t1,t2
    7620:	03061593          	slli	a1,a2,0x30
    7624:	0305d313          	srli	t1,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7628:	010346b3          	xor	a3,t1,a6
                    if (x16 == 1)
    762c:	0016f893          	andi	a7,a3,1
                    data >>= 1;
    7630:	00375e13          	srli	t3,a4,0x3
                    if (x16 == 1)
    7634:	00135813          	srli	a6,t1,0x1
    7638:	00088b63          	beqz	a7,764e <crcu32+0x2b6>
                         crc |= 0x8000;
    763c:	7ee9                	lui	t4,0xffffa
    763e:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7642:	01e84533          	xor	a0,a6,t5
    7646:	03051f93          	slli	t6,a0,0x30
    764a:	030fd813          	srli	a6,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    764e:	01c842b3          	xor	t0,a6,t3
                    if (x16 == 1)
    7652:	0012f393          	andi	t2,t0,1
                    data >>= 1;
    7656:	00475593          	srli	a1,a4,0x4
                    if (x16 == 1)
    765a:	00185e13          	srli	t3,a6,0x1
    765e:	00038b63          	beqz	t2,7674 <crcu32+0x2dc>
                         crc |= 0x8000;
    7662:	7669                	lui	a2,0xffffa
    7664:	00160313          	addi	t1,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7668:	006e46b3          	xor	a3,t3,t1
    766c:	03069893          	slli	a7,a3,0x30
    7670:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7674:	00be4eb3          	xor	t4,t3,a1
                    if (x16 == 1)
    7678:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    767c:	00575f93          	srli	t6,a4,0x5
                    if (x16 == 1)
    7680:	001e5593          	srli	a1,t3,0x1
    7684:	000f0b63          	beqz	t5,769a <crcu32+0x302>
                         crc |= 0x8000;
    7688:	7869                	lui	a6,0xffffa
    768a:	00180293          	addi	t0,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    768e:	0055c533          	xor	a0,a1,t0
    7692:	03051393          	slli	t2,a0,0x30
    7696:	0303d593          	srli	a1,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    769a:	01f5c633          	xor	a2,a1,t6
                    if (x16 == 1)
    769e:	00167313          	andi	t1,a2,1
                    data >>= 1;
    76a2:	00675693          	srli	a3,a4,0x6
                    if (x16 == 1)
    76a6:	0015df93          	srli	t6,a1,0x1
    76aa:	00030b63          	beqz	t1,76c0 <crcu32+0x328>
                         crc |= 0x8000;
    76ae:	78e9                	lui	a7,0xffffa
    76b0:	00188e13          	addi	t3,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    76b4:	01cfceb3          	xor	t4,t6,t3
    76b8:	030e9f13          	slli	t5,t4,0x30
    76bc:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    76c0:	00dfc833          	xor	a6,t6,a3
                    if (x16 == 1)
    76c4:	00187293          	andi	t0,a6,1
                    data >>= 1;
    76c8:	831d                	srli	a4,a4,0x7
                    if (x16 == 1)
    76ca:	001fd313          	srli	t1,t6,0x1
    76ce:	00028b63          	beqz	t0,76e4 <crcu32+0x34c>
                         crc |= 0x8000;
    76d2:	73e9                	lui	t2,0xffffa
    76d4:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    76d8:	00b34533          	xor	a0,t1,a1
    76dc:	03051613          	slli	a2,a0,0x30
    76e0:	03065313          	srli	t1,a2,0x30
                    if (x16 == 1)
    76e4:	00137693          	andi	a3,t1,1
    76e8:	00135f93          	srli	t6,t1,0x1
    76ec:	12e69963          	bne	a3,a4,781e <crcu32+0x486>
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    76f0:	0087d813          	srli	a6,a5,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    76f4:	01f842b3          	xor	t0,a6,t6
                    if (x16 == 1)
    76f8:	0012f393          	andi	t2,t0,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    76fc:	0087d713          	srli	a4,a5,0x8
                    data >>= 1;
    7700:	001fd893          	srli	a7,t6,0x1
    7704:	83a5                	srli	a5,a5,0x9
                    if (x16 == 1)
    7706:	00038b63          	beqz	t2,771c <crcu32+0x384>
                         crc |= 0x8000;
    770a:	75e9                	lui	a1,0xffffa
    770c:	00158613          	addi	a2,a1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7710:	00c8c533          	xor	a0,a7,a2
    7714:	03051313          	slli	t1,a0,0x30
    7718:	03035893          	srli	a7,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    771c:	00f8c6b3          	xor	a3,a7,a5
                    if (x16 == 1)
    7720:	0016fe13          	andi	t3,a3,1
                    data >>= 1;
    7724:	00275e93          	srli	t4,a4,0x2
                    if (x16 == 1)
    7728:	0018d393          	srli	t2,a7,0x1
    772c:	000e0b63          	beqz	t3,7742 <crcu32+0x3aa>
                         crc |= 0x8000;
    7730:	7f69                	lui	t5,0xffffa
    7732:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7736:	01f3c833          	xor	a6,t2,t6
    773a:	03081293          	slli	t0,a6,0x30
    773e:	0302d393          	srli	t2,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7742:	007ec7b3          	xor	a5,t4,t2
                    if (x16 == 1)
    7746:	0017f593          	andi	a1,a5,1
                    data >>= 1;
    774a:	00375613          	srli	a2,a4,0x3
                    if (x16 == 1)
    774e:	0013de13          	srli	t3,t2,0x1
    7752:	c991                	beqz	a1,7766 <crcu32+0x3ce>
                         crc |= 0x8000;
    7754:	7369                	lui	t1,0xffffa
    7756:	00130893          	addi	a7,t1,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    775a:	011e4533          	xor	a0,t3,a7
    775e:	03051693          	slli	a3,a0,0x30
    7762:	0306de13          	srli	t3,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7766:	01c64eb3          	xor	t4,a2,t3
                    if (x16 == 1)
    776a:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    776e:	00475f93          	srli	t6,a4,0x4
                    if (x16 == 1)
    7772:	001e5593          	srli	a1,t3,0x1
    7776:	000f0b63          	beqz	t5,778c <crcu32+0x3f4>
                         crc |= 0x8000;
    777a:	7869                	lui	a6,0xffffa
    777c:	00180293          	addi	t0,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7780:	0055c3b3          	xor	t2,a1,t0
    7784:	03039793          	slli	a5,t2,0x30
    7788:	0307d593          	srli	a1,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    778c:	01f5c633          	xor	a2,a1,t6
                    if (x16 == 1)
    7790:	00167313          	andi	t1,a2,1
                    data >>= 1;
    7794:	00575893          	srli	a7,a4,0x5
                    if (x16 == 1)
    7798:	0015df13          	srli	t5,a1,0x1
    779c:	00030b63          	beqz	t1,77b2 <crcu32+0x41a>
                         crc |= 0x8000;
    77a0:	76e9                	lui	a3,0xffffa
    77a2:	00168e13          	addi	t3,a3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    77a6:	01cf4533          	xor	a0,t5,t3
    77aa:	03051e93          	slli	t4,a0,0x30
    77ae:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    77b2:	011f4fb3          	xor	t6,t5,a7
                    if (x16 == 1)
    77b6:	001ff813          	andi	a6,t6,1
                    data >>= 1;
    77ba:	00675293          	srli	t0,a4,0x6
                    if (x16 == 1)
    77be:	001f5313          	srli	t1,t5,0x1
    77c2:	00080b63          	beqz	a6,77d8 <crcu32+0x440>
                         crc |= 0x8000;
    77c6:	73e9                	lui	t2,0xffffa
    77c8:	00138793          	addi	a5,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    77cc:	00f345b3          	xor	a1,t1,a5
    77d0:	03059613          	slli	a2,a1,0x30
    77d4:	03065313          	srli	t1,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    77d8:	005348b3          	xor	a7,t1,t0
                    if (x16 == 1)
    77dc:	0018f693          	andi	a3,a7,1
                    data >>= 1;
    77e0:	831d                	srli	a4,a4,0x7
                    if (x16 == 1)
    77e2:	00135f93          	srli	t6,t1,0x1
    77e6:	ca91                	beqz	a3,77fa <crcu32+0x462>
                         crc |= 0x8000;
    77e8:	7e69                	lui	t3,0xffffa
    77ea:	001e0e93          	addi	t4,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    77ee:	01dfc533          	xor	a0,t6,t4
    77f2:	03051f13          	slli	t5,a0,0x30
    77f6:	030f5f93          	srli	t6,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    77fa:	01f74833          	xor	a6,a4,t6
                    if (x16 == 1)
    77fe:	00187293          	andi	t0,a6,1
    7802:	001fd513          	srli	a0,t6,0x1
    7806:	00028b63          	beqz	t0,781c <crcu32+0x484>
                         crc |= 0x8000;
    780a:	73e9                	lui	t2,0xffffa
    780c:	00138793          	addi	a5,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7810:	00f545b3          	xor	a1,a0,a5
    7814:	03059613          	slli	a2,a1,0x30
    7818:	03065513          	srli	a0,a2,0x30
}
    781c:	8082                	ret
                         crc |= 0x8000;
    781e:	78e9                	lui	a7,0xffffa
    7820:	00188e13          	addi	t3,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7824:	01cfceb3          	xor	t4,t6,t3
    7828:	030e9f13          	slli	t5,t4,0x30
    782c:	030f5f93          	srli	t6,t5,0x30
    7830:	b5c1                	j	76f0 <crcu32+0x358>
    7832:	7ee9                	lui	t4,0xffffa
    7834:	001e8f13          	addi	t5,t4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7838:	01e2cfb3          	xor	t6,t0,t5
    783c:	030f9813          	slli	a6,t6,0x30
    7840:	03085293          	srli	t0,a6,0x30
    7844:	b379                	j	75d2 <crcu32+0x23a>
    7846:	7f69                	lui	t5,0xffffa
    7848:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    784c:	01f3c833          	xor	a6,t2,t6
    7850:	03081293          	slli	t0,a6,0x30
    7854:	0302d393          	srli	t2,t0,0x30
    7858:	b9b9                	j	74b6 <crcu32+0x11e>

000000000000785a <crc16>:
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    785a:	00a5c6b3          	xor	a3,a1,a0
        crc=crcu8( (ee_u8) (newval)               ,crc);
    785e:	0ff57713          	andi	a4,a0,255
        return crcu16((ee_u16)newval, crc);
    7862:	03051793          	slli	a5,a0,0x30
                    if (x16 == 1)
    7866:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
    786a:	0307d313          	srli	t1,a5,0x30
                    data >>= 1;
    786e:	00175613          	srli	a2,a4,0x1
                    crc >>= 1;
    7872:	0015d893          	srli	a7,a1,0x1
                    if (x16 == 1)
    7876:	00028b63          	beqz	t0,788c <crc16+0x32>
                         crc |= 0x8000;
    787a:	73e9                	lui	t2,0xffffa
    787c:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7880:	00b8c533          	xor	a0,a7,a1
    7884:	03051813          	slli	a6,a0,0x30
    7888:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    788c:	00c8ce33          	xor	t3,a7,a2
                    if (x16 == 1)
    7890:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    7894:	00275f13          	srli	t5,a4,0x2
                    crc >>= 1;
    7898:	0018d393          	srli	t2,a7,0x1
                    if (x16 == 1)
    789c:	000e8b63          	beqz	t4,78b2 <crc16+0x58>
                         crc |= 0x8000;
    78a0:	7fe9                	lui	t6,0xffffa
    78a2:	001f8693          	addi	a3,t6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    78a6:	00d3c2b3          	xor	t0,t2,a3
    78aa:	03029793          	slli	a5,t0,0x30
    78ae:	0307d393          	srli	t2,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    78b2:	01e3c633          	xor	a2,t2,t5
                    if (x16 == 1)
    78b6:	00167593          	andi	a1,a2,1
                    data >>= 1;
    78ba:	00375813          	srli	a6,a4,0x3
                    crc >>= 1;
    78be:	0013df13          	srli	t5,t2,0x1
                    if (x16 == 1)
    78c2:	c991                	beqz	a1,78d6 <crc16+0x7c>
                         crc |= 0x8000;
    78c4:	78e9                	lui	a7,0xffffa
    78c6:	00188e13          	addi	t3,a7,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    78ca:	01cf4533          	xor	a0,t5,t3
    78ce:	03051e93          	slli	t4,a0,0x30
    78d2:	030edf13          	srli	t5,t4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    78d6:	010f4fb3          	xor	t6,t5,a6
                    if (x16 == 1)
    78da:	001ff293          	andi	t0,t6,1
                    data >>= 1;
    78de:	00475693          	srli	a3,a4,0x4
                    crc >>= 1;
    78e2:	001f5813          	srli	a6,t5,0x1
                    if (x16 == 1)
    78e6:	00028b63          	beqz	t0,78fc <crc16+0xa2>
                         crc |= 0x8000;
    78ea:	77e9                	lui	a5,0xffffa
    78ec:	00178393          	addi	t2,a5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    78f0:	00784633          	xor	a2,a6,t2
    78f4:	03061593          	slli	a1,a2,0x30
    78f8:	0305d813          	srli	a6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    78fc:	00d848b3          	xor	a7,a6,a3
                    if (x16 == 1)
    7900:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    7904:	00575e93          	srli	t4,a4,0x5
                    crc >>= 1;
    7908:	00185793          	srli	a5,a6,0x1
                    if (x16 == 1)
    790c:	000e0b63          	beqz	t3,7922 <crc16+0xc8>
                         crc |= 0x8000;
    7910:	7f69                	lui	t5,0xffffa
    7912:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7916:	01f7c533          	xor	a0,a5,t6
    791a:	03051293          	slli	t0,a0,0x30
    791e:	0302d793          	srli	a5,t0,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7922:	01d7c6b3          	xor	a3,a5,t4
                    if (x16 == 1)
    7926:	0016f393          	andi	t2,a3,1
                    data >>= 1;
    792a:	00675593          	srli	a1,a4,0x6
                    crc >>= 1;
    792e:	0017de93          	srli	t4,a5,0x1
                    if (x16 == 1)
    7932:	00038b63          	beqz	t2,7948 <crc16+0xee>
                         crc |= 0x8000;
    7936:	7669                	lui	a2,0xffffa
    7938:	00160813          	addi	a6,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    793c:	010ec8b3          	xor	a7,t4,a6
    7940:	03089e13          	slli	t3,a7,0x30
    7944:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7948:	00becf33          	xor	t5,t4,a1
                    if (x16 == 1)
    794c:	001f7f93          	andi	t6,t5,1
                    data >>= 1;
    7950:	831d                	srli	a4,a4,0x7
                    crc >>= 1;
    7952:	001ed393          	srli	t2,t4,0x1
                    if (x16 == 1)
    7956:	000f8b63          	beqz	t6,796c <crc16+0x112>
                         crc |= 0x8000;
    795a:	72e9                	lui	t0,0xffffa
    795c:	00128793          	addi	a5,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7960:	00f3c533          	xor	a0,t2,a5
    7964:	03051693          	slli	a3,a0,0x30
    7968:	0306d393          	srli	t2,a3,0x30
                    if (x16 == 1)
    796c:	0013f593          	andi	a1,t2,1
                    crc >>= 1;
    7970:	0013de93          	srli	t4,t2,0x1
                    if (x16 == 1)
    7974:	12e59963          	bne	a1,a4,7aa6 <crc16+0x24c>
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    7978:	00835f13          	srli	t5,t1,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    797c:	01df4fb3          	xor	t6,t5,t4
                    if (x16 == 1)
    7980:	001ff293          	andi	t0,t6,1
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    7984:	00835693          	srli	a3,t1,0x8
                    data >>= 1;
    7988:	001ed593          	srli	a1,t4,0x1
    798c:	00935313          	srli	t1,t1,0x9
                    if (x16 == 1)
    7990:	00028b63          	beqz	t0,79a6 <crc16+0x14c>
                         crc |= 0x8000;
    7994:	7769                	lui	a4,0xffffa
    7996:	00170793          	addi	a5,a4,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    799a:	00f5c533          	xor	a0,a1,a5
    799e:	03051393          	slli	t2,a0,0x30
    79a2:	0303d593          	srli	a1,t2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79a6:	00b34633          	xor	a2,t1,a1
                    if (x16 == 1)
    79aa:	00167813          	andi	a6,a2,1
                    data >>= 1;
    79ae:	0026d893          	srli	a7,a3,0x2
                    if (x16 == 1)
    79b2:	0015d293          	srli	t0,a1,0x1
    79b6:	00080b63          	beqz	a6,79cc <crc16+0x172>
                         crc |= 0x8000;
    79ba:	7e69                	lui	t3,0xffffa
    79bc:	001e0e93          	addi	t4,t3,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    79c0:	01d2cf33          	xor	t5,t0,t4
    79c4:	030f1f93          	slli	t6,t5,0x30
    79c8:	030fd293          	srli	t0,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79cc:	0112c333          	xor	t1,t0,a7
                    if (x16 == 1)
    79d0:	00137713          	andi	a4,t1,1
                    data >>= 1;
    79d4:	0036d793          	srli	a5,a3,0x3
                    if (x16 == 1)
    79d8:	0012d813          	srli	a6,t0,0x1
    79dc:	cb11                	beqz	a4,79f0 <crc16+0x196>
                         crc |= 0x8000;
    79de:	73e9                	lui	t2,0xffffa
    79e0:	00138593          	addi	a1,t2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    79e4:	00b84533          	xor	a0,a6,a1
    79e8:	03051613          	slli	a2,a0,0x30
    79ec:	03065813          	srli	a6,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    79f0:	00f848b3          	xor	a7,a6,a5
                    if (x16 == 1)
    79f4:	0018fe13          	andi	t3,a7,1
                    data >>= 1;
    79f8:	0046de93          	srli	t4,a3,0x4
                    if (x16 == 1)
    79fc:	00185393          	srli	t2,a6,0x1
    7a00:	000e0b63          	beqz	t3,7a16 <crc16+0x1bc>
                         crc |= 0x8000;
    7a04:	7f69                	lui	t5,0xffffa
    7a06:	001f0f93          	addi	t6,t5,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7a0a:	01f3c2b3          	xor	t0,t2,t6
    7a0e:	03029313          	slli	t1,t0,0x30
    7a12:	03035393          	srli	t2,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a16:	01d3c733          	xor	a4,t2,t4
                    if (x16 == 1)
    7a1a:	00177593          	andi	a1,a4,1
                    data >>= 1;
    7a1e:	0056d793          	srli	a5,a3,0x5
                    if (x16 == 1)
    7a22:	0013de13          	srli	t3,t2,0x1
    7a26:	c991                	beqz	a1,7a3a <crc16+0x1e0>
                         crc |= 0x8000;
    7a28:	7669                	lui	a2,0xffffa
    7a2a:	00160813          	addi	a6,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7a2e:	010e4533          	xor	a0,t3,a6
    7a32:	03051893          	slli	a7,a0,0x30
    7a36:	0308de13          	srli	t3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a3a:	00fe4eb3          	xor	t4,t3,a5
                    if (x16 == 1)
    7a3e:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    7a42:	0066df93          	srli	t6,a3,0x6
                    if (x16 == 1)
    7a46:	001e5593          	srli	a1,t3,0x1
    7a4a:	000f0b63          	beqz	t5,7a60 <crc16+0x206>
                         crc |= 0x8000;
    7a4e:	72e9                	lui	t0,0xffffa
    7a50:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7a54:	0065c3b3          	xor	t2,a1,t1
    7a58:	03039713          	slli	a4,t2,0x30
    7a5c:	03075593          	srli	a1,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a60:	01f5c7b3          	xor	a5,a1,t6
                    if (x16 == 1)
    7a64:	0017f613          	andi	a2,a5,1
                    data >>= 1;
    7a68:	829d                	srli	a3,a3,0x7
                    if (x16 == 1)
    7a6a:	0015de93          	srli	t4,a1,0x1
    7a6e:	ca11                	beqz	a2,7a82 <crc16+0x228>
                         crc |= 0x8000;
    7a70:	7869                	lui	a6,0xffffa
    7a72:	00180893          	addi	a7,a6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7a76:	011ec533          	xor	a0,t4,a7
    7a7a:	03051e13          	slli	t3,a0,0x30
    7a7e:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    7a82:	01d6cf33          	xor	t5,a3,t4
                    if (x16 == 1)
    7a86:	001f7f93          	andi	t6,t5,1
    7a8a:	001ed513          	srli	a0,t4,0x1
    7a8e:	000f8b63          	beqz	t6,7aa4 <crc16+0x24a>
                         crc |= 0x8000;
    7a92:	72e9                	lui	t0,0xffffa
    7a94:	00128313          	addi	t1,t0,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7a98:	006543b3          	xor	t2,a0,t1
    7a9c:	03039713          	slli	a4,t2,0x30
    7aa0:	03075513          	srli	a0,a4,0x30
}
    7aa4:	8082                	ret
                         crc |= 0x8000;
    7aa6:	7669                	lui	a2,0xffffa
    7aa8:	00160813          	addi	a6,a2,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
    7aac:	010ec8b3          	xor	a7,t4,a6
    7ab0:	03089e13          	slli	t3,a7,0x30
    7ab4:	030e5e93          	srli	t4,t3,0x30
    7ab8:	b5c1                	j	7978 <crc16+0x11e>

0000000000007aba <check_data_types>:
            }
        if (retval>0) {
                ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
            }
        return retval;
}
    7aba:	4501                	li	a0,0
    7abc:	8082                	ret

0000000000007abe <start_time>:
       Implementation may be capturing a system timer (as implemented in the example code)
       or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
   */
void start_time(void) {
    uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    7abe:	b00027f3          	csrr	a5,mcycle
        start_time_val = mcyclel;
    7ac2:	02079293          	slli	t0,a5,0x20
    7ac6:	0202d313          	srli	t1,t0,0x20
    7aca:	6745                	lui	a4,0x11
    7acc:	e2673c23          	sd	t1,-456(a4) # 10e38 <start_time_val>
}
    7ad0:	8082                	ret

0000000000007ad2 <stop_time>:
       Implementation may be capturing a system timer (as implemented in the example code)
       or other system parameters - e.g. reading the current value of cpu cycles counter.
   */
void stop_time(void) {
    uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    7ad2:	b00027f3          	csrr	a5,mcycle
        stop_time_val = mcyclel;
    7ad6:	02079293          	slli	t0,a5,0x20
    7ada:	0202d313          	srli	t1,t0,0x20
    7ade:	6745                	lui	a4,0x11
    7ae0:	e2673823          	sd	t1,-464(a4) # 10e30 <stop_time_val>
}
    7ae4:	8082                	ret

0000000000007ae6 <get_time>:
       This methodology is taken to accomodate any hardware or simulated platform.
       The sample implementation returns millisecs by default,
       and the resolution is controlled by <TIMER_RES_DIVIDER>
   */
CORE_TICKS get_time(void) {
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    7ae6:	67c5                	lui	a5,0x11
    7ae8:	62c5                	lui	t0,0x11
    7aea:	e307b503          	ld	a0,-464(a5) # 10e30 <stop_time_val>
    7aee:	e382b303          	ld	t1,-456(t0) # 10e38 <start_time_val>
        return elapsed;
}
    7af2:	40650533          	sub	a0,a0,t1
    7af6:	8082                	ret

0000000000007af8 <time_in_secs>:

       The <secs_ret> type is used to accomodate systems with no support for floating point.
       Default implementation implemented by the EE_TICKS_PER_SEC macro above.
   */
secs_ret time_in_secs(CORE_TICKS ticks) {
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    7af8:	3e800793          	li	a5,1000
        return retval;
}
    7afc:	02f55533          	divu	a0,a0,a5
    7b00:	8082                	ret

0000000000007b02 <portable_init>:
                ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
            }
        if (sizeof(ee_u32) != 8) {
                ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
            }
        p->portable_id=1;
    7b02:	4785                	li	a5,1
    7b04:	00f50023          	sb	a5,0(a0)
}
    7b08:	8082                	ret

0000000000007b0a <portable_fini>:
/* Function : portable_fini
       Target specific final code
   */
void portable_fini(core_portable *p)
{
        p->portable_id=0;
    7b0a:	00050023          	sb	zero,0(a0)
}
    7b0e:	8082                	ret

0000000000007b10 <memset>:

void* memset(void* s, int c, size_t n)
{
     asm("mv t0, a0");
    7b10:	82aa                	mv	t0,a0
     asm("add a2, a2, a0"); // end = s + n
    7b12:	962a                	add	a2,a2,a0

0000000000007b14 <.memset_loop>:
         asm(".memset_loop: bge a0, a2, .memset_end");
    7b14:	00c55663          	bge	a0,a2,7b20 <.memset_end>
     asm("sb a1, 0(a0)");
    7b18:	00b50023          	sb	a1,0(a0)
     asm("addi a0, a0, 1");
    7b1c:	0505                	addi	a0,a0,1
     asm("j .memset_loop");
    7b1e:	bfdd                	j	7b14 <.memset_loop>

0000000000007b20 <.memset_end>:
     asm(".memset_end:");
     asm("mv a0, t0");
    7b20:	8516                	mv	a0,t0
     asm("jr ra");
    7b22:	8082                	ret
}
    7b24:	8082                	ret

0000000000007b26 <main>:
MAIN_RETURN_TYPE main(void) {
    7b26:	7111                	addi	sp,sp,-256
    7b28:	fd86                	sd	ra,248(sp)
                            retval=seed1_volatile;
    7b2a:	67c5                	lui	a5,0x11
                            retval=seed2_volatile;
    7b2c:	60c5                	lui	ra,0x11
                            retval=seed3_volatile;
    7b2e:	62c1                	lui	t0,0x10
                            retval=seed4_volatile;
    7b30:	6341                	lui	t1,0x10
                            retval=seed1_volatile;
    7b32:	e487a583          	lw	a1,-440(a5) # 10e48 <seed1_volatile>
                            retval=seed5_volatile;
    7b36:	63c5                	lui	t2,0x11
                            retval=seed2_volatile;
    7b38:	e440a603          	lw	a2,-444(ra) # 10e44 <seed2_volatile>
                            retval=seed3_volatile;
    7b3c:	1442a683          	lw	a3,324(t0) # 10144 <seed3_volatile>
                            retval=seed4_volatile;
    7b40:	14032703          	lw	a4,320(t1) # 10140 <seed4_volatile>
MAIN_RETURN_TYPE main(void) {
    7b44:	f9a2                	sd	s0,240(sp)
                            retval=seed5_volatile;
    7b46:	e403a403          	lw	s0,-448(t2) # 10e40 <seed5_volatile>
MAIN_RETURN_TYPE main(void) {
    7b4a:	f5a6                	sd	s1,232(sp)
        p->portable_id=1;
    7b4c:	4505                	li	a0,1
                            retval=seed4_volatile;
    7b4e:	0007049b          	sext.w	s1,a4
MAIN_RETURN_TYPE main(void) {
    7b52:	f1ca                	sd	s2,224(sp)
    7b54:	edce                	sd	s3,216(sp)
    7b56:	e9d2                	sd	s4,208(sp)
    7b58:	e5d6                	sd	s5,200(sp)
    7b5a:	e1da                	sd	s6,192(sp)
    7b5c:	fd5e                	sd	s7,184(sp)
    7b5e:	f962                	sd	s8,176(sp)
    7b60:	f566                	sd	s9,168(sp)
    7b62:	f16a                	sd	s10,160(sp)
    7b64:	ed6e                	sd	s11,152(sp)
        p->portable_id=1;
    7b66:	08a10523          	sb	a0,138(sp)
            results[0].seed1=get_seed(1);
    7b6a:	00b11c23          	sh	a1,24(sp)
            results[0].seed2=get_seed(2);
    7b6e:	00c11d23          	sh	a2,26(sp)
            results[0].seed3=get_seed(3);
    7b72:	00d11e23          	sh	a3,28(sp)
            results[0].iterations=get_seed_32(4);
    7b76:	e4a6                	sd	s1,72(sp)
                            retval=seed5_volatile;
    7b78:	0004081b          	sext.w	a6,s0
            if (results[0].execs==0) { /* if not supplied, execute all algorithms */
    7b7c:	00081363          	bnez	a6,7b82 <main+0x5c>
                    results[0].execs=ALL_ALGORITHMS_MASK;
    7b80:	481d                	li	a6,7
                if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
    7b82:	69e2                	ld	s3,24(sp)
                    results[0].execs=ALL_ALGORITHMS_MASK;
    7b84:	e8c2                	sd	a6,80(sp)
                if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
    7b86:	01099893          	slli	a7,s3,0x10
    7b8a:	00089863          	bnez	a7,7b9a <main+0x74>
                        results[0].seed3=0x66;
    7b8e:	06600913          	li	s2,102
                        results[0].seed1=0;
    7b92:	cc02                	sw	zero,24(sp)
                        results[0].seed3=0x66;
    7b94:	01211e23          	sh	s2,28(sp)
    7b98:	69e2                	ld	s3,24(sp)
            if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
    7b9a:	01099a13          	slli	s4,s3,0x10
    7b9e:	010a5a93          	srli	s5,s4,0x10
    7ba2:	4b05                	li	s6,1
    7ba4:	016a9b63          	bne	s5,s6,7bba <main+0x94>
                    results[0].seed1=0x3415;
    7ba8:	34153bb7          	lui	s7,0x34153
    7bac:	415b8c13          	addi	s8,s7,1045 # 34153415 <STACK+0x3413adb5>
                    results[0].seed3=0x66;
    7bb0:	06600c93          	li	s9,102
                    results[0].seed1=0x3415;
    7bb4:	cc62                	sw	s8,24(sp)
                    results[0].seed3=0x66;
    7bb6:	01911e23          	sh	s9,28(sp)
                        if ((1<<(ee_u32)i) & results[0].execs)
    7bba:	6946                	ld	s2,80(sp)
                    results[i].size=results[i].size/num_algorithms;
    7bbc:	7d000593          	li	a1,2000
            results[0].memblock[0]=(void *)static_memblk;
    7bc0:	60c1                	lui	ra,0x10
                        if ((1<<(ee_u32)i) & results[0].execs)
    7bc2:	00297713          	andi	a4,s2,2
    7bc6:	00197d13          	andi	s10,s2,1
                                num_algorithms++;
    7bca:	00e03db3          	snez	s11,a4
                        if ((1<<(ee_u32)i) & results[0].execs)
    7bce:	00497e13          	andi	t3,s2,4
                                num_algorithms++;
    7bd2:	01bd0eb3          	add	t4,s10,s11
    7bd6:	01c03f33          	snez	t5,t3
    7bda:	01ee8fb3          	add	t6,t4,t5
                    results[i].size=results[i].size/num_algorithms;
    7bde:	03f5d533          	divu	a0,a1,t6
            results[0].memblock[0]=(void *)static_memblk;
    7be2:	66008293          	addi	t0,ra,1632 # 10660 <static_memblk>
    7be6:	f016                	sd	t0,32(sp)
            results[0].err=0;
    7be8:	08011423          	sh	zero,136(sp)
                        if ((1<<(ee_u32)i) & results[0].execs)
    7bec:	836a                	mv	t1,s10
                    results[i].size=results[i].size/num_algorithms;
    7bee:	e0aa                	sd	a0,64(sp)
                        if ((1<<(ee_u32)i) & results[0].execs) {
    7bf0:	3c0d12e3          	bnez	s10,87b4 <__perf_end+0xb7a>
    7bf4:	3a0718e3          	bnez	a4,87a4 <__perf_end+0xb6a>
    7bf8:	380e1de3          	bnez	t3,8792 <__perf_end+0xb58>
                        if (results[i].execs & ID_LIST) {
    7bfc:	1c031363          	bnez	t1,7dc2 <__perf_end+0x188>
                        if (results[i].execs & ID_MATRIX) {
    7c00:	1c071c63          	bnez	a4,7dd8 <__perf_end+0x19e>
                        if (results[i].execs & ID_STATE) {
    7c04:	00497513          	andi	a0,s2,4
    7c08:	c519                	beqz	a0,7c16 <main+0xf0>
                                core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
    7c0a:	7662                	ld	a2,56(sp)
    7c0c:	01811583          	lh	a1,24(sp)
    7c10:	6506                	ld	a0,64(sp)
    7c12:	f52fc0ef          	jal	ra,4364 <core_init_state>
                if (results[0].iterations==0) {
    7c16:	69a6                	ld	s3,72(sp)
    7c18:	6e098263          	beqz	s3,82fc <__perf_end+0x6c2>
    7c1c:	6a45                	lui	s4,0x11
    7c1e:	6ac5                	lui	s5,0x11
    7c20:	01810c13          	addi	s8,sp,24
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    7c24:	b00028f3          	csrr	a7,mcycle
        start_time_val = mcyclel;
    7c28:	02089993          	slli	s3,a7,0x20
    7c2c:	0209db13          	srli	s6,s3,0x20
    7c30:	e36a3c23          	sd	s6,-456(s4) # 10e38 <start_time_val>

0000000000007c34 <__perf_start>:
            iterate(&results[0]);
    7c34:	8562                	mv	a0,s8
    7c36:	f29fe0ef          	jal	ra,6b5e <iterate>

0000000000007c3a <__perf_end>:
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    7c3a:	b0002c73          	csrr	s8,mcycle
        return crcu16((ee_u16)newval, crc);
    7c3e:	01815503          	lhu	a0,24(sp)
        stop_time_val = mcyclel;
    7c42:	020c1d93          	slli	s11,s8,0x20
    7c46:	020ddd13          	srli	s10,s11,0x20
        return crcu16((ee_u16)newval, crc);
    7c4a:	4581                	li	a1,0
        stop_time_val = mcyclel;
    7c4c:	e3aab823          	sd	s10,-464(s5) # 10e30 <stop_time_val>
        return crcu16((ee_u16)newval, crc);
    7c50:	cecff0ef          	jal	ra,713c <crcu16>
    7c54:	85aa                	mv	a1,a0
    7c56:	01a15503          	lhu	a0,26(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    7c5a:	e38a3a03          	ld	s4,-456(s4)
        return crcu16((ee_u16)newval, crc);
    7c5e:	cdeff0ef          	jal	ra,713c <crcu16>
    7c62:	85aa                	mv	a1,a0
    7c64:	01c15503          	lhu	a0,28(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    7c68:	414d0933          	sub	s2,s10,s4
        return crcu16((ee_u16)newval, crc);
    7c6c:	cd0ff0ef          	jal	ra,713c <crcu16>
    7c70:	6b06                	ld	s6,64(sp)
    7c72:	85aa                	mv	a1,a0
    7c74:	030b1513          	slli	a0,s6,0x30
    7c78:	9141                	srli	a0,a0,0x30
    7c7a:	cc2ff0ef          	jal	ra,713c <crcu16>
            switch (seedcrc) { /* test known output for common seeds */
    7c7e:	6e21                	lui	t3,0x8
    7c80:	0005041b          	sext.w	s0,a0
    7c84:	b05e0e93          	addi	t4,t3,-1275 # 7b05 <portable_init+0x3>
    7c88:	35d406e3          	beq	s0,t4,87d4 <__perf_end+0xb9a>
    7c8c:	188ee863          	bltu	t4,s0,7e1c <__perf_end+0x1e2>
    7c90:	6709                	lui	a4,0x2
    7c92:	8f270893          	addi	a7,a4,-1806 # 18f2 <matrix_test+0x702>
    7c96:	371400e3          	beq	s0,a7,87f6 <__perf_end+0xbbc>
    7c9a:	6d95                	lui	s11,0x5
    7c9c:	eafd8513          	addi	a0,s11,-337 # 4eaf <core_bench_state+0x73b>
    7ca0:	3aa411e3          	bne	s0,a0,8842 <__perf_end+0xc08>
                        ee_printf("Profile generation run parameters for coremark.\n");
    7ca4:	6e41                	lui	t3,0x10
    7ca6:	1a8e0513          	addi	a0,t3,424 # 101a8 <seed3_volatile+0x64>
    7caa:	cd7f80ef          	jal	ra,980 <whisperPrintf>
    7cae:	608d8a13          	addi	s4,s11,1544
    7cb2:	6eb9                	lui	t4,0xe
    7cb4:	679d                	lui	a5,0x7
    7cb6:	5a4e8993          	addi	s3,t4,1444 # e5a4 <_end+0x5d54>
    7cba:	8d52                	mv	s10,s4
    7cbc:	a7978a93          	addi	s5,a5,-1415 # 6a79 <core_bench_list+0x7c5>
                    for (i=0 ; i<default_num_contexts; i++) {
    7cc0:	6cc1                	lui	s9,0x10
    7cc2:	138cbf03          	ld	t5,312(s9) # 10138 <default_num_contexts>
    7cc6:	4481                	li	s1,0
    7cc8:	4d81                	li	s11,0
    7cca:	360f08e3          	beqz	t5,883a <__perf_end+0xc00>
                            if ((results[i].execs & ID_LIST) &&
    7cce:	000a8c1b          	sext.w	s8,s5
                            if ((results[i].execs & ID_MATRIX) &&
    7cd2:	000d0b1b          	sext.w	s6,s10
                            if ((results[i].execs & ID_STATE) &&
    7cd6:	00098b9b          	sext.w	s7,s3
    7cda:	a805                	j	7d0a <__perf_end+0xd0>
                            total_errors+=results[i].err;
    7cdc:	00c083b3          	add	t2,ra,a2
    7ce0:	ff83de03          	lhu	t3,-8(t2)
                    for (i=0 ; i<default_num_contexts; i++) {
    7ce4:	2d85                	addiw	s11,s11,1
    7ce6:	138cbe83          	ld	t4,312(s9)
                            total_errors+=results[i].err;
    7cea:	01c484bb          	addw	s1,s1,t3
                    for (i=0 ; i<default_num_contexts; i++) {
    7cee:	030d9793          	slli	a5,s11,0x30
                            total_errors+=results[i].err;
    7cf2:	03049f13          	slli	t5,s1,0x30
    7cf6:	0104929b          	slliw	t0,s1,0x10
                    for (i=0 ; i<default_num_contexts; i++) {
    7cfa:	0307dd93          	srli	s11,a5,0x30
                            total_errors+=results[i].err;
    7cfe:	030f5d13          	srli	s10,t5,0x30
    7d02:	4102d49b          	sraiw	s1,t0,0x10
                    for (i=0 ; i<default_num_contexts; i++) {
    7d06:	15ddf463          	bgeu	s11,t4,7e4e <__perf_end+0x214>
                            results[i].err=0;
    7d0a:	004d9d13          	slli	s10,s11,0x4
    7d0e:	41bd02b3          	sub	t0,s10,s11
    7d12:	00329593          	slli	a1,t0,0x3
    7d16:	09010f93          	addi	t6,sp,144
    7d1a:	00bf8333          	add	t1,t6,a1
                            if ((results[i].execs & ID_LIST) &&
    7d1e:	fc033683          	ld	a3,-64(t1)
                            results[i].err=0;
    7d22:	fe031c23          	sh	zero,-8(t1)
    7d26:	000d859b          	sext.w	a1,s11
                            if ((results[i].execs & ID_LIST) &&
    7d2a:	0016f613          	andi	a2,a3,1
    7d2e:	c60d                	beqz	a2,7d58 <__perf_end+0x11e>
    7d30:	ff235603          	lhu	a2,-14(t1)
    7d34:	e01a                	sd	t1,0(sp)
    7d36:	03860163          	beq	a2,s8,7d58 <__perf_end+0x11e>
                                    ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
    7d3a:	60c1                	lui	ra,0x10
    7d3c:	86d6                	mv	a3,s5
    7d3e:	24008513          	addi	a0,ra,576 # 10240 <seed3_volatile+0xfc>
    7d42:	e42e                	sd	a1,8(sp)
    7d44:	c3df80ef          	jal	ra,980 <whisperPrintf>
                                    results[i].err++;
    7d48:	6382                	ld	t2,0(sp)
    7d4a:	65a2                	ld	a1,8(sp)
    7d4c:	ff83d803          	lhu	a6,-8(t2)
    7d50:	0018071b          	addiw	a4,a6,1
    7d54:	fee39c23          	sh	a4,-8(t2)
                            if ((results[i].execs & ID_MATRIX) &&
    7d58:	40bd08b3          	sub	a7,s10,a1
    7d5c:	00389513          	slli	a0,a7,0x3
    7d60:	09010e13          	addi	t3,sp,144
    7d64:	00ae0eb3          	add	t4,t3,a0
    7d68:	fc0ebf83          	ld	t6,-64(t4)
    7d6c:	002ff793          	andi	a5,t6,2
    7d70:	c79d                	beqz	a5,7d9e <__perf_end+0x164>
    7d72:	ff4ed603          	lhu	a2,-12(t4)
    7d76:	e076                	sd	t4,0(sp)
    7d78:	03660363          	beq	a2,s6,7d9e <__perf_end+0x164>
                                    ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
    7d7c:	6f41                	lui	t5,0x10
    7d7e:	86d2                	mv	a3,s4
    7d80:	270f0513          	addi	a0,t5,624 # 10270 <seed3_volatile+0x12c>
    7d84:	e42e                	sd	a1,8(sp)
    7d86:	bfbf80ef          	jal	ra,980 <whisperPrintf>
                                    results[i].err++;
    7d8a:	6282                	ld	t0,0(sp)
    7d8c:	ff82d583          	lhu	a1,-8(t0)
                            if ((results[i].execs & ID_STATE) &&
    7d90:	fc02bf83          	ld	t6,-64(t0)
                                    results[i].err++;
    7d94:	0015831b          	addiw	t1,a1,1
    7d98:	65a2                	ld	a1,8(sp)
    7d9a:	fe629c23          	sh	t1,-8(t0)
                                        (results[i].crcstate!=state_known_crc[known_id])) {
    7d9e:	40bd0d33          	sub	s10,s10,a1
                            if ((results[i].execs & ID_STATE) &&
    7da2:	004ff693          	andi	a3,t6,4
                                        (results[i].crcstate!=state_known_crc[known_id])) {
    7da6:	003d1613          	slli	a2,s10,0x3
    7daa:	09010093          	addi	ra,sp,144
                            if ((results[i].execs & ID_STATE) &&
    7dae:	d69d                	beqz	a3,7cdc <__perf_end+0xa2>
                                        (results[i].crcstate!=state_known_crc[known_id])) {
    7db0:	00c08d33          	add	s10,ra,a2
                            if ((results[i].execs & ID_STATE) &&
    7db4:	ff6d5603          	lhu	a2,-10(s10)
    7db8:	05761163          	bne	a2,s7,7dfa <__perf_end+0x1c0>
                            total_errors+=results[i].err;
    7dbc:	ff8d5e03          	lhu	t3,-8(s10)
    7dc0:	b715                	j	7ce4 <__perf_end+0xaa>
                                results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    7dc2:	01811603          	lh	a2,24(sp)
    7dc6:	75a2                	ld	a1,40(sp)
    7dc8:	ddbf80ef          	jal	ra,ba2 <core_list_init>
                        if (results[i].execs & ID_MATRIX) {
    7dcc:	6946                	ld	s2,80(sp)
                                results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    7dce:	ecaa                	sd	a0,88(sp)
    7dd0:	00297713          	andi	a4,s2,2
                        if (results[i].execs & ID_MATRIX) {
    7dd4:	e20708e3          	beqz	a4,7c04 <main+0xde>
                                core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    7dd8:	01a11483          	lh	s1,26(sp)
    7ddc:	01811783          	lh	a5,24(sp)
    7de0:	75c2                	ld	a1,48(sp)
    7de2:	0104981b          	slliw	a6,s1,0x10
    7de6:	6506                	ld	a0,64(sp)
    7de8:	00f868b3          	or	a7,a6,a5
    7dec:	1094                	addi	a3,sp,96
    7dee:	0008861b          	sext.w	a2,a7
    7df2:	e60fb0ef          	jal	ra,3452 <core_init_matrix>
                        if (results[i].execs & ID_STATE) {
    7df6:	6946                	ld	s2,80(sp)
    7df8:	b531                	j	7c04 <main+0xde>
                                    ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
    7dfa:	6841                	lui	a6,0x10
    7dfc:	86ce                	mv	a3,s3
    7dfe:	2a880513          	addi	a0,a6,680 # 102a8 <seed3_volatile+0x164>
    7e02:	b7ff80ef          	jal	ra,980 <whisperPrintf>
                                    results[i].err++;
    7e06:	ff8d5703          	lhu	a4,-8(s10)
    7e0a:	0017089b          	addiw	a7,a4,1
    7e0e:	03089513          	slli	a0,a7,0x30
    7e12:	03055e13          	srli	t3,a0,0x30
    7e16:	ffcd1c23          	sh	t3,-8(s10)
    7e1a:	b5e9                	j	7ce4 <__perf_end+0xaa>
            switch (seedcrc) { /* test known output for common seeds */
    7e1c:	64a5                	lui	s1,0x9
    7e1e:	a0248593          	addi	a1,s1,-1534 # 8a02 <_end+0x1b2>
    7e22:	1eb40be3          	beq	s0,a1,8818 <__perf_end+0xbde>
    7e26:	6bbd                	lui	s7,0xf
    7e28:	9f5b8c93          	addi	s9,s7,-1547 # e9f5 <_end+0x61a5>
    7e2c:	21941be3          	bne	s0,s9,8842 <__perf_end+0xc08>
                        ee_printf("2K performance run parameters for coremark.\n");
    7e30:	60c1                	lui	ra,0x10
    7e32:	1e008513          	addi	a0,ra,480 # 101e0 <seed3_volatile+0x9c>
    7e36:	b4bf80ef          	jal	ra,980 <whisperPrintf>
    7e3a:	6389                	lui	t2,0x2
    7e3c:	fd738a13          	addi	s4,t2,-41 # 1fd7 <matrix_test+0xde7>
    7e40:	6839                	lui	a6,0xe
    7e42:	e3a48993          	addi	s3,s1,-454
    7e46:	8d52                	mv	s10,s4
    7e48:	71480a93          	addi	s5,a6,1812 # e714 <_end+0x5ec4>
    7e4c:	bd95                	j	7cc0 <__perf_end+0x86>
    7e4e:	6b06                	ld	s6,64(sp)
                ee_printf("CoreMark Size  : %u\n",(ee_u32)results[0].size);
    7e50:	6a41                	lui	s4,0x10
    7e52:	85da                	mv	a1,s6
    7e54:	2d8a0513          	addi	a0,s4,728 # 102d8 <seed3_volatile+0x194>
    7e58:	b29f80ef          	jal	ra,980 <whisperPrintf>
            ee_printf("Total ticks   : %u\n",(ee_u32)total_time);
    7e5c:	6ac1                	lui	s5,0x10
    7e5e:	85ca                	mv	a1,s2
    7e60:	2f0a8513          	addi	a0,s5,752 # 102f0 <seed3_volatile+0x1ac>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    7e64:	3e800c13          	li	s8,1000
            ee_printf("Total ticks   : %u\n",(ee_u32)total_time);
    7e68:	b19f80ef          	jal	ra,980 <whisperPrintf>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    7e6c:	03895b33          	divu	s6,s2,s8
            ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
    7e70:	6bc1                	lui	s7,0x10
    7e72:	308b8513          	addi	a0,s7,776 # 10308 <seed3_volatile+0x1c4>
    7e76:	85da                	mv	a1,s6
    7e78:	b09f80ef          	jal	ra,980 <whisperPrintf>
            if (time_in_secs(total_time) > 0)
    7e7c:	3e700593          	li	a1,999
    7e80:	4325ef63          	bltu	a1,s2,82be <__perf_end+0x684>
                    ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    7e84:	6941                	lui	s2,0x10
                    total_errors++;
    7e86:	2d05                	addiw	s10,s10,1
                    ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    7e88:	32090513          	addi	a0,s2,800 # 10320 <seed3_volatile+0x1dc>
                    total_errors++;
    7e8c:	010d1d9b          	slliw	s11,s10,0x10
                    ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    7e90:	af1f80ef          	jal	ra,980 <whisperPrintf>
                    total_errors++;
    7e94:	410dd49b          	sraiw	s1,s11,0x10
            ee_printf("Iterations    : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
    7e98:	138cb783          	ld	a5,312(s9)
    7e9c:	62a6                	ld	t0,72(sp)
    7e9e:	6f41                	lui	t5,0x10
    7ea0:	380f0513          	addi	a0,t5,896 # 10380 <seed3_volatile+0x23c>
    7ea4:	02f285b3          	mul	a1,t0,a5
            ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    7ea8:	69c1                	lui	s3,0x10
    7eaa:	6a41                	lui	s4,0x10
            ee_printf("Compiler flags  : %s\n",COMPILER_FLAGS);
    7eac:	6ac1                	lui	s5,0x10
    7eae:	6c41                	lui	s8,0x10
            ee_printf("Memory location : %s\n",MEM_LOCATION);
    7eb0:	6b41                	lui	s6,0x10
    7eb2:	6bc1                	lui	s7,0x10
            ee_printf("Iterations    : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
    7eb4:	acdf80ef          	jal	ra,980 <whisperPrintf>
            ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    7eb8:	39898593          	addi	a1,s3,920 # 10398 <seed3_volatile+0x254>
    7ebc:	3a8a0513          	addi	a0,s4,936 # 103a8 <seed3_volatile+0x264>
    7ec0:	ac1f80ef          	jal	ra,980 <whisperPrintf>
            ee_printf("Compiler flags  : %s\n",COMPILER_FLAGS);
    7ec4:	3c0a8593          	addi	a1,s5,960 # 103c0 <seed3_volatile+0x27c>
    7ec8:	3c8c0513          	addi	a0,s8,968 # 103c8 <seed3_volatile+0x284>
    7ecc:	ab5f80ef          	jal	ra,980 <whisperPrintf>
            ee_printf("Memory location : %s\n",MEM_LOCATION);
    7ed0:	3e0b0593          	addi	a1,s6,992 # 103e0 <seed3_volatile+0x29c>
    7ed4:	3e8b8513          	addi	a0,s7,1000 # 103e8 <seed3_volatile+0x2a4>
    7ed8:	aa9f80ef          	jal	ra,980 <whisperPrintf>
                ee_printf("seedcrc     : 0x%04x\n",seedcrc);
    7edc:	85a2                	mv	a1,s0
    7ede:	6441                	lui	s0,0x10
    7ee0:	40040513          	addi	a0,s0,1024 # 10400 <seed3_volatile+0x2bc>
    7ee4:	a9df80ef          	jal	ra,980 <whisperPrintf>
            if (results[0].execs & ID_LIST)
    7ee8:	69c6                	ld	s3,80(sp)
    7eea:	0019f593          	andi	a1,s3,1
    7eee:	c1f5                	beqz	a1,7fd2 <__perf_end+0x398>
                    for (i=0 ; i<default_num_contexts; i++)
    7ef0:	138cbf83          	ld	t6,312(s9)
    7ef4:	0c0f8f63          	beqz	t6,7fd2 <__perf_end+0x398>
    7ef8:	4d81                	li	s11,0
    7efa:	6941                	lui	s2,0x10
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7efc:	004d9313          	slli	t1,s11,0x4
    7f00:	41b306b3          	sub	a3,t1,s11
    7f04:	00369613          	slli	a2,a3,0x3
    7f08:	09010093          	addi	ra,sp,144
    7f0c:	00c083b3          	add	t2,ra,a2
    7f10:	ff23d603          	lhu	a2,-14(t2)
    7f14:	85ee                	mv	a1,s11
    7f16:	41890513          	addi	a0,s2,1048 # 10418 <seed3_volatile+0x2d4>
    7f1a:	a67f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    7f1e:	001d889b          	addiw	a7,s11,1
    7f22:	03089713          	slli	a4,a7,0x30
    7f26:	03075d13          	srli	s10,a4,0x30
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f2a:	004d1e13          	slli	t3,s10,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    7f2e:	138cb803          	ld	a6,312(s9)
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f32:	41ae0eb3          	sub	t4,t3,s10
    7f36:	003e9d93          	slli	s11,t4,0x3
    7f3a:	091c                	addi	a5,sp,144
    7f3c:	41890513          	addi	a0,s2,1048
    7f40:	01b78f33          	add	t5,a5,s11
    7f44:	85ea                	mv	a1,s10
                    for (i=0 ; i<default_num_contexts; i++)
    7f46:	090d7563          	bgeu	s10,a6,7fd0 <__perf_end+0x396>
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f4a:	ff2f5603          	lhu	a2,-14(t5)
                    for (i=0 ; i<default_num_contexts; i++)
    7f4e:	001d099b          	addiw	s3,s10,1
    7f52:	03099a13          	slli	s4,s3,0x30
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f56:	a2bf80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    7f5a:	030a5a93          	srli	s5,s4,0x30
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f5e:	004a9c13          	slli	s8,s5,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    7f62:	138cb283          	ld	t0,312(s9)
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f66:	415c0b33          	sub	s6,s8,s5
    7f6a:	003b1b93          	slli	s7,s6,0x3
    7f6e:	0900                	addi	s0,sp,144
    7f70:	41890513          	addi	a0,s2,1048
    7f74:	01740fb3          	add	t6,s0,s7
    7f78:	85d6                	mv	a1,s5
                    for (i=0 ; i<default_num_contexts; i++)
    7f7a:	045afb63          	bgeu	s5,t0,7fd0 <__perf_end+0x396>
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f7e:	ff2fd603          	lhu	a2,-14(t6)
    7f82:	9fff80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    7f86:	001a859b          	addiw	a1,s5,1
    7f8a:	03059693          	slli	a3,a1,0x30
    7f8e:	0306dd13          	srli	s10,a3,0x30
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f92:	004d1613          	slli	a2,s10,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    7f96:	138cb303          	ld	t1,312(s9)
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7f9a:	41a603b3          	sub	t2,a2,s10
    7f9e:	00339813          	slli	a6,t2,0x3
    7fa2:	09010893          	addi	a7,sp,144
    7fa6:	41890513          	addi	a0,s2,1048
    7faa:	01088733          	add	a4,a7,a6
    7fae:	85ea                	mv	a1,s10
                    for (i=0 ; i<default_num_contexts; i++)
    7fb0:	026d7063          	bgeu	s10,t1,7fd0 <__perf_end+0x396>
                        ee_printf("[%d]crclist    : 0x%04x\n",i,results[i].crclist);
    7fb4:	ff275603          	lhu	a2,-14(a4)
    7fb8:	9c9f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    7fbc:	001d0e1b          	addiw	t3,s10,1
    7fc0:	138cb503          	ld	a0,312(s9)
    7fc4:	030e1e93          	slli	t4,t3,0x30
    7fc8:	030edd93          	srli	s11,t4,0x30
    7fcc:	f2ade8e3          	bltu	s11,a0,7efc <__perf_end+0x2c2>
    7fd0:	69c6                	ld	s3,80(sp)
            if (results[0].execs & ID_MATRIX)
    7fd2:	0029f913          	andi	s2,s3,2
    7fd6:	0e090363          	beqz	s2,80bc <__perf_end+0x482>
                    for (i=0 ; i<default_num_contexts; i++)
    7fda:	138cb083          	ld	ra,312(s9)
    7fde:	1e008b63          	beqz	ra,81d4 <__perf_end+0x59a>
    7fe2:	4d81                	li	s11,0
    7fe4:	69c1                	lui	s3,0x10
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    7fe6:	004d9f13          	slli	t5,s11,0x4
    7fea:	41bf02b3          	sub	t0,t5,s11
    7fee:	00329a13          	slli	s4,t0,0x3
    7ff2:	09010a93          	addi	s5,sp,144
    7ff6:	014a8c33          	add	s8,s5,s4
    7ffa:	ff4c5603          	lhu	a2,-12(s8)
                    for (i=0 ; i<default_num_contexts; i++)
    7ffe:	001d8b9b          	addiw	s7,s11,1
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8002:	85ee                	mv	a1,s11
    8004:	43898513          	addi	a0,s3,1080 # 10438 <seed3_volatile+0x2f4>
                    for (i=0 ; i<default_num_contexts; i++)
    8008:	030b9413          	slli	s0,s7,0x30
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    800c:	975f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8010:	03045d13          	srli	s10,s0,0x30
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8014:	004d1f93          	slli	t6,s10,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    8018:	138cbb03          	ld	s6,312(s9)
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    801c:	41af8333          	sub	t1,t6,s10
    8020:	00331593          	slli	a1,t1,0x3
    8024:	0914                	addi	a3,sp,144
    8026:	00b68633          	add	a2,a3,a1
    802a:	43898513          	addi	a0,s3,1080
    802e:	85ea                	mv	a1,s10
                    for (i=0 ; i<default_num_contexts; i++)
    8030:	096d7563          	bgeu	s10,s6,80ba <__perf_end+0x480>
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8034:	ff465603          	lhu	a2,-12(a2)
    8038:	09010913          	addi	s2,sp,144
    803c:	945f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8040:	001d081b          	addiw	a6,s10,1
    8044:	03081893          	slli	a7,a6,0x30
    8048:	0308dd93          	srli	s11,a7,0x30
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    804c:	004d9713          	slli	a4,s11,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    8050:	138cb383          	ld	t2,312(s9)
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8054:	41b70e33          	sub	t3,a4,s11
    8058:	003e1e93          	slli	t4,t3,0x3
    805c:	43898513          	addi	a0,s3,1080
    8060:	01d907b3          	add	a5,s2,t4
    8064:	85ee                	mv	a1,s11
                    for (i=0 ; i<default_num_contexts; i++)
    8066:	047dfa63          	bgeu	s11,t2,80ba <__perf_end+0x480>
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    806a:	ff47d603          	lhu	a2,-12(a5)
    806e:	0900                	addi	s0,sp,144
    8070:	911f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8074:	001d829b          	addiw	t0,s11,1
    8078:	03029a13          	slli	s4,t0,0x30
    807c:	030a5a93          	srli	s5,s4,0x30
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8080:	004a9c13          	slli	s8,s5,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    8084:	138cbf03          	ld	t5,312(s9)
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    8088:	415c0b33          	sub	s6,s8,s5
    808c:	003b1b93          	slli	s7,s6,0x3
    8090:	43898513          	addi	a0,s3,1080
    8094:	01740d33          	add	s10,s0,s7
    8098:	85d6                	mv	a1,s5
                    for (i=0 ; i<default_num_contexts; i++)
    809a:	03eaf063          	bgeu	s5,t5,80ba <__perf_end+0x480>
                        ee_printf("[%d]crcmatrix   : 0x%04x\n",i,results[i].crcmatrix);
    809e:	ff4d5603          	lhu	a2,-12(s10)
    80a2:	8dff80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    80a6:	001a8f9b          	addiw	t6,s5,1
    80aa:	138cb503          	ld	a0,312(s9)
    80ae:	030f9313          	slli	t1,t6,0x30
    80b2:	03035d93          	srli	s11,t1,0x30
    80b6:	f2ade8e3          	bltu	s11,a0,7fe6 <__perf_end+0x3ac>
    80ba:	69c6                	ld	s3,80(sp)
            if (results[0].execs & ID_STATE)
    80bc:	0049f093          	andi	ra,s3,4
    80c0:	10009d63          	bnez	ra,81da <__perf_end+0x5a0>
            for (i=0 ; i<default_num_contexts; i++)
    80c4:	138cb083          	ld	ra,312(s9)
    80c8:	4a01                	li	s4,0
    80ca:	6941                	lui	s2,0x10
    80cc:	0c008c63          	beqz	ra,81a4 <__perf_end+0x56a>
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    80d0:	004a1293          	slli	t0,s4,0x4
    80d4:	41428c33          	sub	s8,t0,s4
    80d8:	003c1b13          	slli	s6,s8,0x3
    80dc:	09010b93          	addi	s7,sp,144
    80e0:	016b8d33          	add	s10,s7,s6
    80e4:	ff0d5603          	lhu	a2,-16(s10)
    80e8:	85d2                	mv	a1,s4
    80ea:	47890513          	addi	a0,s2,1144 # 10478 <seed3_volatile+0x334>
    80ee:	893f80ef          	jal	ra,980 <whisperPrintf>
            for (i=0 ; i<default_num_contexts; i++)
    80f2:	001a041b          	addiw	s0,s4,1
    80f6:	03041313          	slli	t1,s0,0x30
    80fa:	03035d93          	srli	s11,t1,0x30
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    80fe:	004d9993          	slli	s3,s11,0x4
            for (i=0 ; i<default_num_contexts; i++)
    8102:	138cbf83          	ld	t6,312(s9)
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8106:	41b986b3          	sub	a3,s3,s11
    810a:	090c                	addi	a1,sp,144
    810c:	00369613          	slli	a2,a3,0x3
    8110:	00c583b3          	add	t2,a1,a2
    8114:	47890513          	addi	a0,s2,1144
    8118:	85ee                	mv	a1,s11
            for (i=0 ; i<default_num_contexts; i++)
    811a:	09fdf563          	bgeu	s11,t6,81a4 <__perf_end+0x56a>
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    811e:	ff03d603          	lhu	a2,-16(t2)
    8122:	85ff80ef          	jal	ra,980 <whisperPrintf>
            for (i=0 ; i<default_num_contexts; i++)
    8126:	001d881b          	addiw	a6,s11,1
    812a:	03081893          	slli	a7,a6,0x30
    812e:	0308da93          	srli	s5,a7,0x30
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8132:	004a9713          	slli	a4,s5,0x4
            for (i=0 ; i<default_num_contexts; i++)
    8136:	138cba03          	ld	s4,312(s9)
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    813a:	41570e33          	sub	t3,a4,s5
    813e:	003e1e93          	slli	t4,t3,0x3
    8142:	091c                	addi	a5,sp,144
    8144:	47890513          	addi	a0,s2,1144
    8148:	01d78f33          	add	t5,a5,t4
    814c:	85d6                	mv	a1,s5
            for (i=0 ; i<default_num_contexts; i++)
    814e:	054afb63          	bgeu	s5,s4,81a4 <__perf_end+0x56a>
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8152:	ff0f5603          	lhu	a2,-16(t5)
            for (i=0 ; i<default_num_contexts; i++)
    8156:	001a8c1b          	addiw	s8,s5,1
    815a:	030c1b13          	slli	s6,s8,0x30
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    815e:	823f80ef          	jal	ra,980 <whisperPrintf>
            for (i=0 ; i<default_num_contexts; i++)
    8162:	030b5b93          	srli	s7,s6,0x30
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8166:	004b9d13          	slli	s10,s7,0x4
            for (i=0 ; i<default_num_contexts; i++)
    816a:	138cb283          	ld	t0,312(s9)
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    816e:	417d0fb3          	sub	t6,s10,s7
    8172:	003f9413          	slli	s0,t6,0x3
    8176:	09010313          	addi	t1,sp,144
    817a:	47890513          	addi	a0,s2,1144
    817e:	00830db3          	add	s11,t1,s0
    8182:	85de                	mv	a1,s7
            for (i=0 ; i<default_num_contexts; i++)
    8184:	025bf063          	bgeu	s7,t0,81a4 <__perf_end+0x56a>
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8188:	ff0dd603          	lhu	a2,-16(s11)
            for (i=0 ; i<default_num_contexts; i++)
    818c:	001b899b          	addiw	s3,s7,1
                    ee_printf("[%d]crcfinal   : 0x%04x\n",i,results[i].crc);
    8190:	ff0f80ef          	jal	ra,980 <whisperPrintf>
            for (i=0 ; i<default_num_contexts; i++)
    8194:	138cb503          	ld	a0,312(s9)
    8198:	03099693          	slli	a3,s3,0x30
    819c:	0306da13          	srli	s4,a3,0x30
    81a0:	f2aa68e3          	bltu	s4,a0,80d0 <__perf_end+0x496>
            if (total_errors==0) {
    81a4:	62048263          	beqz	s1,87c8 <__perf_end+0xb8e>
            if (total_errors>0)
    81a8:	60905a63          	blez	s1,87bc <__perf_end+0xb82>
                    ee_printf("Errors detected\n");
    81ac:	64c1                	lui	s1,0x10
    81ae:	4e848513          	addi	a0,s1,1256 # 104e8 <seed3_volatile+0x3a4>
    81b2:	fcef80ef          	jal	ra,980 <whisperPrintf>
    }
    81b6:	70ee                	ld	ra,248(sp)
    81b8:	744e                	ld	s0,240(sp)
    81ba:	74ae                	ld	s1,232(sp)
    81bc:	790e                	ld	s2,224(sp)
    81be:	69ee                	ld	s3,216(sp)
    81c0:	6a4e                	ld	s4,208(sp)
    81c2:	6aae                	ld	s5,200(sp)
    81c4:	6b0e                	ld	s6,192(sp)
    81c6:	7bea                	ld	s7,184(sp)
    81c8:	7c4a                	ld	s8,176(sp)
    81ca:	7caa                	ld	s9,168(sp)
    81cc:	7d0a                	ld	s10,160(sp)
    81ce:	6dea                	ld	s11,152(sp)
    81d0:	6111                	addi	sp,sp,256
    81d2:	8082                	ret
            if (results[0].execs & ID_STATE)
    81d4:	0049f793          	andi	a5,s3,4
    81d8:	d7f1                	beqz	a5,81a4 <__perf_end+0x56a>
                    for (i=0 ; i<default_num_contexts; i++)
    81da:	138cb583          	ld	a1,312(s9)
    81de:	d1f9                	beqz	a1,81a4 <__perf_end+0x56a>
    81e0:	4a81                	li	s5,0
    81e2:	6941                	lui	s2,0x10
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    81e4:	004a9693          	slli	a3,s5,0x4
    81e8:	41568633          	sub	a2,a3,s5
    81ec:	00361393          	slli	t2,a2,0x3
    81f0:	09010813          	addi	a6,sp,144
    81f4:	007808b3          	add	a7,a6,t2
    81f8:	ff68d603          	lhu	a2,-10(a7)
    81fc:	85d6                	mv	a1,s5
    81fe:	45890513          	addi	a0,s2,1112 # 10458 <seed3_volatile+0x314>
    8202:	f7ef80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8206:	001a8e1b          	addiw	t3,s5,1
    820a:	030e1e93          	slli	t4,t3,0x30
    820e:	030eda13          	srli	s4,t4,0x30
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8212:	004a1793          	slli	a5,s4,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    8216:	138cb703          	ld	a4,312(s9)
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    821a:	41478f33          	sub	t5,a5,s4
    821e:	003f1293          	slli	t0,t5,0x3
    8222:	09010a93          	addi	s5,sp,144
    8226:	45890513          	addi	a0,s2,1112
    822a:	005a8c33          	add	s8,s5,t0
    822e:	85d2                	mv	a1,s4
                    for (i=0 ; i<default_num_contexts; i++)
    8230:	e8ea7ae3          	bgeu	s4,a4,80c4 <__perf_end+0x48a>
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8234:	ff6c5603          	lhu	a2,-10(s8)
                    for (i=0 ; i<default_num_contexts; i++)
    8238:	001a0b9b          	addiw	s7,s4,1
    823c:	030b9413          	slli	s0,s7,0x30
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8240:	f40f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8244:	03045d13          	srli	s10,s0,0x30
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8248:	004d1f93          	slli	t6,s10,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    824c:	138cbb03          	ld	s6,312(s9)
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8250:	41af8333          	sub	t1,t6,s10
    8254:	00331d93          	slli	s11,t1,0x3
    8258:	09010993          	addi	s3,sp,144
    825c:	45890513          	addi	a0,s2,1112
    8260:	01b986b3          	add	a3,s3,s11
    8264:	85ea                	mv	a1,s10
                    for (i=0 ; i<default_num_contexts; i++)
    8266:	e56d7fe3          	bgeu	s10,s6,80c4 <__perf_end+0x48a>
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    826a:	ff66d603          	lhu	a2,-10(a3)
    826e:	f12f80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    8272:	001d059b          	addiw	a1,s10,1
    8276:	03059393          	slli	t2,a1,0x30
    827a:	0303da13          	srli	s4,t2,0x30
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    827e:	004a1813          	slli	a6,s4,0x4
                    for (i=0 ; i<default_num_contexts; i++)
    8282:	138cb603          	ld	a2,312(s9)
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    8286:	414808b3          	sub	a7,a6,s4
    828a:	00389713          	slli	a4,a7,0x3
    828e:	09010e13          	addi	t3,sp,144
    8292:	45890513          	addi	a0,s2,1112
    8296:	00ee0eb3          	add	t4,t3,a4
    829a:	85d2                	mv	a1,s4
                    for (i=0 ; i<default_num_contexts; i++)
    829c:	e2ca74e3          	bgeu	s4,a2,80c4 <__perf_end+0x48a>
                        ee_printf("[%d]crcstate   : 0x%04x\n",i,results[i].crcstate);
    82a0:	ff6ed603          	lhu	a2,-10(t4)
    82a4:	edcf80ef          	jal	ra,980 <whisperPrintf>
                    for (i=0 ; i<default_num_contexts; i++)
    82a8:	001a079b          	addiw	a5,s4,1
    82ac:	138cb503          	ld	a0,312(s9)
    82b0:	03079f13          	slli	t5,a5,0x30
    82b4:	030f5a93          	srli	s5,t5,0x30
    82b8:	f2aae6e3          	bltu	s5,a0,81e4 <__perf_end+0x5aa>
    82bc:	b521                	j	80c4 <__perf_end+0x48a>
                    ee_printf("Iterat/Sec/MHz  : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    82be:	138cbf83          	ld	t6,312(s9)
    82c2:	6326                	ld	t1,72(sp)
                                  100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
    82c4:	60e1                	lui	ra,0x18
    82c6:	6a008393          	addi	t2,ra,1696 # 186a0 <STACK+0x40>
                    ee_printf("Iterat/Sec/MHz  : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    82ca:	03f306b3          	mul	a3,t1,t6
    82ce:	6641                	lui	a2,0x10
    82d0:	06400e13          	li	t3,100
    82d4:	36060513          	addi	a0,a2,864 # 10360 <seed3_volatile+0x21c>
                                  100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
    82d8:	02768833          	mul	a6,a3,t2
    82dc:	036858b3          	divu	a7,a6,s6
                    ee_printf("Iterat/Sec/MHz  : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
    82e0:	03868733          	mul	a4,a3,s8
    82e4:	03c8f633          	remu	a2,a7,t3
    82e8:	036755b3          	divu	a1,a4,s6
    82ec:	e94f80ef          	jal	ra,980 <whisperPrintf>
            if (time_in_secs(total_time) < 10) {
    82f0:	6509                	lui	a0,0x2
    82f2:	70f50e93          	addi	t4,a0,1807 # 270f <matrix_test+0x151f>
    82f6:	bb2ee1e3          	bltu	t4,s2,7e98 <__perf_end+0x25e>
    82fa:	b669                	j	7e84 <__perf_end+0x24a>
                         crc |= 0x8000;
    82fc:	7b69                	lui	s6,0xffffa
    82fe:	4905                	li	s2,1
    8300:	6a45                	lui	s4,0x11
    8302:	6ac5                	lui	s5,0x11
    8304:	01810c13          	addi	s8,sp,24
    8308:	001b0b93          	addi	s7,s6,1 # ffffffffffffa001 <tohost+0xffffffff8fa7a001>
                        while (secs_passed < (secs_ret)1) {
    830c:	3e700c93          	li	s9,999
                                results[0].iterations*=10;
    8310:	00291d13          	slli	s10,s2,0x2
    8314:	012d0db3          	add	s11,s10,s2
    8318:	001d9913          	slli	s2,s11,0x1
    831c:	e4ca                	sd	s2,72(sp)
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    831e:	b0002e73          	csrr	t3,mcycle
        start_time_val = mcyclel;
    8322:	020e1e93          	slli	t4,t3,0x20
    8326:	020ed493          	srli	s1,t4,0x20
    832a:	e29a3c23          	sd	s1,-456(s4) # 10e38 <start_time_val>
        res->crc=0;
    832e:	e102                	sd	zero,128(sp)
        for (i=0; i<iterations; i++) {
    8330:	4401                	li	s0,0
    8332:	42090263          	beqz	s2,8756 <__perf_end+0xb1c>
                crc=core_bench_list(res,1);
    8336:	4585                	li	a1,1
    8338:	8562                	mv	a0,s8
    833a:	f7bfd0ef          	jal	ra,62b4 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    833e:	08015f03          	lhu	t5,128(sp)
        crc=crcu8( (ee_u8) (newval)               ,crc);
    8342:	0ff57f93          	andi	t6,a0,255
                    data >>= 1;
    8346:	001fd313          	srli	t1,t6,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    834a:	00af45b3          	xor	a1,t5,a0
                    if (x16 == 1)
    834e:	0015f293          	andi	t0,a1,1
                    crc >>= 1;
    8352:	001f5393          	srli	t2,t5,0x1
                    if (x16 == 1)
    8356:	00028a63          	beqz	t0,836a <__perf_end+0x730>
                         crc |= 0x8000;
    835a:	001f509b          	srliw	ra,t5,0x1
    835e:	001bc633          	xor	a2,s7,ra
    8362:	03061693          	slli	a3,a2,0x30
    8366:	0306d393          	srli	t2,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    836a:	0063c733          	xor	a4,t2,t1
                    if (x16 == 1)
    836e:	00177813          	andi	a6,a4,1
                    data >>= 1;
    8372:	002fd893          	srli	a7,t6,0x2
                    if (x16 == 1)
    8376:	0013db13          	srli	s6,t2,0x1
    837a:	00080863          	beqz	a6,838a <__perf_end+0x750>
                         crc |= 0x8000;
    837e:	017b47b3          	xor	a5,s6,s7
    8382:	03079993          	slli	s3,a5,0x30
    8386:	0309db13          	srli	s6,s3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    838a:	011b4d33          	xor	s10,s6,a7
                    if (x16 == 1)
    838e:	001d7d93          	andi	s11,s10,1
                    data >>= 1;
    8392:	003fde13          	srli	t3,t6,0x3
                    if (x16 == 1)
    8396:	001b5593          	srli	a1,s6,0x1
    839a:	000d8863          	beqz	s11,83aa <__perf_end+0x770>
                         crc |= 0x8000;
    839e:	0175ceb3          	xor	t4,a1,s7
    83a2:	030e9f13          	slli	t5,t4,0x30
    83a6:	030f5593          	srli	a1,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83aa:	01c5c2b3          	xor	t0,a1,t3
                    if (x16 == 1)
    83ae:	0012f313          	andi	t1,t0,1
                    data >>= 1;
    83b2:	004fd093          	srli	ra,t6,0x4
                    if (x16 == 1)
    83b6:	0015d393          	srli	t2,a1,0x1
    83ba:	00030863          	beqz	t1,83ca <__perf_end+0x790>
                         crc |= 0x8000;
    83be:	0173c633          	xor	a2,t2,s7
    83c2:	03061693          	slli	a3,a2,0x30
    83c6:	0306d393          	srli	t2,a3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83ca:	0013c733          	xor	a4,t2,ra
                    if (x16 == 1)
    83ce:	00177813          	andi	a6,a4,1
                    data >>= 1;
    83d2:	005fd893          	srli	a7,t6,0x5
                    if (x16 == 1)
    83d6:	0013db13          	srli	s6,t2,0x1
    83da:	00080863          	beqz	a6,83ea <__perf_end+0x7b0>
                         crc |= 0x8000;
    83de:	017b47b3          	xor	a5,s6,s7
    83e2:	03079993          	slli	s3,a5,0x30
    83e6:	0309db13          	srli	s6,s3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    83ea:	011b4d33          	xor	s10,s6,a7
                    if (x16 == 1)
    83ee:	001d7d93          	andi	s11,s10,1
                    data >>= 1;
    83f2:	006fde13          	srli	t3,t6,0x6
                    if (x16 == 1)
    83f6:	001b5593          	srli	a1,s6,0x1
    83fa:	000d8863          	beqz	s11,840a <__perf_end+0x7d0>
                         crc |= 0x8000;
    83fe:	0175ceb3          	xor	t4,a1,s7
    8402:	030e9f13          	slli	t5,t4,0x30
    8406:	030f5593          	srli	a1,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    840a:	01c5c2b3          	xor	t0,a1,t3
                    if (x16 == 1)
    840e:	0012f313          	andi	t1,t0,1
                    data >>= 1;
    8412:	007fdf93          	srli	t6,t6,0x7
                    if (x16 == 1)
    8416:	0015d693          	srli	a3,a1,0x1
    841a:	00030863          	beqz	t1,842a <__perf_end+0x7f0>
                         crc |= 0x8000;
    841e:	0176c0b3          	xor	ra,a3,s7
    8422:	03009613          	slli	a2,ra,0x30
    8426:	03065693          	srli	a3,a2,0x30
                    if (x16 == 1)
    842a:	0016f393          	andi	t2,a3,1
    842e:	0016d893          	srli	a7,a3,0x1
    8432:	01f38863          	beq	t2,t6,8442 <__perf_end+0x808>
                         crc |= 0x8000;
    8436:	0178c733          	xor	a4,a7,s7
    843a:	03071813          	slli	a6,a4,0x30
    843e:	03085893          	srli	a7,a6,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    8442:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8446:	00a8c7b3          	xor	a5,a7,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    844a:	0ff57993          	andi	s3,a0,255
                    if (x16 == 1)
    844e:	0017fb13          	andi	s6,a5,1
                    data >>= 1;
    8452:	0019dd13          	srli	s10,s3,0x1
                    if (x16 == 1)
    8456:	0018de93          	srli	t4,a7,0x1
    845a:	000b0863          	beqz	s6,846a <__perf_end+0x830>
                         crc |= 0x8000;
    845e:	017ecdb3          	xor	s11,t4,s7
    8462:	030d9e13          	slli	t3,s11,0x30
    8466:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    846a:	01aecf33          	xor	t5,t4,s10
                    if (x16 == 1)
    846e:	001f7593          	andi	a1,t5,1
                    data >>= 1;
    8472:	0029d293          	srli	t0,s3,0x2
                    if (x16 == 1)
    8476:	001ed093          	srli	ra,t4,0x1
    847a:	c599                	beqz	a1,8488 <__perf_end+0x84e>
                         crc |= 0x8000;
    847c:	0170c333          	xor	t1,ra,s7
    8480:	03031f93          	slli	t6,t1,0x30
    8484:	030fd093          	srli	ra,t6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8488:	0050c633          	xor	a2,ra,t0
                    if (x16 == 1)
    848c:	00167693          	andi	a3,a2,1
                    data >>= 1;
    8490:	0039d393          	srli	t2,s3,0x3
                    if (x16 == 1)
    8494:	0010d893          	srli	a7,ra,0x1
    8498:	c699                	beqz	a3,84a6 <__perf_end+0x86c>
                         crc |= 0x8000;
    849a:	0178c733          	xor	a4,a7,s7
    849e:	03071813          	slli	a6,a4,0x30
    84a2:	03085893          	srli	a7,a6,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84a6:	0078c533          	xor	a0,a7,t2
                    if (x16 == 1)
    84aa:	00157b13          	andi	s6,a0,1
                    data >>= 1;
    84ae:	0049dd13          	srli	s10,s3,0x4
                    if (x16 == 1)
    84b2:	0018de13          	srli	t3,a7,0x1
    84b6:	000b0863          	beqz	s6,84c6 <__perf_end+0x88c>
                         crc |= 0x8000;
    84ba:	017e47b3          	xor	a5,t3,s7
    84be:	03079d93          	slli	s11,a5,0x30
    84c2:	030dde13          	srli	t3,s11,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84c6:	01ae4eb3          	xor	t4,t3,s10
                    if (x16 == 1)
    84ca:	001eff13          	andi	t5,t4,1
                    data >>= 1;
    84ce:	0059d593          	srli	a1,s3,0x5
                    if (x16 == 1)
    84d2:	001e5f93          	srli	t6,t3,0x1
    84d6:	000f0863          	beqz	t5,84e6 <__perf_end+0x8ac>
                         crc |= 0x8000;
    84da:	017fc2b3          	xor	t0,t6,s7
    84de:	03029313          	slli	t1,t0,0x30
    84e2:	03035f93          	srli	t6,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    84e6:	00bfc0b3          	xor	ra,t6,a1
                    if (x16 == 1)
    84ea:	0010f613          	andi	a2,ra,1
                    data >>= 1;
    84ee:	0069d693          	srli	a3,s3,0x6
                    if (x16 == 1)
    84f2:	001fd813          	srli	a6,t6,0x1
    84f6:	c619                	beqz	a2,8504 <__perf_end+0x8ca>
                         crc |= 0x8000;
    84f8:	017843b3          	xor	t2,a6,s7
    84fc:	03039713          	slli	a4,t2,0x30
    8500:	03075813          	srli	a6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8504:	00d848b3          	xor	a7,a6,a3
                    if (x16 == 1)
    8508:	0018f513          	andi	a0,a7,1
                    data >>= 1;
    850c:	0079d993          	srli	s3,s3,0x7
                    if (x16 == 1)
    8510:	00185793          	srli	a5,a6,0x1
    8514:	c519                	beqz	a0,8522 <__perf_end+0x8e8>
                         crc |= 0x8000;
    8516:	0177cb33          	xor	s6,a5,s7
    851a:	030b1d13          	slli	s10,s6,0x30
    851e:	030d5793          	srli	a5,s10,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8522:	0137cdb3          	xor	s11,a5,s3
                    if (x16 == 1)
    8526:	001dfe13          	andi	t3,s11,1
    852a:	0017d293          	srli	t0,a5,0x1
    852e:	000e0863          	beqz	t3,853e <__perf_end+0x904>
                         crc |= 0x8000;
    8532:	0172ceb3          	xor	t4,t0,s7
    8536:	030e9f13          	slli	t5,t4,0x30
    853a:	030f5293          	srli	t0,t5,0x30
                crc=core_bench_list(res,-1);
    853e:	55fd                	li	a1,-1
    8540:	8562                	mv	a0,s8
                res->crc=crcu16(crc,res->crc);
    8542:	08511023          	sh	t0,128(sp)
                crc=core_bench_list(res,-1);
    8546:	d6ffd0ef          	jal	ra,62b4 <core_bench_list>
                res->crc=crcu16(crc,res->crc);
    854a:	08015583          	lhu	a1,128(sp)
        crc=crcu8( (ee_u8) (newval)               ,crc);
    854e:	0ff57313          	andi	t1,a0,255
                    data >>= 1;
    8552:	00135613          	srli	a2,t1,0x1
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8556:	00a5cfb3          	xor	t6,a1,a0
                    if (x16 == 1)
    855a:	001ff693          	andi	a3,t6,1
                    crc >>= 1;
    855e:	0015d813          	srli	a6,a1,0x1
                    if (x16 == 1)
    8562:	ca89                	beqz	a3,8574 <__perf_end+0x93a>
                         crc |= 0x8000;
    8564:	0015d09b          	srliw	ra,a1,0x1
    8568:	001bc3b3          	xor	t2,s7,ra
    856c:	03039713          	slli	a4,t2,0x30
    8570:	03075813          	srli	a6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8574:	00c848b3          	xor	a7,a6,a2
                    if (x16 == 1)
    8578:	0018f993          	andi	s3,a7,1
                    data >>= 1;
    857c:	00235b13          	srli	s6,t1,0x2
                    if (x16 == 1)
    8580:	00185d93          	srli	s11,a6,0x1
    8584:	00098863          	beqz	s3,8594 <__perf_end+0x95a>
                         crc |= 0x8000;
    8588:	017dcd33          	xor	s10,s11,s7
    858c:	030d1793          	slli	a5,s10,0x30
    8590:	0307dd93          	srli	s11,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8594:	016dce33          	xor	t3,s11,s6
                    if (x16 == 1)
    8598:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    859c:	00335f13          	srli	t5,t1,0x3
                    if (x16 == 1)
    85a0:	001ddf93          	srli	t6,s11,0x1
    85a4:	000e8863          	beqz	t4,85b4 <__perf_end+0x97a>
                         crc |= 0x8000;
    85a8:	017fc2b3          	xor	t0,t6,s7
    85ac:	03029593          	slli	a1,t0,0x30
    85b0:	0305df93          	srli	t6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85b4:	01efc6b3          	xor	a3,t6,t5
                    if (x16 == 1)
    85b8:	0016f613          	andi	a2,a3,1
                    data >>= 1;
    85bc:	00435093          	srli	ra,t1,0x4
                    if (x16 == 1)
    85c0:	001fd813          	srli	a6,t6,0x1
    85c4:	c619                	beqz	a2,85d2 <__perf_end+0x998>
                         crc |= 0x8000;
    85c6:	017843b3          	xor	t2,a6,s7
    85ca:	03039713          	slli	a4,t2,0x30
    85ce:	03075813          	srli	a6,a4,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85d2:	001848b3          	xor	a7,a6,ra
                    if (x16 == 1)
    85d6:	0018f993          	andi	s3,a7,1
                    data >>= 1;
    85da:	00535b13          	srli	s6,t1,0x5
                    if (x16 == 1)
    85de:	00185d93          	srli	s11,a6,0x1
    85e2:	00098863          	beqz	s3,85f2 <__perf_end+0x9b8>
                         crc |= 0x8000;
    85e6:	017dcd33          	xor	s10,s11,s7
    85ea:	030d1793          	slli	a5,s10,0x30
    85ee:	0307dd93          	srli	s11,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    85f2:	016dce33          	xor	t3,s11,s6
                    if (x16 == 1)
    85f6:	001e7e93          	andi	t4,t3,1
                    data >>= 1;
    85fa:	00635f13          	srli	t5,t1,0x6
                    if (x16 == 1)
    85fe:	001ddf93          	srli	t6,s11,0x1
    8602:	000e8863          	beqz	t4,8612 <__perf_end+0x9d8>
                         crc |= 0x8000;
    8606:	017fc2b3          	xor	t0,t6,s7
    860a:	03029593          	slli	a1,t0,0x30
    860e:	0305df93          	srli	t6,a1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8612:	01efc6b3          	xor	a3,t6,t5
                    if (x16 == 1)
    8616:	0016f613          	andi	a2,a3,1
                    data >>= 1;
    861a:	00735313          	srli	t1,t1,0x7
                    if (x16 == 1)
    861e:	001fd813          	srli	a6,t6,0x1
    8622:	c619                	beqz	a2,8630 <__perf_end+0x9f6>
                         crc |= 0x8000;
    8624:	017840b3          	xor	ra,a6,s7
    8628:	03009393          	slli	t2,ra,0x30
    862c:	0303d813          	srli	a6,t2,0x30
                    if (x16 == 1)
    8630:	00187713          	andi	a4,a6,1
    8634:	00185b13          	srli	s6,a6,0x1
    8638:	00670863          	beq	a4,t1,8648 <__perf_end+0xa0e>
                         crc |= 0x8000;
    863c:	017b48b3          	xor	a7,s6,s7
    8640:	03089993          	slli	s3,a7,0x30
    8644:	0309db13          	srli	s6,s3,0x30
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    8648:	0085551b          	srliw	a0,a0,0x8
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    864c:	00ab4d33          	xor	s10,s6,a0
        crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    8650:	0ff57d93          	andi	s11,a0,255
                    if (x16 == 1)
    8654:	001d7e13          	andi	t3,s10,1
                    data >>= 1;
    8658:	001dde93          	srli	t4,s11,0x1
                    if (x16 == 1)
    865c:	001b5293          	srli	t0,s6,0x1
    8660:	000e0863          	beqz	t3,8670 <__perf_end+0xa36>
                         crc |= 0x8000;
    8664:	0172c7b3          	xor	a5,t0,s7
    8668:	03079f13          	slli	t5,a5,0x30
    866c:	030f5293          	srli	t0,t5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8670:	01d2c5b3          	xor	a1,t0,t4
                    if (x16 == 1)
    8674:	0015ff93          	andi	t6,a1,1
                    data >>= 1;
    8678:	002dd693          	srli	a3,s11,0x2
                    if (x16 == 1)
    867c:	0012d093          	srli	ra,t0,0x1
    8680:	000f8863          	beqz	t6,8690 <__perf_end+0xa56>
                         crc |= 0x8000;
    8684:	0170c633          	xor	a2,ra,s7
    8688:	03061313          	slli	t1,a2,0x30
    868c:	03035093          	srli	ra,t1,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    8690:	00d0c3b3          	xor	t2,ra,a3
                    if (x16 == 1)
    8694:	0013f813          	andi	a6,t2,1
                    data >>= 1;
    8698:	003dd713          	srli	a4,s11,0x3
                    if (x16 == 1)
    869c:	0010db13          	srli	s6,ra,0x1
    86a0:	00080863          	beqz	a6,86b0 <__perf_end+0xa76>
                         crc |= 0x8000;
    86a4:	017b48b3          	xor	a7,s6,s7
    86a8:	03089993          	slli	s3,a7,0x30
    86ac:	0309db13          	srli	s6,s3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86b0:	00eb4533          	xor	a0,s6,a4
                    if (x16 == 1)
    86b4:	00157d13          	andi	s10,a0,1
                    data >>= 1;
    86b8:	004dde13          	srli	t3,s11,0x4
                    if (x16 == 1)
    86bc:	001b5f13          	srli	t5,s6,0x1
    86c0:	000d0863          	beqz	s10,86d0 <__perf_end+0xa96>
                         crc |= 0x8000;
    86c4:	017f4eb3          	xor	t4,t5,s7
    86c8:	030e9793          	slli	a5,t4,0x30
    86cc:	0307df13          	srli	t5,a5,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86d0:	01cf42b3          	xor	t0,t5,t3
                    if (x16 == 1)
    86d4:	0012f593          	andi	a1,t0,1
                    data >>= 1;
    86d8:	005ddf93          	srli	t6,s11,0x5
                    if (x16 == 1)
    86dc:	001f5313          	srli	t1,t5,0x1
    86e0:	c599                	beqz	a1,86ee <__perf_end+0xab4>
                         crc |= 0x8000;
    86e2:	017346b3          	xor	a3,t1,s7
    86e6:	03069613          	slli	a2,a3,0x30
    86ea:	03065313          	srli	t1,a2,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    86ee:	01f340b3          	xor	ra,t1,t6
                    if (x16 == 1)
    86f2:	0010f393          	andi	t2,ra,1
                    data >>= 1;
    86f6:	006dd813          	srli	a6,s11,0x6
                    if (x16 == 1)
    86fa:	00135993          	srli	s3,t1,0x1
    86fe:	00038863          	beqz	t2,870e <__perf_end+0xad4>
                         crc |= 0x8000;
    8702:	0179c733          	xor	a4,s3,s7
    8706:	03071893          	slli	a7,a4,0x30
    870a:	0308d993          	srli	s3,a7,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    870e:	0109cb33          	xor	s6,s3,a6
                    if (x16 == 1)
    8712:	001b7513          	andi	a0,s6,1
                    data >>= 1;
    8716:	007ddd93          	srli	s11,s11,0x7
                    if (x16 == 1)
    871a:	0019de93          	srli	t4,s3,0x1
    871e:	c519                	beqz	a0,872c <__perf_end+0xaf2>
                         crc |= 0x8000;
    8720:	017ecd33          	xor	s10,t4,s7
    8724:	030d1e13          	slli	t3,s10,0x30
    8728:	030e5e93          	srli	t4,t3,0x30
                    x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    872c:	01bec7b3          	xor	a5,t4,s11
                    if (x16 == 1)
    8730:	0017ff13          	andi	t5,a5,1
    8734:	001edf93          	srli	t6,t4,0x1
    8738:	000f0863          	beqz	t5,8748 <__perf_end+0xb0e>
                         crc |= 0x8000;
    873c:	017fc2b3          	xor	t0,t6,s7
    8740:	03029593          	slli	a1,t0,0x30
    8744:	0305df93          	srli	t6,a1,0x30
                res->crc=crcu16(crc,res->crc);
    8748:	09f11023          	sh	t6,128(sp)
                if (i==0) res->crclist=res->crc;
    874c:	cc1d                	beqz	s0,878a <__perf_end+0xb50>
        for (i=0; i<iterations; i++) {
    874e:	0405                	addi	s0,s0,1
    8750:	be8913e3          	bne	s2,s0,8336 <__perf_end+0x6fc>
    8754:	6926                	ld	s2,72(sp)
        asm volatile ("csrr %0,mcycle" : "=r" (mcyclel) );
    8756:	b00026f3          	csrr	a3,mcycle
        stop_time_val = mcyclel;
    875a:	02069613          	slli	a2,a3,0x20
    875e:	02065313          	srli	t1,a2,0x20
    8762:	e26ab823          	sd	t1,-464(s5) # 10e30 <stop_time_val>
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    8766:	409304b3          	sub	s1,t1,s1
                        while (secs_passed < (secs_ret)1) {
    876a:	ba9cf3e3          	bgeu	s9,s1,8310 <__perf_end+0x6d6>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    876e:	3e800b93          	li	s7,1000
    8772:	0374dcb3          	divu	s9,s1,s7
                        results[0].iterations*=1+10/divisor;
    8776:	40a9                	li	ra,10
    8778:	0390d3b3          	divu	t2,ra,s9
    877c:	00138813          	addi	a6,t2,1
    8780:	03090733          	mul	a4,s2,a6
    8784:	e4ba                	sd	a4,72(sp)
    8786:	c9eff06f          	j	7c24 <main+0xfe>
                if (i==0) res->crclist=res->crc;
    878a:	09f11123          	sh	t6,130(sp)
        for (i=0; i<iterations; i++) {
    878e:	4405                	li	s0,1
    8790:	b65d                	j	8336 <__perf_end+0x6fc>
                                        results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    8792:	02ae83b3          	mul	t2,t4,a0
    8796:	00728433          	add	s0,t0,t2
    879a:	fc22                	sd	s0,56(sp)
                        if (results[i].execs & ID_LIST) {
    879c:	c6030263          	beqz	t1,7c00 <main+0xda>
    87a0:	e22ff06f          	j	7dc2 <__perf_end+0x188>
                                        results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    87a4:	02ad0633          	mul	a2,s10,a0
    87a8:	00c286b3          	add	a3,t0,a2
    87ac:	f836                	sd	a3,48(sp)
                        if ((1<<(ee_u32)i) & results[0].execs) {
    87ae:	c40e0763          	beqz	t3,7bfc <main+0xd6>
    87b2:	b7c5                	j	8792 <__perf_end+0xb58>
                                        results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    87b4:	f416                	sd	t0,40(sp)
                        if ((1<<(ee_u32)i) & results[0].execs) {
    87b6:	c4070163          	beqz	a4,7bf8 <main+0xd2>
    87ba:	b7ed                	j	87a4 <__perf_end+0xb6a>
                    ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
    87bc:	6cc1                	lui	s9,0x10
    87be:	500c8513          	addi	a0,s9,1280 # 10500 <seed3_volatile+0x3bc>
    87c2:	9bef80ef          	jal	ra,980 <whisperPrintf>
            return MAIN_RETURN_VAL;
    87c6:	bac5                	j	81b6 <__perf_end+0x57c>
                    ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
    87c8:	60c1                	lui	ra,0x10
    87ca:	49808513          	addi	a0,ra,1176 # 10498 <seed3_volatile+0x354>
    87ce:	9b2f80ef          	jal	ra,980 <whisperPrintf>
            if (total_errors<0)
    87d2:	b2d5                	j	81b6 <__perf_end+0x57c>
                        ee_printf("6k validation run parameters for coremark.\n");
    87d4:	6ac1                	lui	s5,0x10
    87d6:	178a8513          	addi	a0,s5,376 # 10178 <seed3_volatile+0x34>
    87da:	9a6f80ef          	jal	ra,980 <whisperPrintf>
    87de:	6785                	lui	a5,0x1
    87e0:	19978a13          	addi	s4,a5,409 # 1199 <core_list_mergesort+0xc1>
    87e4:	6f11                	lui	t5,0x4
    87e6:	628d                	lui	t0,0x3
    87e8:	9bff0993          	addi	s3,t5,-1601 # 39bf <matrix_mul_const+0xfb>
    87ec:	8d52                	mv	s10,s4
    87ee:	34028a93          	addi	s5,t0,832 # 3340 <core_bench_matrix+0x16e>
    87f2:	cceff06f          	j	7cc0 <__perf_end+0x86>
                        ee_printf("2K validation run parameters for coremark.\n");
    87f6:	69c1                	lui	s3,0x10
    87f8:	21098513          	addi	a0,s3,528 # 10210 <seed3_volatile+0xcc>
    87fc:	6b25                	lui	s6,0x9
    87fe:	6c39                	lui	s8,0xe
    8800:	980f80ef          	jal	ra,980 <whisperPrintf>
    8804:	d84b0993          	addi	s3,s6,-636 # 8d84 <_end+0x534>
    8808:	74700a13          	li	s4,1863
    880c:	74700d13          	li	s10,1863
    8810:	3c1c0a93          	addi	s5,s8,961 # e3c1 <_end+0x5b71>
    8814:	cacff06f          	j	7cc0 <__perf_end+0x86>
                        ee_printf("6k performance run parameters for coremark.\n");
    8818:	6fc1                	lui	t6,0x10
    881a:	148f8513          	addi	a0,t6,328 # 10148 <seed3_volatile+0x4>
    881e:	962f80ef          	jal	ra,980 <whisperPrintf>
    8822:	66b1                	lui	a3,0xc
    8824:	e5268a13          	addi	s4,a3,-430 # be52 <_end+0x3602>
    8828:	6619                	lui	a2,0x6
    882a:	6335                	lui	t1,0xd
    882c:	e4760993          	addi	s3,a2,-441 # 5e47 <cmp_complex+0x69f>
    8830:	8d52                	mv	s10,s4
    8832:	4b030a93          	addi	s5,t1,1200 # d4b0 <_end+0x4c60>
    8836:	c8aff06f          	j	7cc0 <__perf_end+0x86>
    883a:	6b06                	ld	s6,64(sp)
                    for (i=0 ; i<default_num_contexts; i++) {
    883c:	4d01                	li	s10,0
    883e:	e12ff06f          	j	7e50 <__perf_end+0x216>
            switch (seedcrc) { /* test known output for common seeds */
    8842:	69c1                	lui	s3,0x10
    8844:	fff98d13          	addi	s10,s3,-1 # ffff <_end+0x77af>
    8848:	54fd                	li	s1,-1
    884a:	6cc1                	lui	s9,0x10
    884c:	e04ff06f          	j	7e50 <__perf_end+0x216>
